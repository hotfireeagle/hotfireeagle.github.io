<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜游</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-24T02:04:23.922Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hahahai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb学习</title>
    <link href="http://yoursite.com/2018/11/22/mongodb%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/11/22/mongodb学习/</id>
    <published>2018-11-22T14:53:01.000Z</published>
    <updated>2018-11-24T02:04:23.922Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-mongo命令行基本用法-首先得使用mongod命令启动MongoDB数据库服务-才能运行mongo命令"><a href="#1-mongo命令行基本用法-首先得使用mongod命令启动MongoDB数据库服务-才能运行mongo命令" class="headerlink" title="1.mongo命令行基本用法(首先得使用mongod命令启动MongoDB数据库服务,才能运行mongo命令)"></a>1.mongo命令行基本用法(首先得使用mongod命令启动MongoDB数据库服务,才能运行mongo命令)</h3><ul><li><p>1.创建新的数据库：use dbName，存在该数据库的话那么便连接到该数据库，不存在数据库的话那么便创建数据库。需要注意的时，利用他创建数据库，数据库并不会立马展示出来，需要先往里面插入一些数据才行。</p></li><li><p>2.查看所有数据库：show dbs。</p></li><li><p>3.往数据库里面插入内容：db.databaseName.insert(Obj)，便可以插入一些数据。</p></li></ul><h3 id="2-mongodb搭配nestjs进行使用"><a href="#2-mongodb搭配nestjs进行使用" class="headerlink" title="2.mongodb搭配nestjs进行使用"></a>2.mongodb搭配nestjs进行使用</h3><ul><li><p>1.首先安装依赖包@nestjs/mongoose package以及mongoose package。</p></li><li><p>2.在应用的根模块里面import由@nestjs/mongoose package导出的MongooseModule模块，并且配置连接数据库的信息（使用MongooseModule的forRoot方法，该方法所接受的第一个参数是数据库的地址：形如mongodb://localhost/nest。</p></li><li><p>3.在每个功能模块里面（需要和数据库进行交互）导入功能Schema建模文件，依然需要导入MongooseModule模块，功能模块的service肯定是需要用上该功能的数据库对象的，那么他怎么使用呢？答案就是功能模块import MongooseModule.forFeature()，MongooseModule.forFeature方法接收一个数组作为参数，数组里面的每一项形如{name: ‘’, schema: SchemaModel }，利用nestjs的依赖注入功能，我们便可以在功能模块的service文件中@InjectModel(name)使用这个数据库对象了。使用MongooseModule.forFeature方法，我们往该模块里面注册model，在service文件里面我们使用@nestjs/common导出的@Injectable装饰器修饰service类，来表明这个类是可以被动态插入的，接着便可以使用@InjectModel(name)来引入model了：</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// user.module.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Module &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MongooseModule &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserSchema &#125; <span class="keyword">from</span> <span class="string">'./user.schema'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserController &#125; <span class="keyword">from</span> <span class="string">'./user.controller'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123;</span><br><span class="line">    imports: [MongooseModule.forFeature([&#123;name: <span class="string">'User'</span>, schema: UserSchema&#125;])],</span><br><span class="line">    controllers: [UserController],</span><br><span class="line">    providers: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserModule &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.service.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@nestjs/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InjectModel &#125; <span class="keyword">from</span> <span class="string">'@nestjs/mongoose'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Model &#125; <span class="keyword">from</span> <span class="string">'mongoose'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cat &#125; <span class="keyword">from</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-mongo命令行基本用法-首先得使用mongod命令启动MongoDB数据库服务-才能运行mongo命令&quot;&gt;&lt;a href=&quot;#1-mongo命令行基本用法-首先得使用mongod命令启动MongoDB数据库服务-才能运行mongo命令&quot; class=&quot;hea
      
    
    </summary>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>工作bug总结</title>
    <link href="http://yoursite.com/2018/11/21/%E5%B7%A5%E4%BD%9Cbug%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/21/工作bug总结/</id>
    <published>2018-11-21T03:06:23.000Z</published>
    <updated>2018-11-21T03:13:50.456Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-关于vue中v-html遇到null-a的问题，很不幸，浏览器控制台并不会报错，并且会莫名其妙的阻塞渲染。在拿到后端传过来的数据最好做一个检查，有效就使用，无效的话就使用默认值吧。"><a href="#1-关于vue中v-html遇到null-a的问题，很不幸，浏览器控制台并不会报错，并且会莫名其妙的阻塞渲染。在拿到后端传过来的数据最好做一个检查，有效就使用，无效的话就使用默认值吧。" class="headerlink" title="1.关于vue中v-html遇到null.a的问题，很不幸，浏览器控制台并不会报错，并且会莫名其妙的阻塞渲染。在拿到后端传过来的数据最好做一个检查，有效就使用，无效的话就使用默认值吧。"></a>1.关于vue中v-html遇到null.a的问题，很不幸，浏览器控制台并不会报错，并且会莫名其妙的阻塞渲染。在拿到后端传过来的数据最好做一个检查，有效就使用，无效的话就使用默认值吧。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-关于vue中v-html遇到null-a的问题，很不幸，浏览器控制台并不会报错，并且会莫名其妙的阻塞渲染。在拿到后端传过来的数据最好做一个检查，有效就使用，无效的话就使用默认值吧。&quot;&gt;&lt;a href=&quot;#1-关于vue中v-html遇到null-a的问题，很不
      
    
    </summary>
    
    
      <category term="work" scheme="http://yoursite.com/tags/work/"/>
    
  </entry>
  
  <entry>
    <title>js注意点</title>
    <link href="http://yoursite.com/2018/11/18/js%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>http://yoursite.com/2018/11/18/js注意点/</id>
    <published>2018-11-18T03:28:02.000Z</published>
    <updated>2018-11-19T14:14:47.235Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-pure-Array-prototype-push-不是一个纯方法；Array-prototype-filter是一个纯方法；String-prototype-replace是一个纯方法。String-prototype-substring-是一个纯方法。"><a href="#1-pure-Array-prototype-push-不是一个纯方法；Array-prototype-filter是一个纯方法；String-prototype-replace是一个纯方法。String-prototype-substring-是一个纯方法。" class="headerlink" title="1.pure: Array.prototype.push()不是一个纯方法；Array.prototype.filter是一个纯方法；String.prototype.replace是一个纯方法。String.prototype.substring()是一个纯方法。"></a>1.pure: Array.prototype.push()不是一个纯方法；Array.prototype.filter是一个纯方法；String.prototype.replace是一个纯方法。String.prototype.substring()是一个纯方法。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-pure-Array-prototype-push-不是一个纯方法；Array-prototype-filter是一个纯方法；String-prototype-replace是一个纯方法。String-prototype-substring-是一个纯方法。&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>nest学习</title>
    <link href="http://yoursite.com/2018/11/14/nest%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/11/14/nest学习/</id>
    <published>2018-11-14T03:52:42.000Z</published>
    <updated>2018-11-14T09:26:04.250Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Controllers的功能：handling-incoming-requests，returning-response-to-the-client。"><a href="#1-Controllers的功能：handling-incoming-requests，returning-response-to-the-client。" class="headerlink" title="1.Controllers的功能：handling incoming requests，returning response to the client。"></a>1.Controllers的功能：handling incoming requests，returning response to the client。</h3><h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-Controllers的功能：handling-incoming-requests，returning-response-to-the-client。&quot;&gt;&lt;a href=&quot;#1-Controllers的功能：handling-incoming-requests
      
    
    </summary>
    
    
      <category term="nest" scheme="http://yoursite.com/tags/nest/"/>
    
  </entry>
  
  <entry>
    <title>css知识点</title>
    <link href="http://yoursite.com/2018/11/04/css%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/11/04/css知识点/</id>
    <published>2018-11-04T04:09:42.000Z</published>
    <updated>2018-11-19T05:43:03.751Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。"><a href="#1-一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。" class="headerlink" title="1.一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。"></a>1.一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。</h3><h3 id="2-css单位："><a href="#2-css单位：" class="headerlink" title="2.css单位："></a>2.css单位：</h3><ul><li>1.相对长度单位：1).相对字体长度单位，比如em,ex(字符x的高度)以及css3出现的rem,ch(字符0的宽度)。</li><li>2.相对视区单位：vw, vh, vmin, vmax，其中vmin代表的是视窗宽度和视窗高度较小值的百分比。vmax代表的是两者之间较大值的百分比。</li><li>3.绝对长度单位。</li></ul><h3 id="3-选择器备忘："><a href="#3-选择器备忘：" class="headerlink" title="3.选择器备忘："></a>3.选择器备忘：</h3><ul><li><p>1.属性选择器：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[title="css"]</span>&#123;&#125;</span><br><span class="line"><span class="selector-attr">[title~="css"]</span>&#123;&#125;:包含<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-attr">[title^="css"]</span>&#123;&#125;:以<span class="selector-tag">css</span>开头</span><br><span class="line"><span class="selector-attr">[title$="css"]</span>&#123;&#125;:以<span class="selector-tag">css</span>结尾</span><br></pre></td></tr></table></figure></li><li><p>2.伪类选择器：一个英文冒号；</p></li><li>3.伪元素选择器：两个连续的英文冒号；</li><li>4.兄弟选择器：~连接；</li><li>5.相邻兄弟选择器：+连接；</li></ul><h3 id="4-关于浮动："><a href="#4-关于浮动：" class="headerlink" title="4.关于浮动："></a>4.关于浮动：</h3><p>浮动会使得自身元素脱离文档流，比如下面这种情况：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out clear"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 500px;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.f</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">    float: right;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面这种情况来说，由于子元素.f设置了浮动，而浮动会使得脱离文档流，因此.out并不会被子元素给撑开，这就造成.out根本就看不到的情况。那么怎么解决这种情况呢？可以利用清除浮动来解决这个问题，如下所示，只需要添加下面的这些css即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的地方是：如果一个元素是flex的话，那么他的子元素就是默认清楚了浮动的，对于上面这种情况，像下面这样设置也能够将out撑开：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-块级元素：需要注意的是块级元素和display为block的元素并不是一个级别，例如常见的块元素有div-list-table其中list的display值为list-item，而table的display值为table。"><a href="#5-块级元素：需要注意的是块级元素和display为block的元素并不是一个级别，例如常见的块元素有div-list-table其中list的display值为list-item，而table的display值为table。" class="headerlink" title="5.块级元素：需要注意的是块级元素和display为block的元素并不是一个级别，例如常见的块元素有div,list,table其中list的display值为list-item，而table的display值为table。"></a>5.块级元素：需要注意的是块级元素和display为block的元素并不是一个级别，例如常见的块元素有div,list,table其中list的display值为list-item，而table的display值为table。</h3><h3 id="6-盒子：每个元素都拥有两个盒子，外在盒子和容器盒子，其中外在盒子决定了是可以一行显示还是需要换行显示；容器盒子负责宽高和内容呈现。照这个概念，起始display-block可以理解为display-block-block；而display-inline可以理解为display-inline-inline；display-inline-block可以理解为display-inline-block；display也可以理解为display-block-table；那么问题来了，width以及height是作用在哪个盒子上面的呢？答案是容器盒子。"><a href="#6-盒子：每个元素都拥有两个盒子，外在盒子和容器盒子，其中外在盒子决定了是可以一行显示还是需要换行显示；容器盒子负责宽高和内容呈现。照这个概念，起始display-block可以理解为display-block-block；而display-inline可以理解为display-inline-inline；display-inline-block可以理解为display-inline-block；display也可以理解为display-block-table；那么问题来了，width以及height是作用在哪个盒子上面的呢？答案是容器盒子。" class="headerlink" title="6.盒子：每个元素都拥有两个盒子，外在盒子和容器盒子，其中外在盒子决定了是可以一行显示还是需要换行显示；容器盒子负责宽高和内容呈现。照这个概念，起始display: block可以理解为display: block-block；而display: inline可以理解为display: inline inline；display: inline-block可以理解为display: inline block；display也可以理解为display: block table；那么问题来了，width以及height是作用在哪个盒子上面的呢？答案是容器盒子。"></a>6.盒子：每个元素都拥有两个盒子，外在盒子和容器盒子，其中外在盒子决定了是可以一行显示还是需要换行显示；容器盒子负责宽高和内容呈现。照这个概念，起始display: block可以理解为display: block-block；而display: inline可以理解为display: inline inline；display: inline-block可以理解为display: inline block；display也可以理解为display: block table；那么问题来了，width以及height是作用在哪个盒子上面的呢？答案是容器盒子。</h3><h3 id="7-关于width-auto所需要注意的地方，width-auto，它具有四种不同的宽度表现，分别如下所示：1-充分利用可用空间，比如说div元素以及p元素都是默认100-于父级容器的；2-收缩到合适（shrink-to-fit），典型代表就是浮动，绝对定位以及inline-block以及table元素。3-收缩到最小，经常出现在table布局为auto的表格中，比如说下面这种情况："><a href="#7-关于width-auto所需要注意的地方，width-auto，它具有四种不同的宽度表现，分别如下所示：1-充分利用可用空间，比如说div元素以及p元素都是默认100-于父级容器的；2-收缩到合适（shrink-to-fit），典型代表就是浮动，绝对定位以及inline-block以及table元素。3-收缩到最小，经常出现在table布局为auto的表格中，比如说下面这种情况：" class="headerlink" title="7.关于width:auto所需要注意的地方，width:auto，它具有四种不同的宽度表现，分别如下所示：1.充分利用可用空间，比如说div元素以及p元素都是默认100%于父级容器的；2.收缩到合适（shrink-to-fit），典型代表就是浮动，绝对定位以及inline-block以及table元素。3.收缩到最小，经常出现在table布局为auto的表格中，比如说下面这种情况："></a>7.关于width:auto所需要注意的地方，width:auto，它具有四种不同的宽度表现，分别如下所示：1.充分利用可用空间，比如说div元素以及p元素都是默认100%于父级容器的；2.收缩到合适（shrink-to-fit），典型代表就是浮动，绝对定位以及inline-block以及table元素。3.收缩到最小，经常出现在table布局为auto的表格中，比如说下面这种情况：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ttttttttttttttttttttttttttttt<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>重中之重重中之重重中之重重中之重重中之重<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>ttttttttttttttttttttttttttttt<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  table &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px; // 只设置宽度并且是一个很小的值，高度让子元素负责撑开</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  td &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面这种情况来说，出现的结果就是：中间的td的宽度是最小的，为什么呢，因为table设置了一个特别小的宽度，而td的width没有进行设置，所以就是默认值auto，对于td的width为auto来说，它所带来的效果就是缩小到最小，并且由于英文是单词换行而不是字母换行，而中文是每个字换行，所以最终导致了中间的这个td是最下的，两边的td并不会出现换行的情况（因为没有空格分割单词，所以都被认为是字母）。还有一点需要注意的那就是：尽管table设置了一个宽度为100px，但是他的实际宽度并不是100px.</p><p>4.width的值被设置成了auto还有一个结果那就是超出容器限制，一般情况下width:auto都不会超过父级容器宽度的，但是下面这种情况则可能发生：内容很长的连续英文和数字，或者内联元素被设置了white-space: nowrap。这种情况下则会出现子元素会超出父元素的宽度限制：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"overflow"</span>&gt;</span>中文测试，由于设置了white-space的值为wrap所以不会出现换行的情况<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 80px;</span></span><br><span class="line"><span class="undefined">    border: 1px solid red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.overflow</span> &#123;</span></span><br><span class="line"><span class="undefined">    white-space: nowrap;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-块级元素的正常流特性，块级元素与html文档就好比水流和容器一样，将水倒入容器里面，那么水会占满整个容器的宽度。块级元素也一样，当没有明确声明他的width值的时候，那么他的width值就是默认的auto，其表现就是父容器的100-了。所以像下面这样的用法是错误的："><a href="#8-块级元素的正常流特性，块级元素与html文档就好比水流和容器一样，将水倒入容器里面，那么水会占满整个容器的宽度。块级元素也一样，当没有明确声明他的width值的时候，那么他的width值就是默认的auto，其表现就是父容器的100-了。所以像下面这样的用法是错误的：" class="headerlink" title="8.块级元素的正常流特性，块级元素与html文档就好比水流和容器一样，将水倒入容器里面，那么水会占满整个容器的宽度。块级元素也一样，当没有明确声明他的width值的时候，那么他的width值就是默认的auto，其表现就是父容器的100%了。所以像下面这样的用法是错误的："></a>8.块级元素的正常流特性，块级元素与html文档就好比水流和容器一样，将水倒入容器里面，那么水会占满整个容器的宽度。块级元素也一样，当没有明确声明他的width值的时候，那么他的width值就是默认的auto，其表现就是父容器的100%了。所以像下面这样的用法是错误的：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  width: 100%; // 块级元素会自动铺满其父容器的</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然block会自动占满整个容器的宽度，那么当我们给一个元素显式设置100%的话又会发生什么呢？答案就是有可能会超出容器空间。</p><h3 id="9-绝对定位模型（position值为absolute和fixed）情况下，如果没有设置宽度以及高度的话，那么盒子默认是以“包裹性”的一个形式出现的，也就是说宽度取决于内部尺寸。但是有一种情况除外，那就是非替换元素如果设置了left-right或者top-bottom的话，那么就会此时盒子的宽度就是由外部尺寸来决定了，取决于最近的具有定位属性的祖先元素的宽度来进行计算。"><a href="#9-绝对定位模型（position值为absolute和fixed）情况下，如果没有设置宽度以及高度的话，那么盒子默认是以“包裹性”的一个形式出现的，也就是说宽度取决于内部尺寸。但是有一种情况除外，那就是非替换元素如果设置了left-right或者top-bottom的话，那么就会此时盒子的宽度就是由外部尺寸来决定了，取决于最近的具有定位属性的祖先元素的宽度来进行计算。" class="headerlink" title="9.绝对定位模型（position值为absolute和fixed）情况下，如果没有设置宽度以及高度的话，那么盒子默认是以“包裹性”的一个形式出现的，也就是说宽度取决于内部尺寸。但是有一种情况除外，那就是非替换元素如果设置了left,right或者top,bottom的话，那么就会此时盒子的宽度就是由外部尺寸来决定了，取决于最近的具有定位属性的祖先元素的宽度来进行计算。"></a>9.绝对定位模型（position值为absolute和fixed）情况下，如果没有设置宽度以及高度的话，那么盒子默认是以“包裹性”的一个形式出现的，也就是说宽度取决于内部尺寸。但是有一种情况除外，那就是非替换元素如果设置了left,right或者top,bottom的话，那么就会此时盒子的宽度就是由外部尺寸来决定了，取决于最近的具有定位属性的祖先元素的宽度来进行计算。</h3><h3 id="10-包裹性：如果一个元素的display属性值为inline-block的话或者是浮动元素以及绝对定位元素的话，那么即使里面内容再多，只要是正常文本，那么其宽度也不会超过容器。按钮的默认最大宽度是240px，按钮属于典型的inline-block元素，因此如果按钮内具有很多文字的话，那么默认行为下，文字是不会溢出盒子的，文字会自动换行。包裹性在某些场合下特别有用："><a href="#10-包裹性：如果一个元素的display属性值为inline-block的话或者是浮动元素以及绝对定位元素的话，那么即使里面内容再多，只要是正常文本，那么其宽度也不会超过容器。按钮的默认最大宽度是240px，按钮属于典型的inline-block元素，因此如果按钮内具有很多文字的话，那么默认行为下，文字是不会溢出盒子的，文字会自动换行。包裹性在某些场合下特别有用：" class="headerlink" title="10.包裹性：如果一个元素的display属性值为inline-block的话或者是浮动元素以及绝对定位元素的话，那么即使里面内容再多，只要是正常文本，那么其宽度也不会超过容器。按钮的默认最大宽度是240px，按钮属于典型的inline-block元素，因此如果按钮内具有很多文字的话，那么默认行为下，文字是不会溢出盒子的，文字会自动换行。包裹性在某些场合下特别有用："></a>10.包裹性：如果一个元素的display属性值为inline-block的话或者是浮动元素以及绝对定位元素的话，那么即使里面内容再多，只要是正常文本，那么其宽度也不会超过容器。按钮的默认最大宽度是240px，按钮属于典型的inline-block元素，因此如果按钮内具有很多文字的话，那么默认行为下，文字是不会溢出盒子的，文字会自动换行。包裹性在某些场合下特别有用：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>some txt<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">    padding: 10px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    text-align: left;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像上面这样的样式设置所产生的效果就是：当some txt很少的时候，文本在out容器中所呈现的效果是居中的；当some txt文本很多的时候，文本在out容器中所呈现的效果是左对齐的。</p><h3 id="11-内部容器尺寸除了包裹性这一表现外，还存在着其他两种表现行为，分别是：首选最小宽度，需要注意的是，首选最小宽度并不是0，在css世界中，文字以及图片的权重一定会大于布局，因此在width-auto的时候，宽度是不会变成0的，而是首选最小宽度。"><a href="#11-内部容器尺寸除了包裹性这一表现外，还存在着其他两种表现行为，分别是：首选最小宽度，需要注意的是，首选最小宽度并不是0，在css世界中，文字以及图片的权重一定会大于布局，因此在width-auto的时候，宽度是不会变成0的，而是首选最小宽度。" class="headerlink" title="11.内部容器尺寸除了包裹性这一表现外，还存在着其他两种表现行为，分别是：首选最小宽度，需要注意的是，首选最小宽度并不是0，在css世界中，文字以及图片的权重一定会大于布局，因此在width:auto的时候，宽度是不会变成0的，而是首选最小宽度。"></a>11.内部容器尺寸除了包裹性这一表现外，还存在着其他两种表现行为，分别是：首选最小宽度，需要注意的是，首选最小宽度并不是0，在css世界中，文字以及图片的权重一定会大于布局，因此在width:auto的时候，宽度是不会变成0的，而是首选最小宽度。</h3><h3 id="12-input以及textarea元素属于替换元素，替换元素的特性之一就是他的尺寸由内部元素决定（width被设置为auto的情况下），不管是block还是inline的。"><a href="#12-input以及textarea元素属于替换元素，替换元素的特性之一就是他的尺寸由内部元素决定（width被设置为auto的情况下），不管是block还是inline的。" class="headerlink" title="12.input以及textarea元素属于替换元素，替换元素的特性之一就是他的尺寸由内部元素决定（width被设置为auto的情况下），不管是block还是inline的。"></a>12.input以及textarea元素属于替换元素，替换元素的特性之一就是他的尺寸由内部元素决定（width被设置为auto的情况下），不管是block还是inline的。</h3><h3 id="13-height和width有一个明显的区别就是对于百分比单位的支持，对于width属性，就算父元素width的值为auto，其百分比也是支持的；但是对于height属性来说，如果父元素height的值为auto的话，只要子元素还在文档流中，其百分比值就完全被忽略了。"><a href="#13-height和width有一个明显的区别就是对于百分比单位的支持，对于width属性，就算父元素width的值为auto，其百分比也是支持的；但是对于height属性来说，如果父元素height的值为auto的话，只要子元素还在文档流中，其百分比值就完全被忽略了。" class="headerlink" title="13.height和width有一个明显的区别就是对于百分比单位的支持，对于width属性，就算父元素width的值为auto，其百分比也是支持的；但是对于height属性来说，如果父元素height的值为auto的话，只要子元素还在文档流中，其百分比值就完全被忽略了。"></a>13.height和width有一个明显的区别就是对于百分比单位的支持，对于width属性，就算父元素width的值为auto，其百分比也是支持的；但是对于height属性来说，如果父元素height的值为auto的话，只要子元素还在文档流中，其百分比值就完全被忽略了。</h3><h3 id="14-绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，绝对定位元素的百分比是根据父元素的padding-box的，而非绝对定位元素的百分比是根据父元素的content-box的。"><a href="#14-绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，绝对定位元素的百分比是根据父元素的padding-box的，而非绝对定位元素的百分比是根据父元素的content-box的。" class="headerlink" title="14.绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，绝对定位元素的百分比是根据父元素的padding-box的，而非绝对定位元素的百分比是根据父元素的content-box的。"></a>14.绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，绝对定位元素的百分比是根据父元素的padding-box的，而非绝对定位元素的百分比是根据父元素的content-box的。</h3><h3 id="15-绝对定位的元素width-auto不具有正常流的特性，具备的是包裹性。"><a href="#15-绝对定位的元素width-auto不具有正常流的特性，具备的是包裹性。" class="headerlink" title="15.绝对定位的元素width:auto不具有正常流的特性，具备的是包裹性。"></a>15.绝对定位的元素width:auto不具有正常流的特性，具备的是包裹性。</h3><h3 id="16-使用-img-max-width-100-height-auto-能够让图片有一个比较响应式效果，但是这样做也会产生另外一个后果，那就是在图片加载时到图片加载成功会有一个高度从0变成计算高度的过程，图文会有明显的瀑布式下落。"><a href="#16-使用-img-max-width-100-height-auto-能够让图片有一个比较响应式效果，但是这样做也会产生另外一个后果，那就是在图片加载时到图片加载成功会有一个高度从0变成计算高度的过程，图文会有明显的瀑布式下落。" class="headerlink" title="16.使用.img {max-width: 100%; height: auto;}能够让图片有一个比较响应式效果，但是这样做也会产生另外一个后果，那就是在图片加载时到图片加载成功会有一个高度从0变成计算高度的过程，图文会有明显的瀑布式下落。"></a>16.使用.img {max-width: 100%; height: auto;}能够让图片有一个比较响应式效果，但是这样做也会产生另外一个后果，那就是在图片加载时到图片加载成功会有一个高度从0变成计算高度的过程，图文会有明显的瀑布式下落。</h3><h3 id="17-max-width会超越-important的width。"><a href="#17-max-width会超越-important的width。" class="headerlink" title="17.max-width会超越!important的width。"></a>17.max-width会超越!important的width。</h3><h3 id="18-js获取页面加载成功，js操控css；"><a href="#18-js获取页面加载成功，js操控css；" class="headerlink" title="18.js获取页面加载成功，js操控css；"></a>18.js获取页面加载成功，js操控css；</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'someId'</span>);</span><br><span class="line">  box.style.display = <span class="string">'none'</span>; <span class="comment">// 需要注意的是，transition对display属性不会有动画效果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="19-任意高度的展开收起动画效果制作：1-使用display来控制，缺陷没有动画效果；2-使用height来完成，但是由于是不定高的，所以不好确定扩展之后的高度；3-使用max-height来完成，如下所示："><a href="#19-任意高度的展开收起动画效果制作：1-使用display来控制，缺陷没有动画效果；2-使用height来完成，但是由于是不定高的，所以不好确定扩展之后的高度；3-使用max-height来完成，如下所示：" class="headerlink" title="19.任意高度的展开收起动画效果制作：1.使用display来控制，缺陷没有动画效果；2.使用height来完成，但是由于是不定高的，所以不好确定扩展之后的高度；3.使用max-height来完成，如下所示："></a>19.任意高度的展开收起动画效果制作：1.使用display来控制，缺陷没有动画效果；2.使用height来完成，但是由于是不定高的，所以不好确定扩展之后的高度；3.使用max-height来完成，如下所示：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ele</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: max-height .<span class="number">55s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.ele</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">  max-height: 666px; // 设置一个合适的值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="20-内联元素的定义：内联特指元素的外在盒子是和display-inline不是同一个概念。inline-block和inline-table都是内联元素，button是inline-block，img是inline-inline的，所以他们都是默认内联元素。几个概念：1-内容盒子-content-area-，由字符内容所限定的一个盒子，对于img来说，内容盒子就是img本身；2-内联盒子-inline-box-，行内显示，元素的外在盒子；3-行框盒子-line-box-，每一行就是一个行框盒子，行框盒子又由一个个内联盒子组成；4-包含块-containing-box-，包含块有一个一个的行框盒子组成。"><a href="#20-内联元素的定义：内联特指元素的外在盒子是和display-inline不是同一个概念。inline-block和inline-table都是内联元素，button是inline-block，img是inline-inline的，所以他们都是默认内联元素。几个概念：1-内容盒子-content-area-，由字符内容所限定的一个盒子，对于img来说，内容盒子就是img本身；2-内联盒子-inline-box-，行内显示，元素的外在盒子；3-行框盒子-line-box-，每一行就是一个行框盒子，行框盒子又由一个个内联盒子组成；4-包含块-containing-box-，包含块有一个一个的行框盒子组成。" class="headerlink" title="20.内联元素的定义：内联特指元素的外在盒子是和display:inline不是同一个概念。inline-block和inline-table都是内联元素，button是inline-block，img是inline-inline的，所以他们都是默认内联元素。几个概念：1.内容盒子(content area)，由字符内容所限定的一个盒子，对于img来说，内容盒子就是img本身；2.内联盒子(inline box)，行内显示，元素的外在盒子；3.行框盒子(line box)，每一行就是一个行框盒子，行框盒子又由一个个内联盒子组成；4.包含块(containing box)，包含块有一个一个的行框盒子组成。"></a>20.内联元素的定义：内联特指元素的外在盒子是和display:inline不是同一个概念。inline-block和inline-table都是内联元素，button是inline-block，img是inline-inline的，所以他们都是默认内联元素。几个概念：1.内容盒子(content area)，由字符内容所限定的一个盒子，对于img来说，内容盒子就是img本身；2.内联盒子(inline box)，行内显示，元素的外在盒子；3.行框盒子(line box)，每一行就是一个行框盒子，行框盒子又由一个个内联盒子组成；4.包含块(containing box)，包含块有一个一个的行框盒子组成。</h3><h3 id="21-幽灵空白节点，看下面这样的html结构以及样式设置："><a href="#21-幽灵空白节点，看下面这样的html结构以及样式设置：" class="headerlink" title="21.幽灵空白节点，看下面这样的html结构以及样式设置："></a>21.幽灵空白节点，看下面这样的html结构以及样式设置：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#233</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  span &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这样写将会产生一个具有高度,width为100%的盒子。很奇怪吧，明明没有内容，height应该是0的。</p><h3 id="21-下划线效果"><a href="#21-下划线效果" class="headerlink" title="21.下划线效果"></a>21.下划线效果</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.un</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-替换元素：我们可以根据外在盒子是内联的还是块级的将盒子分为内联盒子和块级盒子，那什么是替换元素呢？替换元素就是那些通过修改元素标签的某个属性值，所呈现的内容就可以被替换的元素。因此img元素是（修改src属性便可以改变内容表现），video元素也是（修改src属性便可以改变内容表现），input元素也是（修改type属性也可以改变其内容表现），textarea元素也是（修改rows属性也可以改变内容表现），select元素也是（设置multiple属性便可以设置多选）。"><a href="#22-替换元素：我们可以根据外在盒子是内联的还是块级的将盒子分为内联盒子和块级盒子，那什么是替换元素呢？替换元素就是那些通过修改元素标签的某个属性值，所呈现的内容就可以被替换的元素。因此img元素是（修改src属性便可以改变内容表现），video元素也是（修改src属性便可以改变内容表现），input元素也是（修改type属性也可以改变其内容表现），textarea元素也是（修改rows属性也可以改变内容表现），select元素也是（设置multiple属性便可以设置多选）。" class="headerlink" title="22.替换元素：我们可以根据外在盒子是内联的还是块级的将盒子分为内联盒子和块级盒子，那什么是替换元素呢？替换元素就是那些通过修改元素标签的某个属性值，所呈现的内容就可以被替换的元素。因此img元素是（修改src属性便可以改变内容表现），video元素也是（修改src属性便可以改变内容表现），input元素也是（修改type属性也可以改变其内容表现），textarea元素也是（修改rows属性也可以改变内容表现），select元素也是（设置multiple属性便可以设置多选）。"></a>22.替换元素：我们可以根据外在盒子是内联的还是块级的将盒子分为内联盒子和块级盒子，那什么是替换元素呢？替换元素就是那些通过修改元素标签的某个属性值，所呈现的内容就可以被替换的元素。因此img元素是（修改src属性便可以改变内容表现），video元素也是（修改src属性便可以改变内容表现），input元素也是（修改type属性也可以改变其内容表现），textarea元素也是（修改rows属性也可以改变内容表现），select元素也是（设置multiple属性便可以设置多选）。</h3><ul><li>1.替换元素的典型行为之有自己的尺寸。大部分替换元素在没有明确尺寸设定的情况下，其默认尺寸为300px✖️150px，比如video元素和canvas元素，但是也有例外，比如img在明确尺寸设定的情况下，width一般都是为0，高度值在不同的浏览器下表现是不同的。所有的替换元素其外在盒子都是inline的，也就是说都是内联元素，但是内在盒子是啥在各个浏览器可能就有差异了，可以确定的是img和video在三大浏览器都是inlne的；button和select都是inline-block的；重点是经常使用到的input，在Firefox中是inline的，在ie和Chrome中是inline-block的。</li></ul><h3 id="22-一些有用的img标签应用："><a href="#22-一些有用的img标签应用：" class="headerlink" title="22.一些有用的img标签应用："></a>22.一些有用的img标签应用：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 图片被hover的时候显示另外一张图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"laugh.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">content</span>: <span class="selector-tag">url</span>(<span class="selector-tag">laugh-tear</span><span class="selector-class">.png</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。&quot;&gt;&lt;a href=&quot;#1-一个内联元素若是使用了flex布局的话，那么其width以及height都是可以设置的了。&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>mysql命令行</title>
    <link href="http://yoursite.com/2018/11/03/mysql%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/11/03/mysql命令行/</id>
    <published>2018-11-03T12:39:58.000Z</published>
    <updated>2018-11-03T12:41:28.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-登录mysql："><a href="#1-登录mysql：" class="headerlink" title="1.登录mysql："></a>1.登录mysql：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-登录mysql：&quot;&gt;&lt;a href=&quot;#1-登录mysql：&quot; class=&quot;headerlink&quot; title=&quot;1.登录mysql：&quot;&gt;&lt;/a&gt;1.登录mysql：&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>angular模板语法</title>
    <link href="http://yoursite.com/2018/11/02/angular%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2018/11/02/angular模板语法/</id>
    <published>2018-11-02T04:02:46.000Z</published>
    <updated>2018-11-09T05:38:47.367Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-模板语法概览"><a href="#1-模板语法概览" class="headerlink" title="1.模板语法概览"></a>1.模板语法概览</h3><ul><li><p>1.插值语法：绑定属性变量的值到模板中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; detail.telNum &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>2.DOM元素属性绑定语法：将属性变量的值绑定到div的title属性上面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">title</span>]=<span class="string">"name"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span>，</span><br></pre></td></tr></table></figure></li><li><p>3.class类绑定：当isBlue返回true时div会绑定上isBlue这个类名。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [<span class="attr">class.isBlue</span>]=<span class="string">"isBlue()"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>4.style样式绑定：当isRed为ture时，那么button的文字的颜色为红色。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> [<span class="attr">style.color</span>]=<span class="string">"isRed ? 'red' : 'green'"</span>&gt;</span>洪塞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>5.事键绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(click)="editContract()"</span><br></pre></td></tr></table></figure></li><li><p>6.双向绑定。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(title)]="name"</span><br></pre></td></tr></table></figure></li><li><p>7.模板局部变量：模板局部变量name相当于input的实例化对象。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> #<span class="attr">name</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>8.管道操作符：形式 输入数据|管道名：管道参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>birthday&#123;&#123; birthday | date &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>9.模板表达式操作符：值不是必须的，当detail为null的时候也并不会发生异常。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; detail?.telNum &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>10.星号前缀：使用星号前缀可以简化对结构指令的使用，angular会将带有星号的指令引用替换成带有<template>标签的代码，等同于</template></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> *<span class="attr">myUnless</span>=<span class="string">"boolValue"</span>&gt;</span>myUnless is false now.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> [<span class="attr">myUnless</span>]=<span class="string">"boolValue"</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>now is time<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-模板语法概览&quot;&gt;&lt;a href=&quot;#1-模板语法概览&quot; class=&quot;headerlink&quot; title=&quot;1.模板语法概览&quot;&gt;&lt;/a&gt;1.模板语法概览&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.插值语法：绑定属性变量的值到模板中。&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular生命周期</title>
    <link href="http://yoursite.com/2018/11/01/angular%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/11/01/angular生命周期/</id>
    <published>2018-11-01T14:04:27.000Z</published>
    <updated>2018-11-02T03:19:43.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-各个生命周期钩子接口包含在-angular-core中，每个接口都对应一个名为”ng-接口名”的生命周期方法。例如-angular-core提供的OnInit接口暴露出了一个叫做ngOnInit的生命周期方法。"><a href="#1-各个生命周期钩子接口包含在-angular-core中，每个接口都对应一个名为”ng-接口名”的生命周期方法。例如-angular-core提供的OnInit接口暴露出了一个叫做ngOnInit的生命周期方法。" class="headerlink" title="1.各个生命周期钩子接口包含在@angular/core中，每个接口都对应一个名为”ng+接口名”的生命周期方法。例如@angular/core提供的OnInit接口暴露出了一个叫做ngOnInit的生命周期方法。"></a>1.各个生命周期钩子接口包含在@angular/core中，每个接口都对应一个名为”ng+接口名”的生命周期方法。例如@angular/core提供的OnInit接口暴露出了一个叫做ngOnInit的生命周期方法。</h3><h3 id="2-各个生命周期方法调用的顺序如下所示："><a href="#2-各个生命周期方法调用的顺序如下所示：" class="headerlink" title="2.各个生命周期方法调用的顺序如下所示："></a>2.各个生命周期方法调用的顺序如下所示：</h3><ul><li>ngOnChanges: 当且仅当组件输入数据（@Input所修饰的组件数据）变化时被调用，该方法接收一个SimpleChanges对象，包含当前值和变化前的值。</li><li>ngOnInit: 会在第一次ngOnChanges之后被调用。</li><li>ngDoCheck: 会在每次变化监测时被调用，在每一个变化监测周期内，不管数据值是否发生了变化，ngDoCheck都会被调用。比如鼠标移动的时候会频繁触发mousemove事件，那么此时变化监测便会频繁被触发，随之带来的后果便是ngDoCheck被频繁调用，所以不应该在ngDoCheck里面写太过复杂的逻辑，否则性能大打折扣。</li><li>ngAfterContentInit: 使用<ng-content>将外部内容嵌入到组件视图中就会调用ngAfterContentInit，并且只会执行一次。</ng-content></li><li>ngAfterContentChecked: 使用<ng-content>将外部内容嵌入到组件视图中后，或者每次变化监测的时候都会调用。</ng-content></li><li>ngAfterViewInit: 创建完组件的视图以及子组件的视图后被调用。</li><li>ngAfterViewChecked: 创建完组件的视图以及子组件的视图后被调用一次，并且在每次子组件变化监测时也会被调用。</li><li>ngOnDestory: 销毁指令/组件之前触发。常在这里进行一些资源销毁的操作。</li></ul><h3 id="3-angular变化监测机制："><a href="#3-angular变化监测机制：" class="headerlink" title="3.angular变化监测机制："></a>3.angular变化监测机制：</h3><p>1.当数组发生变化时，Angular能够监测到这些变化并对其所绑定的DOM元素进行相应的更新。angular如何监测数据变化？策略是在适当的时机去检验对象的值是否被改动，什么时机是适当取决于NgZone这个服务来决定。NgZone能够获取到整个应用的上下文，能够对相关异步事件的发生，完成或者异常进行捕获，然后驱动angular的变化监测机制执行。数据变化的源头：在应用程序中，数据变化的源头可以分为如下三类：1.用户行为操作，比如点击；2.前后端数据交互；3.各种定时任务；这3个变化源头都拥有一个共同点那就是他们都是异步的。而之前所说的那个适当的时机就是当异步执行完之后去执行变化监测，而NgZone所做的就是让异步过程能够在执行完之后通知angular，这样angular就会执行下一轮的变化监测工作了，进而将数据更新到DOM上。</p><p>2.NgZone基于Zones实现，NgZone具有angular运行环境的执行上下文，在angular环境中注册的异步事件都运行在这个子zone上。</p><p>3.angular应用是有大大小小的组件组成的，每一个组件都拥有一个自己的变化监测器，由此一棵组件树也是一棵变化监测器树。变化监测器树中的数据流动总是从上到下单向流动的，这是因为变化监测的执行总是从根组件开始，接着从上到下的监测每一个组件的变化。正是因为每个组件都有一个独立的变化监测器，所以每个组件都能够自由灵活的控制变化监测器的暂停或者执行。这对于性能提升是很有意义的。</p><p>4.默认情况下，任何组件模型中的数据变化都会导致整个组件树的变化监测，从根组件开始单向向下，每个组件的变化监测器都会去执行变化的对比工作。而对于大部分组件来说，其输入属性很可能都是没有发生变化的，因此减少不必要的监测操作可以提升应用程序的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-各个生命周期钩子接口包含在-angular-core中，每个接口都对应一个名为”ng-接口名”的生命周期方法。例如-angular-core提供的OnInit接口暴露出了一个叫做ngOnInit的生命周期方法。&quot;&gt;&lt;a href=&quot;#1-各个生命周期钩子接口包
      
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular组件交互</title>
    <link href="http://yoursite.com/2018/11/01/angular%E7%BB%84%E4%BB%B6%E4%BA%A4%E4%BA%92/"/>
    <id>http://yoursite.com/2018/11/01/angular组件交互/</id>
    <published>2018-11-01T13:03:00.000Z</published>
    <updated>2018-11-01T13:48:51.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-父组件通过局部变量获取子组件引用。"><a href="#1-父组件通过局部变量获取子组件引用。" class="headerlink" title="1.父组件通过局部变量获取子组件引用。"></a>1.父组件通过局部变量获取子组件引用。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// child.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'child-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./child.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./child.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  ngOnInit (): <span class="built_in">void</span> &#123; <span class="built_in">console</span>.log(<span class="string">'child-component init'</span>); &#125;</span><br><span class="line">  <span class="meta">@Output</span>() clickEvent = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">boolean</span>&gt;();</span><br><span class="line"></span><br><span class="line">  clickHandler(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clickEvent.emit();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// child.component.html</span></span><br><span class="line">&lt;button (click)=<span class="string">"clickHandler()"</span>&gt;child click&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><p>假如super组件使用了child组件的话，(super组件以及child组件都在同一个模块中使用declarations引入了进来的话)那么使用局部变量的形式进行组件交互的话将会是下面这一种形式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// super.component.html</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;child-component (clickEvent)="addCount()" #child&gt;&lt;/</span>child-component&gt;</span><br><span class="line">  &lt;button (click)=<span class="string">"child.clickHandler()"</span>&gt;<span class="keyword">super</span> click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">// super.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'super-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./super.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./super.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SuperComponent &#123;</span><br><span class="line">  <span class="keyword">private</span> count: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> addCount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这个例子中，点击子组件的button和super组件的button都能够达到同一个效果。分别使用的是方法绑定方案和局部变量方案。需要注意的是，使用局部变量只能调用子组件的公开属性以及方法，并且局部变量只能在模板视图中进行使用。</p><h3 id="2-ViewChild方法"><a href="#2-ViewChild方法" class="headerlink" title="2.ViewChild方法"></a>2.ViewChild方法</h3><p>使用局部变量的局限性之一就是局部变量只能够在模板视图中进行使用，而在很多时候是有受限场景的，为此angular提供了ViewChild方法，它能够将子组件实例化一个实例进行使用，具体使用方法如下：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// super.component.html</span></span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;child-component (clickEvent)="addCount()" #child&gt;&lt;/</span>child-component&gt;</span><br><span class="line">  &lt;button (click)=<span class="string">"myClick()"</span>&gt;<span class="keyword">super</span> click&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">// super.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'super-component'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./super.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./super.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SuperComponent &#123;</span><br><span class="line">  <span class="meta">@ViewChild</span>(ChildComponent) cc: ChildComponent;</span><br><span class="line">  <span class="keyword">private</span> count: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> addCount: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span> = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.count++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">private</span> myClick: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span> = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.cc.clickHandler();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-父组件通过局部变量获取子组件引用。&quot;&gt;&lt;a href=&quot;#1-父组件通过局部变量获取子组件引用。&quot; class=&quot;headerlink&quot; title=&quot;1.父组件通过局部变量获取子组件引用。&quot;&gt;&lt;/a&gt;1.父组件通过局部变量获取子组件引用。&lt;/h3&gt;&lt;figu
      
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>css布局</title>
    <link href="http://yoursite.com/2018/10/31/css%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/10/31/css布局/</id>
    <published>2018-10-31T07:51:40.000Z</published>
    <updated>2018-11-07T01:29:54.355Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-居中方案："><a href="#1-居中方案：" class="headerlink" title="1.居中方案："></a>1.居中方案：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>cool<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .wrapper &#123;</span></span><br><span class="line"><span class="undefined">    display: table-cell;</span></span><br><span class="line"><span class="undefined">    vertical-align: center;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者flex布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>cool<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .wrapper &#123;</span></span><br><span class="line"><span class="undefined">    display: flex;</span></span><br><span class="line"><span class="undefined">    flex-direction: row;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>绝对布局：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>cool<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .wrapper &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .wrapper span &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translate(-50%, -50%);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-文字两端对齐："><a href="#2-文字两端对齐：" class="headerlink" title="2.文字两端对齐："></a>2.文字两端对齐：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text-align: justify;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-居中方案：&quot;&gt;&lt;a href=&quot;#1-居中方案：&quot; class=&quot;headerlink&quot; title=&quot;1.居中方案：&quot;&gt;&lt;/a&gt;1.居中方案：&lt;/h3&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>css动画</title>
    <link href="http://yoursite.com/2018/10/31/css%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2018/10/31/css动画/</id>
    <published>2018-10-31T03:07:50.000Z</published>
    <updated>2018-11-08T08:56:48.044Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-利用css完成一个秒表动画，需要注意的地方：-before以及-after伪元素必须设置content-’’。"><a href="#1-利用css完成一个秒表动画，需要注意的地方：-before以及-after伪元素必须设置content-’’。" class="headerlink" title="1.利用css完成一个秒表动画，需要注意的地方：::before以及::after伪元素必须设置content:’’。"></a>1.利用css完成一个秒表动画，需要注意的地方：::before以及::after伪元素必须设置content:’’。</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stopwatch"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stopwatch-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .stopwatch &#123;</span></span><br><span class="line"><span class="undefined">    width: 30px;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    background-color: transparent;</span></span><br><span class="line"><span class="undefined">    border-radius: 50% 50%;</span></span><br><span class="line"><span class="undefined">    border: 2px solid #fff;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  .stopwatch::before, .stopwatch::after &#123;</span></span><br><span class="line"><span class="undefined">    content: '';</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 14px;</span></span><br><span class="line"><span class="undefined">    left: 15px;</span></span><br><span class="line"><span class="undefined">    height: 2px;</span></span><br><span class="line"><span class="undefined">    background-color: #fff;</span></span><br><span class="line"><span class="undefined">    transform-origin: 1px 1px; // 分针以及时针的旋转中心点</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  /* 分针 */</span></span><br><span class="line"><span class="undefined">  .stopwatch::before &#123;</span></span><br><span class="line"><span class="undefined">    width: 15px;</span></span><br><span class="line"><span class="undefined">      animation: fen 1s linear infinite; // 1s内完成动画，匀速，无限动画</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  /* 时针 */</span></span><br><span class="line"><span class="undefined">  .stopwatch::after &#123;</span></span><br><span class="line"><span class="undefined">    width: 9px;</span></span><br><span class="line"><span class="undefined">    animation: hour 60s linear infinite; // 同理</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  @keyframes fen &#123;</span></span><br><span class="line"><span class="undefined">    0% &#123;transform: rotate(0deg);&#125;</span></span><br><span class="line"><span class="undefined">    100% &#123;transform: rotate(360deg);&#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  @keyframes hour &#123;</span></span><br><span class="line"><span class="undefined">    0% &#123; transform: rotate(0deg); &#125;</span></span><br><span class="line"><span class="undefined">    100% &#123; transform: rotate(360deg); &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  /* 秒表顶部柱头，也可以不画 */</span></span><br><span class="line"><span class="undefined">  .stopwatch-top &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    width: 2px;</span></span><br><span class="line"><span class="undefined">    height: 6px;</span></span><br><span class="line"><span class="undefined">    left: 14px;</span></span><br><span class="line"><span class="undefined">    top: -6px;</span></span><br><span class="line"><span class="undefined">    background-color: #fff;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-电池充电动画"><a href="#2-电池充电动画" class="headerlink" title="2.电池充电动画"></a>2.电池充电动画</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"battery"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  .battery &#123;</span></span><br><span class="line"><span class="undefined">    width: 40px;</span></span><br><span class="line"><span class="undefined">    height: 20px;</span></span><br><span class="line"><span class="undefined">    border: 2px solid #fff;</span></span><br><span class="line"><span class="undefined">    border-radius: 2px;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    background-color: transparent;</span></span><br><span class="line"><span class="undefined">    animation: battery 5s linear infinite;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  /* 电池正极 */</span></span><br><span class="line"><span class="undefined">  .battery::after &#123;</span></span><br><span class="line"><span class="undefined">    content: '';</span></span><br><span class="line"><span class="undefined">    width: 2px;</span></span><br><span class="line"><span class="undefined">    height: 10px;</span></span><br><span class="line"><span class="undefined">    background-color: #fff;</span></span><br><span class="line"><span class="undefined">    border: 0 2px 2px 0;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 5px;</span></span><br><span class="line"><span class="undefined">    right: -4px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  /* 充电动画，利用box-shadow: inset */</span></span><br><span class="line"><span class="undefined">  @keyframes battery &#123;</span></span><br><span class="line"><span class="undefined">    0% &#123; box-shadow: inset 0 0 0 #fff; &#125;;</span></span><br><span class="line"><span class="undefined">    100% &#123; box-shadow: inset 40px 0 0 #fff; &#125;;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-利用css完成一个秒表动画，需要注意的地方：-before以及-after伪元素必须设置content-’’。&quot;&gt;&lt;a href=&quot;#1-利用css完成一个秒表动画，需要注意的地方：-before以及-after伪元素必须设置content-’’。&quot; clas
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>angular指令</title>
    <link href="http://yoursite.com/2018/10/29/angular%E6%8C%87%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/29/angular指令/</id>
    <published>2018-10-29T03:47:02.000Z</published>
    <updated>2018-11-10T01:15:09.315Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用开始，比如下面ngIf结构指令"><a href="#1-指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用开始，比如下面ngIf结构指令" class="headerlink" title="1.指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用开始，比如下面ngIf结构指令"></a>1.指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用<em>开始，比如下面</em>ngIf结构指令</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button *ngIf=<span class="string">"canEdit"</span>&gt;编辑&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-属性指令能够用来改变元素的外观和行为，比如ngStyle指令，能够用来动态计算样式值。"><a href="#2-属性指令能够用来改变元素的外观和行为，比如ngStyle指令，能够用来动态计算样式值。" class="headerlink" title="2.属性指令能够用来改变元素的外观和行为，比如ngStyle指令，能够用来动态计算样式值。"></a>2.属性指令能够用来改变元素的外观和行为，比如ngStyle指令，能够用来动态计算样式值。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span [ngStyle]=<span class="string">"setStyles()"</span>&gt;&#123;&#123; contract.name &#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-在一个组件里面注入一个人服务（使用providers声明注入），那么该服务会被创建出新的实例，组件的所有子组件都会继承这个父组件的注入器对象，复用该注入器里面所存储的服务实例。不过也可以打破服务的单例模式，我们可以通过在组件树的某个非根组件A里也注入这个服务，那么A的子组件使用的就将会是新的服务实例。"><a href="#3-在一个组件里面注入一个人服务（使用providers声明注入），那么该服务会被创建出新的实例，组件的所有子组件都会继承这个父组件的注入器对象，复用该注入器里面所存储的服务实例。不过也可以打破服务的单例模式，我们可以通过在组件树的某个非根组件A里也注入这个服务，那么A的子组件使用的就将会是新的服务实例。" class="headerlink" title="3.在一个组件里面注入一个人服务（使用providers声明注入），那么该服务会被创建出新的实例，组件的所有子组件都会继承这个父组件的注入器对象，复用该注入器里面所存储的服务实例。不过也可以打破服务的单例模式，我们可以通过在组件树的某个非根组件A里也注入这个服务，那么A的子组件使用的就将会是新的服务实例。"></a>3.在一个组件里面注入一个人服务（使用providers声明注入），那么该服务会被创建出新的实例，组件的所有子组件都会继承这个父组件的注入器对象，复用该注入器里面所存储的服务实例。不过也可以打破服务的单例模式，我们可以通过在组件树的某个非根组件A里也注入这个服务，那么A的子组件使用的就将会是新的服务实例。</h3><h3 id="4-模块：模块里面可以包含若干组件，指令，服务，甚至能够拥有独立的路由配置。每个angular应用都至少有一个模块，一般需要有一个模块作为整个应用的路口，这个入口模块称为根模块，通过运行根模块来启动整个angular应用。模块类需要使用NgModule类装饰器进行装饰，这个装饰器主要有下面这几个常用的元数据："><a href="#4-模块：模块里面可以包含若干组件，指令，服务，甚至能够拥有独立的路由配置。每个angular应用都至少有一个模块，一般需要有一个模块作为整个应用的路口，这个入口模块称为根模块，通过运行根模块来启动整个angular应用。模块类需要使用NgModule类装饰器进行装饰，这个装饰器主要有下面这几个常用的元数据：" class="headerlink" title="4.模块：模块里面可以包含若干组件，指令，服务，甚至能够拥有独立的路由配置。每个angular应用都至少有一个模块，一般需要有一个模块作为整个应用的路口，这个入口模块称为根模块，通过运行根模块来启动整个angular应用。模块类需要使用NgModule类装饰器进行装饰，这个装饰器主要有下面这几个常用的元数据："></a>4.模块：模块里面可以包含若干组件，指令，服务，甚至能够拥有独立的路由配置。每个angular应用都至少有一个模块，一般需要有一个模块作为整个应用的路口，这个入口模块称为根模块，通过运行根模块来启动整个angular应用。模块类需要使用NgModule类装饰器进行装饰，这个装饰器主要有下面这几个常用的元数据：</h3><ul><li>1.declarations:这个元数据用于指定属于这个模块的视图类，即指定哪些组件组成了这个模块。Angular有组件，指令和管道三种视图类，需要注意的是，视图类只能属于一个模块，因此如果视图类已经在其它模块中declarations的话，那么就不能再到其他模块里面导入了。在A模块所引入的视图类A能够在所有A模块引入的其它视图类中进行使用。</li><li>2.</li></ul><h3 id="5-通过styles和styleUrls指定组件的样式，Angular会在模板dom中添加自定义的节点属性，以此来形成属于这些样式在组件中独有的作用域。避免了css样式命名的污染问题。"><a href="#5-通过styles和styleUrls指定组件的样式，Angular会在模板dom中添加自定义的节点属性，以此来形成属于这些样式在组件中独有的作用域。避免了css样式命名的污染问题。" class="headerlink" title="5.通过styles和styleUrls指定组件的样式，Angular会在模板dom中添加自定义的节点属性，以此来形成属于这些样式在组件中独有的作用域。避免了css样式命名的污染问题。"></a>5.通过styles和styleUrls指定组件的样式，Angular会在模板dom中添加自定义的节点属性，以此来形成属于这些样式在组件中独有的作用域。避免了css样式命名的污染问题。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用开始，比如下面ngIf结构指令&quot;&gt;&lt;a href=&quot;#1-指令分为结构指令和属性指令，结构指令能够添加，修改或者删除DOM，结构指令必须用开始，比如下面ngIf结构指令&quot; clas
      
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>小程序备忘</title>
    <link href="http://yoursite.com/2018/10/25/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2018/10/25/小程序思考/</id>
    <published>2018-10-25T09:37:38.000Z</published>
    <updated>2018-11-23T07:25:07.638Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-App的生命周期方法之onLaunch以及onShow，当小程序启动时，首先触发onLaunch在触发onShow，当小程序从后台再次被用户使用时，不会触发onLaunch，会触发onShow。"><a href="#1-App的生命周期方法之onLaunch以及onShow，当小程序启动时，首先触发onLaunch在触发onShow，当小程序从后台再次被用户使用时，不会触发onLaunch，会触发onShow。" class="headerlink" title="1.App的生命周期方法之onLaunch以及onShow，当小程序启动时，首先触发onLaunch在触发onShow，当小程序从后台再次被用户使用时，不会触发onLaunch，会触发onShow。"></a>1.App的生命周期方法之onLaunch以及onShow，当小程序启动时，首先触发onLaunch在触发onShow，当小程序从后台再次被用户使用时，不会触发onLaunch，会触发onShow。</h3><h3 id="2-image响应式尺寸，设置定宽然后加上一个mode-”widthFix”。"><a href="#2-image响应式尺寸，设置定宽然后加上一个mode-”widthFix”。" class="headerlink" title="2.image响应式尺寸，设置定宽然后加上一个mode=”widthFix”。"></a>2.image响应式尺寸，设置定宽然后加上一个mode=”widthFix”。</h3><h3 id="3-关于dataset的问题，如下"><a href="#3-关于dataset的问题，如下" class="headerlink" title="3.关于dataset的问题，如下"></a>3.关于dataset的问题，如下</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">data-userExamineId</span>=<span class="string">"&#123;&#123;shenlunExam.id&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>像上面的这种写法是错误的，data-后面最好接小写单词。</p><h3 id="4-像下面写是错误的，硬是会把数组的下一项也给赋上这个值："><a href="#4-像下面写是错误的，硬是会把数组的下一项也给赋上这个值：" class="headerlink" title="4.像下面写是错误的，硬是会把数组的下一项也给赋上这个值："></a>4.像下面写是错误的，硬是会把数组的下一项也给赋上这个值：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userAnswer[questionNumber-1].push(answer);  这样处理是错误的，会把数组的下一项也给赋上这个值</span></span><br><span class="line">userAnswer[questionNumber<span class="number">-1</span>] = userAnswer[questionNumber<span class="number">-1</span>].concat([answer]);</span><br></pre></td></tr></table></figure><h3 id="5-性能相关，wx-if是惰性的，如果初始条件为false的话，那么框架什么都不会做。hidden却始终会渲染，只是控制隐藏和显示。因此wx-if有更高的切换消耗，而hidden有更高的初始化渲染消耗。如果数据量很大的话，建议使用wx-if进行渲染。"><a href="#5-性能相关，wx-if是惰性的，如果初始条件为false的话，那么框架什么都不会做。hidden却始终会渲染，只是控制隐藏和显示。因此wx-if有更高的切换消耗，而hidden有更高的初始化渲染消耗。如果数据量很大的话，建议使用wx-if进行渲染。" class="headerlink" title="5.性能相关，wx:if是惰性的，如果初始条件为false的话，那么框架什么都不会做。hidden却始终会渲染，只是控制隐藏和显示。因此wx:if有更高的切换消耗，而hidden有更高的初始化渲染消耗。如果数据量很大的话，建议使用wx:if进行渲染。"></a>5.性能相关，wx:if是惰性的，如果初始条件为false的话，那么框架什么都不会做。hidden却始终会渲染，只是控制隐藏和显示。因此wx:if有更高的切换消耗，而hidden有更高的初始化渲染消耗。如果数据量很大的话，建议使用wx:if进行渲染。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-App的生命周期方法之onLaunch以及onShow，当小程序启动时，首先触发onLaunch在触发onShow，当小程序从后台再次被用户使用时，不会触发onLaunch，会触发onShow。&quot;&gt;&lt;a href=&quot;#1-App的生命周期方法之onLaunch
      
    
    </summary>
    
    
      <category term="wxProgram" scheme="http://yoursite.com/tags/wxProgram/"/>
    
  </entry>
  
  <entry>
    <title>typescript知识点</title>
    <link href="http://yoursite.com/2018/10/25/typescript%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>http://yoursite.com/2018/10/25/typescript知识点/</id>
    <published>2018-10-25T01:23:54.000Z</published>
    <updated>2018-10-25T09:09:53.985Z</updated>
    
    <content type="html"><![CDATA[<p>1.在typescript中，数字都是浮点型。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> octNum: <span class="built_in">number</span> = <span class="number">0o677</span>; <span class="comment">// 八进制</span></span><br></pre></td></tr></table></figure><p>2.typescript相比于JavaScript所新引入的类型是：元组(tuple),枚举(enum),任意值(any),void,never。</p><p>3.元组：元素数量确定，元素类型确定，元素类型顺序确定（可以有多种类型）。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'angular'</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> x2: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="number">2</span>, <span class="string">'angular'</span>]; <span class="comment">// wrong</span></span><br></pre></td></tr></table></figure><p>4.枚举：下标默认从0开始，可修改默认值，从头开始递增1.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123;Red = <span class="number">2</span>, Blue, Green = <span class="number">6</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue; <span class="comment">// =&gt; c === 3</span></span><br></pre></td></tr></table></figure><p>5.多类型检查</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n: <span class="built_in">number</span> = <span class="number">20</span>;</span><br><span class="line">n = <span class="literal">null</span>; <span class="comment">// 报错</span></span><br><span class="line">n = <span class="literal">undefined</span>; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n2: <span class="built_in">number</span> | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">n2 = <span class="number">20</span>;</span><br><span class="line">n2 = <span class="literal">null</span>;</span><br><span class="line">n2 = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>6.void以及any在不返回值的函数中的运用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function fun(foo: () =&gt; void) &#123;</span><br><span class="line">  <span class="keyword">let</span> temp = foo();</span><br><span class="line">  temp.doSth(); <span class="comment">// 报错，如果foo返回类型改成any的话则不会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.never类型是其他类型的子类型，也就是说never可以赋值给其他类型，而其他类型无法赋值给never类型。never类型表示为会抛出异常或者无法执行到终止点。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ne: never = <span class="function">(<span class="params">(<span class="params"></span>) =&gt; &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="params">'i need never'</span>) &#125;</span>)<span class="params">()</span>;</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">  <span class="params">throw</span> <span class="params">new</span> <span class="params">Error</span>(<span class="params">message</span>);</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="params">function</span> <span class="params">loop</span><span class="params">()</span>: <span class="params">never</span> &#123;</span></span><br><span class="line"><span class="function">  <span class="params">while</span>(<span class="params"><span class="literal">true</span></span>) &#123;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>8.let,const不存在变量提升；在同一个块级作用域中，let只能声明一个变量一次，多次声明报错。</p><p>9.变量交换： [a, b] = [b, a];</p><p>10.在JavaScript中，函数声明的参数可以和函数在调用时候所传参数出现参数个数不匹配的情况，但是在typescript里面是不允许出现这种情况的，如果想要希望出现可选参数的话，那么可以通过下面几种方法：1.声明是可选参数；2.给参数设置默认值</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result1 = fun1(<span class="number">1</span>); <span class="comment">// 报错，漏传参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 1.方式一：声明参数是可选的 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125; <span class="comment">// 注意这种写法是不对的，更加正确一点的写法应该是需要判断b是否存在</span></span><br><span class="line">fun2(<span class="number">1</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun3</span>(<span class="params">a: <span class="built_in">number</span>, b?: <span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fun3(<span class="number">1</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 方式二：给参数设置一个默认值 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun4</span>(<span class="params">a: <span class="built_in">number</span>, b:<span class="built_in">number</span>=2</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">fun4(<span class="number">1</span>); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>以上方法都可以达到声明的参数的长度和实际传参的长度可以不一致的目的，都有着对应的适用场景。</p><p>11.函数带有默认值参数，且这个带有默认值的参数不在末位的话，那么应该显示传入undefined</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun5</span>(<span class="params">a:<span class="built_in">number</span>=1, b:<span class="built_in">number</span></span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">fun5(<span class="literal">undefined</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>12.剩余参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">x: <span class="built_in">number</span>, ...restNumber: <span class="built_in">number</span>[]</span>): <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result: <span class="built_in">number</span> = x;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; restNumber.length; i++) &#123;</span><br><span class="line">    result += restNumber[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>13.类修饰符有三个，分别为public，private，protected，默认是public的，private表明该成员只能在所属类中被访问，protected和private类似，但是用它规定的成员不仅能够在所属类中被访问，而且还能够在其派生类中被访问。但是也只是限于在类中，也不能做外部被访问。</p><p>14.static静态属性表明该属性是类的，非static属性那就是实例属性了。</p><p>15.抽象类：abstract抽象类，抽象类不能用来实例化对象，它是被用来给其他类继承的。抽象类里面可以包含抽象方法，其中抽象方法必须被子类给实现，普通方法可以不被子类实现（也可以进行重载），下面是抽象类的一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">abstract</span> speak(): <span class="built_in">void</span> &#123;&#125;; <span class="comment">/* 这是一个抽象方法，必须被实现 */</span></span><br><span class="line">  walking(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'walk'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Male <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  speak(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'how are you'</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Mj <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  speak(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'long'</span>);&#125;;</span><br><span class="line">  walking(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'mj-moonwalk'</span>);&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person: Person; <span class="comment">/* 抽象类无法用来实例化对象 */</span></span><br><span class="line">person = <span class="keyword">new</span> Male();</span><br><span class="line">person.speak();</span><br><span class="line">person.walking();</span><br></pre></td></tr></table></figure><p>需要注意的地方：抽象类是必须具有抽象方法的，同时也可以具有普通属性。</p><p>16.interface，interface属于自定义类型，用法如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> FullName &#123;</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">name: FullName</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name.firstName, name.lastName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> param = &#123;age: <span class="number">20</span>, firstName: <span class="string">'he'</span>, lastName: <span class="string">'didi'</span>&#125;;</span><br><span class="line">printLabel(param);</span><br></pre></td></tr></table></figure><p>函数类型接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> I_f &#123;</span><br><span class="line">  (val: <span class="built_in">string</span>, salt: <span class="built_in">string</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> md5: I_f;</span><br><span class="line">md5 = <span class="function"><span class="keyword">function</span>(<span class="params">p1: <span class="built_in">string</span>, p2: <span class="built_in">string</span></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p1 + p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(md5(<span class="string">'hello, '</span>, <span class="string">'world'</span>));</span><br></pre></td></tr></table></figure><p>可索引类型接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> UserArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> UserObject &#123;</span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> userArray: UserArray = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">let</span> userObject: UserObject = &#123;name: <span class="string">'lisa'</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(userArray[<span class="number">0</span>], userObject[<span class="string">'name'</span>], userArray[<span class="string">'0'</span>]);</span><br></pre></td></tr></table></figure><p>当使用数字类型作为索引时，也可以使用字符串作为索引。如上所示。</p><p>类类型接口：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>; <span class="comment">/* 实现一个接口的话，那么就必须要实现接口所声明的属性 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口扩展：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  talk(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Programmer &#123;</span><br><span class="line">  coding(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'I CODE'</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> TSProgrammer <span class="keyword">extends</span> Programmer <span class="keyword">implements</span> Person &#123;</span><br><span class="line">  eat(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'eat'</span>);&#125;</span><br><span class="line">  talk(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'talk'</span>);&#125;</span><br><span class="line">  coding(): <span class="built_in">void</span> &#123;<span class="built_in">console</span>.log(<span class="string">'enjoy ts'</span>);&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tsp = <span class="keyword">new</span> TSProgrammer();</span><br><span class="line">tsp.eat();</span><br><span class="line">tsp.talk();</span><br><span class="line">tsp.coding();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.在typescript中，数字都是浮点型。&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typeORM学习</title>
    <link href="http://yoursite.com/2018/10/18/typeORM%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/10/18/typeORM学习/</id>
    <published>2018-10-18T03:49:07.000Z</published>
    <updated>2018-11-21T08:58:22.542Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-什么是Entity"><a href="#1-什么是Entity" class="headerlink" title="1.什么是Entity?"></a>1.什么是Entity?</h3><p>Entity是一个类，被抽象映射为数据库的table，假如使用Mogodb数据库的话，那么就对应为collection。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* user.entity.ts */</span></span><br><span class="line"><span class="keyword">import</span> &#123; Entity, PrimaryGeneratedColumn, Column &#125; <span class="keyword">from</span> <span class="string">"typeorm"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  firstName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  lastName: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>()</span><br><span class="line">  isActive: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 上面的代码相当于创建了一个名字叫user的table，包括有四个字段，其中id是自增字段 */</span></span><br></pre></td></tr></table></figure><p>通常的，每一个Entity都必须得包含有columns以及relations，并且必须包含有一个primary column(如果使用mongodb的话那么就必须包含有ObjectId column)。一般应用中都会包含多个Entity，每个Entity都必须在connection options里面被注册相关连接实际数据库的事宜。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createConnection, Connection &#125; <span class="keyword">from</span> <span class="string">"typeorm"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; User &#125; <span class="keyword">from</span> <span class="string">"./entity/user.entity"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> connection: Connection = <span class="keyword">await</span> createConnection(&#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="string">"mysql"</span>,</span><br><span class="line">  host: <span class="string">"localhost"</span>,</span><br><span class="line">  port: <span class="number">3306</span>,</span><br><span class="line">  username: <span class="string">"USER_NAME"</span>,</span><br><span class="line">  password: <span class="string">"PASSWORD"</span>,</span><br><span class="line">  database: <span class="string">"DATABASE_NAME"</span>,</span><br><span class="line">  entities: [User], <span class="comment">// 一个table的配置</span></span><br><span class="line">  <span class="comment">// entities: ["entity/*.ts"], 或者这样写，配置整个目录下面的entity文件</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>前面也提到了Entity是一个装饰类，Entity能够接受可选的参数作为对table的配置，比如table的name，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;&#125;</span><br></pre></td></tr></table></figure><p>上面就是创建一个叫做名字叫做users的table，更具体的，一些常见的配置如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(&#123;</span><br><span class="line">  name: <span class="string">"users"</span>,</span><br><span class="line">  database: <span class="string">"DATA_BASE_NAME"</span>,</span><br><span class="line">  orderBy: &#123;</span><br><span class="line">    name: <span class="string">"ASC"</span>,</span><br><span class="line">    id: <span class="string">"DESC"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User&#123;&#125;</span><br></pre></td></tr></table></figure><p>既然table由columns组成，那么Entity也是由columns构成。@column装饰类将会把字段数据给映射成database table column。而column分为了很多种：primary columns；special columns；spatial columns。其中，任何一个entity都必须包含至少一个primary column，并且primary column又分为了下面几个部分：</p><ul><li>PrimaryColumn：创建一个任意类型任意值的primary column，当然你也可以指出column的类型.</li><li>PrimaryGeneratedColumn：自动创建一个自增的int类型的primary column。在保存之前我们无需对他手动赋值，他会被自动生成。</li><li>PrimaryGeneratedColumn(“uuid”)：自动创建一个独一无二的string类型的primary column，保存之前无需手动赋值，会被自动生成。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="meta">@PrimaryColumn</span>()</span><br><span class="line">  id: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>()</span><br><span class="line">  addId: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PrimaryGeneratedColumn</span>(<span class="string">"uuid"</span>)</span><br><span class="line">  userUuid: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-typeORM之-nestjs-typeorm基本介绍"><a href="#2-typeORM之-nestjs-typeorm基本介绍" class="headerlink" title="2.typeORM之@nestjs/typeorm基本介绍"></a>2.typeORM之@nestjs/typeorm基本介绍</h3><p>要想在nestjs项目中使用typeORM的话，第一步至少需要安装@nestjs/typeorm typeorm以及database的npm包（比如mysql package），第二步就是在整个应用的根模块中import我们这个TypeOrmModule，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// app.module.js</span><br><span class="line">import &#123; Module &#125; from &apos;@nestjs/common&apos;;</span><br><span class="line">import &#123; TypeOrmModule &#125; from &apos;@nestjs/typeorm&apos;;</span><br><span class="line"></span><br><span class="line">@Module(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    TypeOrmModule.forRoot([</span><br><span class="line">        type: &apos;mysql&apos;,</span><br><span class="line">        host: &apos;localhost&apos;,</span><br><span class="line">        port: 3306,</span><br><span class="line">        username: &apos;root&apos;,</span><br><span class="line">        password: &apos;password&apos;,</span><br><span class="line">        database: &apos;test&apos;,</span><br><span class="line">        entities: [__dirname + &apos;/**/*.entity&#123;.ts,.js&#125;&apos;],</span><br><span class="line">        synchronize: true</span><br><span class="line">    ])</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line">export class ApplicationModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>forRoot方法是用来干嘛用的？它就好比typeORM的createConnection()方法一样，并且他们之间所接受的参数格式也是一模一样的，如果参数为空的话，那么配置参数将会从根目录中的ormconfig.json里面读取。forRoot对象里面各个参数的意义如下所示：</p><ul><li>1.type:数据库类型，可选值有，”mysql”, “postgres”, “mariadb”, “sqlite”, “cordova”, “nativescript”, “oracle”, “mssql”, “mongodb”, “sqljs”, “react-native”，必选字段；</li><li>2.name:连接名，默认名是”default”，每个连接的名字必须唯一。连接名在哪里会用上？比如getConnection(name: string)以及ConnectionManager.get(name: string)中；</li><li>3.synchronize: 开发过程可用来debug，生产过程严禁使用，否则容易造成数据库数据丢失；</li><li>4.entities: 被加载进来以及进行使用的数据库建模文件；可使用正则匹配。</li><li>5.其他配置参数可参考typeORM官方文档。</li></ul><p>之前还提到了ormconfig.json配置，形如下面：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"mysql"</span>,</span><br><span class="line">  <span class="attr">"host"</span>: <span class="string">"localhost"</span>,</span><br><span class="line">  <span class="attr">"port"</span>: <span class="number">3306</span>,</span><br><span class="line">  <span class="attr">"username"</span>: <span class="string">"root"</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"root"</span>,</span><br><span class="line">  <span class="attr">"database"</span>: <span class="string">"test"</span>,</span><br><span class="line">  <span class="attr">"entities"</span>: [<span class="string">"src/**/**.entity&#123;.ts,.js&#125;"</span>],</span><br><span class="line">  <span class="attr">"synchronize"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用了ormconfig.json配置后，那么forRoot方法便可以接受一个空对象作为参数了。如下面所示：</p><p>··</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-什么是Entity&quot;&gt;&lt;a href=&quot;#1-什么是Entity&quot; class=&quot;headerlink&quot; title=&quot;1.什么是Entity?&quot;&gt;&lt;/a&gt;1.什么是Entity?&lt;/h3&gt;&lt;p&gt;Entity是一个类，被抽象映射为数据库的table，假如使用M
      
    
    </summary>
    
    
      <category term="typeORM" scheme="http://yoursite.com/tags/typeORM/"/>
    
  </entry>
  
  <entry>
    <title>rust语法备忘</title>
    <link href="http://yoursite.com/2018/10/18/rust%E8%AF%AD%E6%B3%95%E5%A4%87%E5%BF%98/"/>
    <id>http://yoursite.com/2018/10/18/rust语法备忘/</id>
    <published>2018-10-18T03:08:15.000Z</published>
    <updated>2018-10-19T01:40:39.053Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-表达式"><a href="#1-表达式" class="headerlink" title="1.表达式"></a>1.表达式</h3><p>1.1 赋值表达式返回的类型为unit，即一个空的tuple()。这样设计就可以防止连续赋值，在Rust中是不允许连续赋值的。把赋值表达式的返回值类型规定成了一个unit的话，那么就可以防止连续赋值了，因为会报类型错误。</p><p>1.2 语句返回的类型是()。</p><p>1.3 Rust程序是由表达式组成的，而表达式肯定有一个返回值，顺序执行。所以下面这样写是OK的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y: <span class="built_in">i32</span> = &#123;<span class="built_in">println!</span>(<span class="string">"hello"</span>); <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">fun</span></span>() -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">  <span class="comment">// some code</span></span><br><span class="line">  <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.4 Rust规定if和else以及else if后续的语句块一定要用大括号包起来。相反，条件表达式并不需要用小括号包起来。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i32</span> = <span class="keyword">if</span> condition &#123;<span class="number">1</span>&#125; <span class="keyword">else</span> &#123;<span class="number">10</span>&#125;; <span class="comment">// 注意并没有加分号</span></span><br></pre></td></tr></table></figure><p>如果把if-else作为表达式使用的话，那么需要注意if分支以及else分支所返回的类型必须是相同的，并且在Rust编译器眼中，如果忽略了else语句的话，那么默认就是返回()，因此像下面这样写一定是错误的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i32</span> = <span class="keyword">if</span> condition &#123;<span class="number">1</span>&#125;; <span class="comment">// wrong , if分支和else分支所返回的类型不匹配</span></span><br></pre></td></tr></table></figure><p>1.5 loop语句块是一定会被执行的，而while语句块需要根据表达式在运行阶段的值来决定，但是Rust又是一门在编译期做了很多静态分析的语言，于是造成了以下结果：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i32</span>;</span><br><span class="line">a = <span class="keyword">loop</span> &#123; a = <span class="number">1</span>; <span class="keyword">break</span>; &#125;;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, a);</span><br></pre></td></tr></table></figure><p>上面这种写法是可行的，因为编译器能够通过流程分析出a=1;一定在println a之前执行过，所以不会报错。在Rust中，没有自动赋值这一说，声明而已。但是下面这样写就会报错了：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">i32</span>;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> &#123; a = <span class="number">1</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, a);  <span class="comment">// 编译报错： use of possibly uninitialized variable</span></span><br></pre></td></tr></table></figure><p>1.6 在Rust中，<strong>每一个函数都具有自己单独的类型</strong>，但是这个类型可以自动转换到fn类型。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add1</span></span>(t: (<span class="built_in">i32</span>, <span class="built_in">i32</span>)) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">  t.<span class="number">0</span> + t.<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add2</span></span>((x, y): (<span class="built_in">i32</span>, <span class="built_in">i32</span>)) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">  x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> func = add1;</span><br><span class="line">  func = add2; <span class="comment">// 会出现编译错误，因为每一个函数都具有自己单独的类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然add1函数和add2函数具有一样的参数数量以及参数类型和返回值类型也是一样的，但是因为每一个函数都具有自己单独的类型，所以报错。修复方案是让func的类型是通用的fn类型即可，因为每个函数的类型可以自动转换到fn类型。像下面这样写修复都是OK的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> func = add1 <span class="keyword">as</span> <span class="function"><span class="keyword">fn</span></span>((<span class="built_in">i32</span>, <span class="built_in">i32</span>)) -&gt; <span class="built_in">i32</span>; <span class="comment">// 或者像下面这样写也是OK的</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> func: <span class="function"><span class="keyword">fn</span></span>((<span class="built_in">i32</span>, <span class="built_in">i32</span>)) -&gt; <span class="built_in">i32</span> = add1; <span class="comment">// 这样写也是OK的</span></span><br></pre></td></tr></table></figure><p>上面这种方案也只是适用于函数的参数类型以及参数数量是一样的场合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-表达式&quot;&gt;&lt;a href=&quot;#1-表达式&quot; class=&quot;headerlink&quot; title=&quot;1.表达式&quot;&gt;&lt;/a&gt;1.表达式&lt;/h3&gt;&lt;p&gt;1.1 赋值表达式返回的类型为unit，即一个空的tuple()。这样设计就可以防止连续赋值，在Rust中是不允许连
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://yoursite.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>DOM操作</title>
    <link href="http://yoursite.com/2018/10/17/DOM%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/10/17/DOM操作/</id>
    <published>2018-10-17T15:03:06.000Z</published>
    <updated>2018-10-18T02:45:48.392Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-利用js获取select所选择的选项"><a href="#1-利用js获取select所选择的选项" class="headerlink" title="1.利用js获取select所选择的选项"></a>1.利用js获取select所选择的选项</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"year-select"</span> <span class="attr">class</span>=<span class="string">"weui-select"</span> <span class="attr">name</span>=<span class="string">"yearSelect"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2018"</span>&gt;</span>2018年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2019"</span>&gt;</span>2019年<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>html结构如上所示，使用原生js获取select所选择的内容的方法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> yearSelect = <span class="built_in">document</span>.getElementById(<span class="string">"year-select"</span>);</span><br><span class="line"><span class="keyword">let</span> index = yearSelect.selectedIndex;</span><br><span class="line"><span class="keyword">let</span> choseYear = yearSelect.options[index].value; <span class="comment">// select所选择的值</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-利用js获取select所选择的选项&quot;&gt;&lt;a href=&quot;#1-利用js获取select所选择的选项&quot; class=&quot;headerlink&quot; title=&quot;1.利用js获取select所选择的选项&quot;&gt;&lt;/a&gt;1.利用js获取select所选择的选项&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>puppeteer-API备忘</title>
    <link href="http://yoursite.com/2018/10/15/puppeteer-API%E5%A4%87%E5%BF%98/"/>
    <id>http://yoursite.com/2018/10/15/puppeteer-API备忘/</id>
    <published>2018-10-15T07:54:47.000Z</published>
    <updated>2018-10-16T07:01:30.378Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h3><p>1.获取某个元素的文本采用下面的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="keyword">await</span>.page.$<span class="built_in">eval</span>(<span class="string">'query'</span>, ele =&gt; ele.textContent); <span class="comment">/* 其中text就是该dom元素所对应的文本 */</span></span><br></pre></td></tr></table></figure><p>2.测试页面中是否存在某个元素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.waitForSelector(<span class="string">'query'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;<span class="built_in">console</span>.error(<span class="string">'要检查的元素不存在'</span>)&#125;);</span><br></pre></td></tr></table></figure><p>3.获取某个响应的数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url().endsWith(<span class="string">'the url you want compare'</span>)) &#123;</span><br><span class="line">    request.response().json().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* do something with the res */</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>4.获取当前页面的url：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.click(<span class="string">'query'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something when success click</span></span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="comment">// err log or something</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (!page.url().match(<span class="regexp">/\/someUrl/</span>)) &#123; <span class="comment">// 匹配不上的话，说明点击这个按钮没有跳转到相关的页面</span></span><br><span class="line">  <span class="comment">// error log or something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.模拟输入enter：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.keyboard.press(<span class="string">'Enter'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-小技巧"><a href="#2-小技巧" class="headerlink" title="2.小技巧"></a>2.小技巧</h3><p>1.遇到一些问题，加入有一个交互是这样的，点击button.dropdown-toggle，UI表现上展开ul.dropdown-menu列表数据。在这种场景下我们希望列表数据中的第二项，那应该这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟点击button.dropdown-toggle</span></span><br><span class="line"><span class="keyword">await</span> page.click(<span class="string">'button.dropdown-toggle'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'课堂练习-&gt;班级练习页面-&gt;点击请选择班级按钮时发生错误'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;); <span class="comment">// 不知道为什么一定得先点击这个按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟点击列表中的第二个数据</span></span><br><span class="line"><span class="keyword">await</span> page.click(<span class="string">'ul.dropdown-menu li:nth-of-type(2) a'</span>).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url().endsWith(<span class="string">'gk/ops/class/exercise/page'</span>)) &#123;</span><br><span class="line">      request.response().json().then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> testUI(res, <span class="string">'二'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'课堂练习-&gt;班级练习页面-&gt;点击第二个班级按钮的时候发生错误'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.某些用户产生的交互行为会触发网络请求，那么怎么捕获监听呢？思路：模拟产生交互的行为，在其返回的promise的resolve cb里面使用page去监听requestfinished事件，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.click(<span class="string">'ul.dropdown-menu li:nth-of-type(2) a'</span>).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url().endsWith(<span class="string">'you want compare'</span>)) &#123;</span><br><span class="line">      request.response().json().then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> testUI(res, <span class="string">'二'</span>); <span class="comment">// 测试UI与响应是否对应</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'some error message'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.近期做项目遇到一个问题，那就是localStorage丢失的问题，思前想后才发现上一个页面的域名是HTTPS（在上个页面写的localStorage)，而下个页面成了http，这就解释了为什么localStorage为什么会丢失的问题了。毕竟localStorage特定于页面的协议。有可能是第二个页面引入了某个非https的协议，所以降成了http。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-API&quot;&gt;&lt;a href=&quot;#1-API&quot; class=&quot;headerlink&quot; title=&quot;1.API&quot;&gt;&lt;/a&gt;1.API&lt;/h3&gt;&lt;p&gt;1.获取某个元素的文本采用下面的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascrip
      
    
    </summary>
    
    
      <category term="puppeteer" scheme="http://yoursite.com/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>css实现轮播</title>
    <link href="http://yoursite.com/2018/10/15/css%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/"/>
    <id>http://yoursite.com/2018/10/15/css实现轮播/</id>
    <published>2018-10-15T06:51:11.000Z</published>
    <updated>2018-10-15T07:03:53.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-知识要点"><a href="#1-知识要点" class="headerlink" title="1.知识要点"></a>1.知识要点</h3><p>1.label的作用？label标签是用来转义焦点的，当用户点击label的时候，浏览器会自动将焦点转到label所对应的那个元素上面。常见的用法就是input和label搭配使用，其用法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nameInput"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"nameInput"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-知识要点&quot;&gt;&lt;a href=&quot;#1-知识要点&quot; class=&quot;headerlink&quot; title=&quot;1.知识要点&quot;&gt;&lt;/a&gt;1.知识要点&lt;/h3&gt;&lt;p&gt;1.label的作用？label标签是用来转义焦点的，当用户点击label的时候，浏览器会自动将焦点转到la
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>文本超出范围显示省略号</title>
    <link href="http://yoursite.com/2018/10/13/%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/10/13/文本换行/</id>
    <published>2018-10-13T06:46:51.000Z</published>
    <updated>2018-11-09T05:23:19.065Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需求场景一：单行文本"><a href="#1-需求场景一：单行文本" class="headerlink" title="1.需求场景一：单行文本"></a>1.需求场景一：单行文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.needEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-需求场景二：多行文本"><a href="#2-需求场景二：多行文本" class="headerlink" title="2.需求场景二：多行文本"></a>2.需求场景二：多行文本</h3><p>上面这种情况无法用于多行文本中的换行，因为我们使用white-space：nowrap用于规定段落中的文本不进行换行；并且text-overflow必须和overflow以及white-space进行搭配才可实现单行文本换行；对于多行文本超出显示省略号来说，稍微麻烦一点，可以使用js，css也行。css的解决方案如下所示（注：只适用于webkit内核浏览器，微信小程序可使用该方式）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.multiEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: MAX_DISPLAY_LINE_Number;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是overflow:hidden不是必须的，但是考虑到有大于MAX_DISPLAY_LINE_Number行文本的话，还是最好加上。如果不设置的话，那么如果某段text对应5行文本的话，设置的-webkit-line-clamp的值是3的话，那么第3行文本的末尾就是省略号，而第四行文本会照常显示出来。</p><p>诚如上面所说，这种情况只是适用于webkit内核的浏览器，那么使用css处理的话有没有其他的什么兼容处理方式呢？答案是有的，比如说下面这种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.multiEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4.5em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.multiEllipsis</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'...'</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; <span class="comment">/*可不加，用于加粗*/</span></span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>; <span class="comment">/*可不加，不过为了呈现出最好的效果的话还是加一下，width的大小为整数个字体的宽度，以避免出现半个字体的情况*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>; <span class="comment">/*设置背景，用来遮盖字体，背景颜色视情况而定*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种处理方式还是挺完美的，足以处理大部分场合下的多行文本溢出显示省略号了。</p><h3 id="3-多行文本处理方式之使用js"><a href="#3-多行文本处理方式之使用js" class="headerlink" title="3.多行文本处理方式之使用js"></a>3.多行文本处理方式之使用js</h3><p>使用js的思路，利用js获取到限制文本的box的宽度，获取文本的fontSize，获取文本，遍历文本，利用fontSize获取每个字体的宽度，将宽度进行累加，一旦超过box的宽度*所需要显示行数，则停止遍历，此时筛选出来的子串就是所能够显示的最多文本，接着利用innerText给挂载到DOM元素上。对于使用这种方式来说，知识点在于：获取css（有可能是内联样式，也有可能不是）;计算每个字体的宽度；下面先介绍一下如何获取css属性值：利用js获取某个元素element的css值有下面几种方法，1.element.style；2.IE:element.currentStyle[‘attr’]；3.window.getComputedStyle(element, null).getPropertyValue[attr]。区别：第一种方法只能够获取内联样式；第二种以及第三种获取到的是最终应用在box上面的样式。因此，一般使用window.getComputedStyle来查询css，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCssProperty = <span class="function">(<span class="params">element, attr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (element.currentStyle) &#123; <span class="comment">// 兼容IE</span></span><br><span class="line">    <span class="keyword">return</span> element.currentStyle[attr];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>).getPropertyValue(attr); <span class="comment">// null表示并不是获取伪元素之类的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算字体的宽度可以用下面的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computeFontWidth = <span class="function">(<span class="params">font, fontSize</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result, width;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[a-zA-Z]/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.7</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.55</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.27</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/-/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.325</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[\u4e00-\u9fa5]/</span>.test(font)) &#123;  <span class="comment">//中文匹配</span></span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\(|\)/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.373</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\s/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.25</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/%/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.8</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = width * fontSize;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将text挂载到dom上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showStr = <span class="function">(<span class="params">query, maxRow</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="built_in">document</span>.getElementsByClassName(query)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> str = p.innerText; <span class="comment">// 获取文本</span></span><br><span class="line">  <span class="keyword">let</span> showStr; <span class="comment">// 需要显示的文本</span></span><br><span class="line">  <span class="keyword">let</span> fontW = <span class="number">0</span>, endIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> width = getCssProperty(p, <span class="string">'width'</span>), fontSize = getCssProperty(p, <span class="string">'font-size'</span>); <span class="comment">// 单位都是'px'</span></span><br><span class="line">  width = width.substring(<span class="number">0</span>, width.length - <span class="number">2</span>), fontSize = fontSize.substring(<span class="number">0</span>, fontSize.length - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> str) &#123;</span><br><span class="line">    fontW += computeFontWidth(str[i], fontSize);</span><br><span class="line">    <span class="keyword">if</span> (fontW &gt;= maxRow * width) &#123;</span><br><span class="line">      endIndex = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showStr = str.substring(<span class="number">0</span>, endIndex - <span class="number">2</span>) + <span class="string">'...'</span>; <span class="comment">/*不一定是减2*/</span></span><br><span class="line">  p.innerText = showStr;</span><br><span class="line">&#125;</span><br><span class="line">showStr(<span class="string">'container'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="4-微信小程序之button样式设置"><a href="#4-微信小程序之button样式设置" class="headerlink" title="4.微信小程序之button样式设置"></a>4.微信小程序之button样式设置</h3><p>有些情况下，我们既想要语义化而使用button按钮，但是同时又希望样式符合普通的view，这个时候就需要稍微做一下处理，button默认样式具有padding-left以及padding-right，以及border，关键还是border，设置border:none；还不行，如果想要完全去除边框的话，那么应该怎样做：button::after {border:none;}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-需求场景一：单行文本&quot;&gt;&lt;a href=&quot;#1-需求场景一：单行文本&quot; class=&quot;headerlink&quot; title=&quot;1.需求场景一：单行文本&quot;&gt;&lt;/a&gt;1.需求场景一：单行文本&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
</feed>
