<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜游</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-15T10:05:18.949Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hahahai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>puppeteer-API备忘</title>
    <link href="http://yoursite.com/2018/10/15/puppeteer-API%E5%A4%87%E5%BF%98/"/>
    <id>http://yoursite.com/2018/10/15/puppeteer-API备忘/</id>
    <published>2018-10-15T07:54:47.000Z</published>
    <updated>2018-10-15T10:05:18.949Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h3><p>1.获取某个元素的文本采用下面的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="keyword">await</span>.page.$<span class="built_in">eval</span>(<span class="string">'query'</span>, ele =&gt; ele.textContent); <span class="comment">/* 其中text就是该dom元素所对应的文本 */</span></span><br></pre></td></tr></table></figure><p>2.测试页面中是否存在某个元素:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.waitForSelector(<span class="string">'query'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;<span class="built_in">console</span>.error(<span class="string">'要检查的元素不存在'</span>)&#125;);</span><br></pre></td></tr></table></figure><p>3.获取某个响应的数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (request.url().endsWith(<span class="string">'the url you want compare'</span>)) &#123;</span><br><span class="line">    request.response().json().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/* do something with the res */</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-小技巧"><a href="#2-小技巧" class="headerlink" title="2.小技巧"></a>2.小技巧</h3><p>1.遇到一些问题，加入有一个交互是这样的，点击button.dropdown-toggle，UI表现上展开ul.dropdown-menu列表数据。在这种场景下我们希望列表数据中的第二项，那应该这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟点击button.dropdown-toggle</span></span><br><span class="line"><span class="keyword">await</span> page.click(<span class="string">'button.dropdown-toggle'</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'课堂练习-&gt;班级练习页面-&gt;点击请选择班级按钮时发生错误'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;); <span class="comment">// 不知道为什么一定得先点击这个按钮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟点击列表中的第二个数据</span></span><br><span class="line"><span class="keyword">await</span> page.click(<span class="string">'ul.dropdown-menu li:nth-of-type(2) a'</span>).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url().endsWith(<span class="string">'gk/ops/class/exercise/page'</span>)) &#123;</span><br><span class="line">      request.response().json().then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> testUI(res, <span class="string">'二'</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'课堂练习-&gt;班级练习页面-&gt;点击第二个班级按钮的时候发生错误'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.某些用户产生的交互行为会触发网络请求，那么怎么捕获监听呢？思路：模拟产生交互的行为，在其返回的promise的resolve cb里面使用page去监听requestfinished事件，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> page.click(<span class="string">'ul.dropdown-menu li:nth-of-type(2) a'</span>).then(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  page.on(<span class="string">'requestfinished'</span>, request =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (request.url().endsWith(<span class="string">'you want compare'</span>)) &#123;</span><br><span class="line">      request.response().json().then(<span class="keyword">async</span> res =&gt; &#123;</span><br><span class="line">        <span class="keyword">await</span> testUI(res, <span class="string">'二'</span>); <span class="comment">// 测试UI与响应是否对应</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, () =&gt; &#123;</span><br><span class="line">  Utils.log(<span class="string">'some error message'</span>, <span class="string">'error'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3.近期做项目遇到一个问题，那就是localStorage丢失的问题，思前想后才发现上一个页面的域名是HTTPS（在上个页面写的localStorage)，而下个页面成了http，这就解释了为什么localStorage为什么会丢失的问题了。毕竟localStorage特定于页面的协议。有可能是第二个页面引入了某个非https的协议，所以降成了http。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-API&quot;&gt;&lt;a href=&quot;#1-API&quot; class=&quot;headerlink&quot; title=&quot;1.API&quot;&gt;&lt;/a&gt;1.API&lt;/h3&gt;&lt;p&gt;1.获取某个元素的文本采用下面的方式：&lt;/p&gt;
&lt;figure class=&quot;highlight javascrip
      
    
    </summary>
    
    
      <category term="puppeteer" scheme="http://yoursite.com/tags/puppeteer/"/>
    
  </entry>
  
  <entry>
    <title>css实现轮播</title>
    <link href="http://yoursite.com/2018/10/15/css%E5%AE%9E%E7%8E%B0%E8%BD%AE%E6%92%AD/"/>
    <id>http://yoursite.com/2018/10/15/css实现轮播/</id>
    <published>2018-10-15T06:51:11.000Z</published>
    <updated>2018-10-15T07:03:53.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-知识要点"><a href="#1-知识要点" class="headerlink" title="1.知识要点"></a>1.知识要点</h3><p>1.label的作用？label标签是用来转义焦点的，当用户点击label的时候，浏览器会自动将焦点转到label所对应的那个元素上面。常见的用法就是input和label搭配使用，其用法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"nameInput"</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"nameInput"</span> <span class="attr">name</span>=<span class="string">"name"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>邮箱：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> /&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-知识要点&quot;&gt;&lt;a href=&quot;#1-知识要点&quot; class=&quot;headerlink&quot; title=&quot;1.知识要点&quot;&gt;&lt;/a&gt;1.知识要点&lt;/h3&gt;&lt;p&gt;1.label的作用？label标签是用来转义焦点的，当用户点击label的时候，浏览器会自动将焦点转到la
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>文本超出范围显示省略号</title>
    <link href="http://yoursite.com/2018/10/13/%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C/"/>
    <id>http://yoursite.com/2018/10/13/文本换行/</id>
    <published>2018-10-13T06:46:51.000Z</published>
    <updated>2018-10-14T06:35:27.624Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-需求场景一：单行文本"><a href="#1-需求场景一：单行文本" class="headerlink" title="1.需求场景一：单行文本"></a>1.需求场景一：单行文本</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.needEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-需求场景二：多行文本"><a href="#2-需求场景二：多行文本" class="headerlink" title="2.需求场景二：多行文本"></a>2.需求场景二：多行文本</h3><p>上面这种情况无法用于多行文本中的换行，因为我们使用white-space：nowrap用于规定段落中的文本不进行换行；并且text-overflow必须和overflow以及white-space进行搭配才可实现单行文本换行；对于多行文本超出显示省略号来说，稍微麻烦一点，可以使用js，css也行。css的解决方案如下所示（注：只适用于webkit内核浏览器，微信小程序可使用该方式）：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.multiEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: MAX_DISPLAY_LINE_Number;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="comment">/* overflow: hidden; */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是overflow:hidden不是必须的，但是考虑到有大于MAX_DISPLAY_LINE_Number行文本的话，还是最好加上。如果不设置的话，那么如果某段text对应5行文本的话，设置的-webkit-line-clamp的值是3的话，那么第3行文本的末尾就是省略号，而第四行文本会照常显示出来。</p><p>诚如上面所说，这种情况只是适用于webkit内核的浏览器，那么使用css处理的话有没有其他的什么兼容处理方式呢？答案是有的，比如说下面这种：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.multiEllipsis</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4.5em</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.multiEllipsis</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">'...'</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold; <span class="comment">/*可不加，用于加粗*/</span></span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>; <span class="comment">/*可不加，不过为了呈现出最好的效果的话还是加一下，width的大小为整数个字体的宽度，以避免出现半个字体的情况*/</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>; <span class="comment">/*设置背景，用来遮盖字体，背景颜色视情况而定*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这种处理方式还是挺完美的，足以处理大部分场合下的多行文本溢出显示省略号了。</p><h3 id="3-多行文本处理方式之使用js"><a href="#3-多行文本处理方式之使用js" class="headerlink" title="3.多行文本处理方式之使用js"></a>3.多行文本处理方式之使用js</h3><p>使用js的思路，利用js获取到限制文本的box的宽度，获取文本的fontSize，获取文本，遍历文本，利用fontSize获取每个字体的宽度，将宽度进行累加，一旦超过box的宽度*所需要显示行数，则停止遍历，此时筛选出来的子串就是所能够显示的最多文本，接着利用innerText给挂载到DOM元素上。对于使用这种方式来说，知识点在于：获取css（有可能是内联样式，也有可能不是）;计算每个字体的宽度；下面先介绍一下如何获取css属性值：利用js获取某个元素element的css值有下面几种方法，1.element.style；2.IE:element.currentStyle[‘attr’]；3.window.getComputedStyle(element, null).getPropertyValue[attr]。区别：第一种方法只能够获取内联样式；第二种以及第三种获取到的是最终应用在box上面的样式。因此，一般使用window.getComputedStyle来查询css，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCssProperty = <span class="function">(<span class="params">element, attr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (element.currentStyle) &#123; <span class="comment">// 兼容IE</span></span><br><span class="line">    <span class="keyword">return</span> element.currentStyle[attr];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(element, <span class="literal">null</span>).getPropertyValue(attr); <span class="comment">// null表示并不是获取伪元素之类的</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>计算字体的宽度可以用下面的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computeFontWidth = <span class="function">(<span class="params">font, fontSize</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result, width;</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/[a-zA-Z]/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.7</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.55</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\./</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.27</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/-/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.325</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/[\u4e00-\u9fa5]/</span>.test(font)) &#123;  <span class="comment">//中文匹配</span></span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\(|\)/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.373</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/\s/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.25</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/%/</span>.test(font)) &#123;</span><br><span class="line">    width = <span class="number">0.8</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    width = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  result = width * fontSize;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将text挂载到dom上：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本测试文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> showStr = <span class="function">(<span class="params">query, maxRow</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="built_in">document</span>.getElementsByClassName(query)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> str = p.innerText; <span class="comment">// 获取文本</span></span><br><span class="line">  <span class="keyword">let</span> showStr; <span class="comment">// 需要显示的文本</span></span><br><span class="line">  <span class="keyword">let</span> fontW = <span class="number">0</span>, endIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> width = getCssProperty(p, <span class="string">'width'</span>), fontSize = getCssProperty(p, <span class="string">'font-size'</span>); <span class="comment">// 单位都是'px'</span></span><br><span class="line">  width = width.substring(<span class="number">0</span>, width.length - <span class="number">2</span>), fontSize = fontSize.substring(<span class="number">0</span>, fontSize.length - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> str) &#123;</span><br><span class="line">    fontW += computeFontWidth(str[i], fontSize);</span><br><span class="line">    <span class="keyword">if</span> (fontW &gt;= maxRow * width) &#123;</span><br><span class="line">      endIndex = i;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  showStr = str.substring(<span class="number">0</span>, endIndex - <span class="number">2</span>) + <span class="string">'...'</span>; <span class="comment">/*不一定是减2*/</span></span><br><span class="line">  p.innerText = showStr;</span><br><span class="line">&#125;</span><br><span class="line">showStr(<span class="string">'container'</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="4-微信小程序之button样式设置"><a href="#4-微信小程序之button样式设置" class="headerlink" title="4.微信小程序之button样式设置"></a>4.微信小程序之button样式设置</h3><p>有些情况下，我们既想要语义化而使用button按钮，但是同时又希望样式符合普通的view，这个时候就需要稍微做一下处理，button默认样式具有padding-left以及padding-right，以及border，关键还是border，设置border:none；还不行，如果想要完全去除边框的话，那么应该怎样做：button::after {border:none;}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-需求场景一：单行文本&quot;&gt;&lt;a href=&quot;#1-需求场景一：单行文本&quot; class=&quot;headerlink&quot; title=&quot;1.需求场景一：单行文本&quot;&gt;&lt;/a&gt;1.需求场景一：单行文本&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;ta
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/10/13/hello-world/"/>
    <id>http://yoursite.com/2018/10/13/hello-world/</id>
    <published>2018-10-13T03:56:39.077Z</published>
    <updated>2018-10-13T03:56:39.077Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
