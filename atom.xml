<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夜游</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-05T14:57:24.548Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hahahai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sequelize学习</title>
    <link href="http://yoursite.com/2019/06/05/Sequelize%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/06/05/Sequelize学习/</id>
    <published>2019-06-05T13:39:30.000Z</published>
    <updated>2019-06-05T14:57:24.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-安装使用"><a href="#1-安装使用" class="headerlink" title="1.安装使用"></a>1.安装使用</h3><p>最佳实践：sequelize + sequelize-cli捆绑消费。这里介绍搭配eggjs进行使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-sequelize mysql2 sequelize-cli --save</span><br></pre></td></tr></table></figure><p>接着在项目的根目录上面新建一个.sequelizerc文件，这个文件的作用：sequelize-cli的配置文件，可以在里面配置migration文件的路径，modal文件的路径，seeder文件的路径，数据库环境配置。内容示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">"config"</span>: path.join(__dirname, <span class="string">"database/config.json"</span>),</span><br><span class="line">  <span class="string">"migrations-path"</span>: path.join(__dirname, <span class="string">"database/migrations"</span>),</span><br><span class="line">  <span class="string">"seeders-path"</span>: path.join(__dirname, <span class="string">"database/seeders"</span>),</span><br><span class="line">  <span class="string">"models-path"</span>: path.join(__dirname, <span class="string">"app/model"</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意上面我们把model文件放在app目录中，可参考egg目录结构配置这一块。</p><p>既然已经配置好了，接下来我们利用sequelize-cli来做一些事了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 生成配置文件</span></span><br><span class="line">./node_modules/.bin/sequelize init:config</span><br></pre></td></tr></table></figure><p>生成migration文件，这个migration文件可以用来数据库迁移。就好比我们使用Git来管理代码一样，migration就是用来管理数据表版本的。同时，最佳实践，不手动建表，一：建表的SQL自己要另存，用处不大，只能看看。二：写不来，不是放光的DBA。而有了sequelize-cli的帮助的话，可以，如果你想要建表的话，那么来写一个migration文件吧，不仅能够用来创建数据表，而且还能够用来进行数据表的版本回退。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 按照配置生成migrations目录</span></span><br><span class="line">./node_modules/.bin/sequelize init:migrations</span><br></pre></td></tr></table></figure><p>执行上面这条bash命令后，sequelize-cli会在我们约定好的地方生成migrations目录。</p><h3 id="2-我想要建表了"><a href="#2-我想要建表了" class="headerlink" title="2.我想要建表了"></a>2.我想要建表了</h3><p>别急着定义model，在sequelize-cli中，始于migration。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 生成某个表的migration命令</span></span><br><span class="line">./node_modules/.bin/sequelize migration:generate --name=users</span><br></pre></td></tr></table></figure><p>执行之后，我们可以看到在migrations目录中多了一个时间戳-users名字的js文件。要想建表的话，那么就撸起袖子在这个文件里面做操作吧。</p><h3 id="3-我该如何使用sequelize-API建表"><a href="#3-我该如何使用sequelize-API建表" class="headerlink" title="3.我该如何使用sequelize API建表"></a>3.我该如何使用sequelize API建表</h3><p>谈到数据表，那自然离不开表字段的定义。这里只说点超超超简单的，什么表约束等不懂。字段自然是声明类型。对于migration文件来说，它是被sequelize-cli给直接处理的。所以我们讨论一下sequelize-cli，在它的建立的规则里面，migration文件导出一个对象，对象拥有两个字段，分别是up和down。up也好，down也好，他们都是一个函数，函数的第一个参数是queryInterface(可以理解为操作数据库的实例)，第二个参数是Sequelize类，常用来声明类型。下面是一个示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  up: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; STRING, DATE, INTEGER, TEXT &#125; = Sequelize;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.createTable(<span class="string">"news"</span>, &#123;</span><br><span class="line">      id: &#123;</span><br><span class="line">        type: INTEGER.UNSIGNED,</span><br><span class="line">        autoIncrement: <span class="literal">true</span>,</span><br><span class="line">        primaryKey: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      title: &#123;</span><br><span class="line">        type: STRING,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      createdAt: &#123;</span><br><span class="line">        type: DATE,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      updatedAt: &#123;</span><br><span class="line">        type: DATE,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      author: &#123;</span><br><span class="line">        type: STRING(<span class="number">32</span>),</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      content: &#123;</span><br><span class="line">        type: TEXT,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      category: &#123;</span><br><span class="line">        type: STRING,</span><br><span class="line">        allowNull: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  down: <span class="keyword">async</span> (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> queryInterface.dropTable(<span class="string">"news"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-安装使用&quot;&gt;&lt;a href=&quot;#1-安装使用&quot; class=&quot;headerlink&quot; title=&quot;1.安装使用&quot;&gt;&lt;/a&gt;1.安装使用&lt;/h3&gt;&lt;p&gt;最佳实践：sequelize + sequelize-cli捆绑消费。这里介绍搭配eggjs进行使用&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>ramda笔记</title>
    <link href="http://yoursite.com/2019/06/04/ramda%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/04/ramda笔记/</id>
    <published>2019-06-04T10:40:43.000Z</published>
    <updated>2019-06-04T12:51:51.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-记API"><a href="#1-记API" class="headerlink" title="1.记API"></a>1.记API</h3><p>1.all方法，如果列表数据里面每一个项都满足predicate的话，那么返回true。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> R <span class="keyword">from</span> <span class="string">"ramda"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> equals3 = R.equals(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result1: <span class="built_in">boolean</span> = R.all(equals3)([<span class="number">3</span>,<span class="number">3</span>]); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>2.allPass方法，相比all方法，allPass方法可以接受多个predicate，只有所有predicate都满足要求的时候才会返回true。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isQueue = R.propEq(<span class="string">"rank"</span>, <span class="string">"Q"</span>);</span><br><span class="line"><span class="keyword">const</span> isKing = R.propEq(<span class="string">"pos"</span>, <span class="string">"K"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> isOwner = R.allPass(isQueue, isKing);</span><br><span class="line">isOwner(&#123; rank: <span class="string">"Q"</span>, pos: <span class="string">"K"</span> &#125;); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>3.和all，allPass相对应的就是any，anyPass。使用方法同理。只有有一个满足即可。</p><p>4.ap操作符：将函数列表作用域值列表上面。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> operations: <span class="built_in">any</span>[] = [ R.concat(<span class="string">"cool"</span>), R.toUpper ];</span><br><span class="line"><span class="keyword">const</span> datas: <span class="built_in">string</span>[] = [ <span class="string">"fp"</span>, <span class="string">"js"</span> ];</span><br><span class="line"><span class="keyword">const</span> result: stringp[] = R.ap(operations, datas); <span class="comment">// [ 'coolfp', 'cooljs', 'FP', 'JS' ]</span></span><br></pre></td></tr></table></figure><p>5.append方法：在末尾进行拼接：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> step1 = R.append(<span class="string">"test"</span>);</span><br><span class="line">step1([<span class="string">"ok"</span>]);   <span class="comment">// ["ok", "test"]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-记API&quot;&gt;&lt;a href=&quot;#1-记API&quot; class=&quot;headerlink&quot; title=&quot;1.记API&quot;&gt;&lt;/a&gt;1.记API&lt;/h3&gt;&lt;p&gt;1.all方法，如果列表数据里面每一个项都满足predicate的话，那么返回true。&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="ramda.js, 函数式" scheme="http://yoursite.com/tags/ramda-js-%E5%87%BD%E6%95%B0%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>learning_graphQL_笔记1</title>
    <link href="http://yoursite.com/2019/05/29/learning-graphQL-%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/05/29/learning-graphQL-笔记1/</id>
    <published>2019-05-29T13:05:30.000Z</published>
    <updated>2019-05-30T06:11:02.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本概念介绍"><a href="#1-基本概念介绍" class="headerlink" title="1.基本概念介绍"></a>1.基本概念介绍</h3><p>SQL四大操作：SELECT，INSERT，UPDATE，DELETE基本对应上如今REST中的read，create，update，delete，在REST的世界中，我想获取什么数据或者删除什么数据是通过HTTP动词+URL来表达的，而这就是REST的弊端之一，我想要的东西是模糊其词的被表达出来，多了一点抽象。</p><p>SQL是后端和数据库说话，客户要数据，但是却不是发声者。对于graphQL而言，它是客户端和后端说话，我想要什么都是可控的，graphQL会在网络中传输，而固定的SQL静静躺在服务端代码里。</p><p>由于SQL是数据库语言，所以SQL数据存储在数据表中；但是对于graphQL而言，数据可以是数据库（一个或多个不同的），文件系统等。</p><p>graphQL利用Query来替代SELECT；利用Mutation来替代UPDATE，INSERT，DELETE。客户端会将grapQL作为POST请求的data发送到后端的API里面。此外，graphQL还提供了Subscription。</p><h3 id="2-graphQL语法基本介绍"><a href="#2-graphQL语法基本介绍" class="headerlink" title="2.graphQL语法基本介绍"></a>2.graphQL语法基本介绍</h3><p>想要体验graphQL的用法的话，那么可以在<a href="http://snowtooth.moonhighway.com/进行体验。已知allTrails，allLifts是我们已经定义好了的graphQL" target="_blank" rel="noopener">http://snowtooth.moonhighway.com/进行体验。已知allTrails，allLifts是我们已经定义好了的graphQL</a> type之一。示例如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  allTrails &#123;</span><br><span class="line">    name</span><br><span class="line">    status</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回数据大致如下所示</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    allTrails: [</span><br><span class="line">      &#123; name: &apos;...&apos;, status: &apos;...&apos; &#125;,</span><br><span class="line">      &#123; name: &apos;...&apos;, status: &apos;...&apos; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时，在查询的时候我们也可以设置别名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">query &#123;</span><br><span class="line">  at: allTrails &#123;</span><br><span class="line">    n: name</span><br><span class="line">    status</span><br><span class="line">  &#125;</span><br><span class="line">  allLifts &#123;</span><br><span class="line">    name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 返回数据大致如下所示</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;data&quot;: &#123;</span><br><span class="line">    at: [</span><br><span class="line">      &#123; n: &apos;...&apos;, status: &apos;...&apos; &#125;,</span><br><span class="line">      ....</span><br><span class="line">    ],</span><br><span class="line">    allLifts: [</span><br><span class="line">      &#123; name: &apos;...&apos; &#125;,</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里补充一下，如果graphQL查询结果报错的话，那么返回json数据中field就不是data了，而是error。</p><h4 id="2-1-条件查询"><a href="#2-1-条件查询" class="headerlink" title="2-1.条件查询"></a>2-1.条件查询</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">query al &#123;</span><br><span class="line">  allLifts(status: &quot;CLOSED&quot; sortBy: &quot;name&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    status</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-fileds-type"><a href="#2-2-fileds-type" class="headerlink" title="2-2.fileds type"></a>2-2.fileds type</h4><p>先解释一下哪些是field，在上面这个例子中，name就是一个field。field的类型要么是scalar type要么是object type，其中scalar type在graphQL中有五种，分别是Int，Float，String，ID，Boolean；其中Int和Float都对应JSON中的Number，String和ID都对应了JSON中的String，Boolean就是JSON中的Boolean。</p><h4 id="2-3-fragment"><a href="#2-3-fragment" class="headerlink" title="2-3.fragment"></a>2-3.fragment</h4><p>可以使用fragment来简化graphQL代码。用法：fragment fragmentName on QueryTYPE {}。需要注意的是，默认一个fragment只能用在其所对应的fileds type上面。示例如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fragment first on Lift &#123;</span><br><span class="line">  name</span><br><span class="line">  status</span><br><span class="line">  night</span><br><span class="line">&#125;</span><br><span class="line">query &#123;</span><br><span class="line">  Lift(id: &quot;jazz-cat&quot;) &#123;</span><br><span class="line">    ...first</span><br><span class="line">    trailAccess &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Trail(id: &quot;river-run&quot;) &#123;</span><br><span class="line">    name</span><br><span class="line">    status</span><br><span class="line">    night</span><br><span class="line">    accessedByLifts &#123;</span><br><span class="line">      ...first</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>尽管查询Trail的时候里面有些field的名字还是冗余了，但是正如前面所说，我们并不能将first这个fragment应用在Trail这个query type上面。所以我们得在定义一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">fragment first on Lift &#123;</span><br><span class="line">  name</span><br><span class="line">  status</span><br><span class="line">  night</span><br><span class="line">&#125;</span><br><span class="line">fragment t on Trail &#123;</span><br><span class="line">  name</span><br><span class="line">  status</span><br><span class="line">  night</span><br><span class="line">  accessedByLifts &#123;</span><br><span class="line">    ...first</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">query &#123;</span><br><span class="line">  Lift(id: &quot;jazz-cat&quot;) &#123;</span><br><span class="line">    ...first</span><br><span class="line">    trailAccess &#123;</span><br><span class="line">      name</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  Trail(id: &quot;river-run&quot;) &#123;</span><br><span class="line">    ...t</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-unit-type"><a href="#2-4-unit-type" class="headerlink" title="2-4.unit type"></a>2-4.unit type</h4><p>对于某个query type，我们希望它所查询出来的东西既可以是typeA，也可以是typeB，那么可以如下实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">query schedule &#123;</span><br><span class="line">  agenda &#123;</span><br><span class="line">    ...on Workoout &#123;</span><br><span class="line">      name</span><br><span class="line">      reps</span><br><span class="line">    &#125;</span><br><span class="line">    ...on StudyGroup &#123;</span><br><span class="line">      name</span><br><span class="line">      subject</span><br><span class="line">      students</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Mutation"><a href="#3-Mutation" class="headerlink" title="3.Mutation"></a>3.Mutation</h3><p>正如前面所说，数据四大操作增删改查，在graphQL增删改都只被Mutation一个给抽象了。下面看一个mutation的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mutation &#123;</span><br><span class="line">  setLiftStatus(id: &quot;jazz-cat&quot;, status: OPEN) &#123;</span><br><span class="line">    name</span><br><span class="line">    id</span><br><span class="line">    status</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中setLiftStatus是mutation API，后面跟着的是参数，同时这个query操作所返回的结果也是以setLiftStatus作为键名的，返回的结果就是包含id,name,status这三个字段。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-基本概念介绍&quot;&gt;&lt;a href=&quot;#1-基本概念介绍&quot; class=&quot;headerlink&quot; title=&quot;1.基本概念介绍&quot;&gt;&lt;/a&gt;1.基本概念介绍&lt;/h3&gt;&lt;p&gt;SQL四大操作：SELECT，INSERT，UPDATE，DELETE基本对应上如今REST
      
    
    </summary>
    
    
      <category term="graphQL" scheme="http://yoursite.com/tags/graphQL/"/>
    
  </entry>
  
  <entry>
    <title>typescript之advancedTypes</title>
    <link href="http://yoursite.com/2019/05/27/types/"/>
    <id>http://yoursite.com/2019/05/27/types/</id>
    <published>2019-05-27T13:28:31.000Z</published>
    <updated>2019-05-31T12:31:29.720Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在componentWillReceiveProps里面setState之后是不会接着触发componentWillReceiveProps的，否则那就是死循环了。</p></blockquote><h3 id="1-union-types"><a href="#1-union-types" class="headerlink" title="1.union types"></a>1.union types</h3><p>正如字面意思上面所说，union type就是联合类型。万万没想到在typescript中，字符串字面量也能够成为类型，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> St = <span class="string">"string"</span>;</span><br><span class="line"><span class="keyword">const</span> faith: St = <span class="string">"string"</span>;</span><br><span class="line"><span class="keyword">const</span> freedom: St = <span class="string">"string2"</span>;  <span class="comment">// 报错，St类型的变量的值只能够是string</span></span><br></pre></td></tr></table></figure><p>在某些场合下，我们希望某个字符串只能是某几个可选的值之一，那么这个时候使用union type将会特别方便，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> St = <span class="string">"Man"</span> | <span class="string">"Women"</span> | <span class="string">"She"</span> | <span class="string">"He"</span> | <span class="string">"Me"</span>;</span><br><span class="line"><span class="keyword">const</span> theMan: St = <span class="string">"Man"</span>;</span><br><span class="line"><span class="keyword">const</span> theWomen: St = <span class="string">"Women"</span>;</span><br><span class="line"><span class="keyword">const</span> errorIsValid: St = <span class="string">"Aha"</span>; <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p>下面再看一个使用union type的例子，感受下他对类型系统所作出的作用：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> I1 &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"1"</span>;</span><br><span class="line">    value: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> I2 &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"2"</span>;</span><br><span class="line">    value: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> I3 &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"3"</span>;</span><br><span class="line">    value: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> I4 &#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">"4"</span>;</span><br><span class="line">    value: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> smlz2 = I1 | I2 | I3 | I4;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">param: smlz2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(param.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">            param.value = <span class="string">"one"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">            param.value = <span class="string">"two"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">            param.value = <span class="string">"three"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">const</span> neverChoice: never = param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> par: smlz2 = &#123; <span class="keyword">type</span>: <span class="string">"4"</span>, value: <span class="string">"four"</span> &#125;;</span><br><span class="line">init(par);  <span class="comment">// 报错，要解决这个问题的话，那么就需要在case 3这个分支后面加上对case 4的处理。</span></span><br></pre></td></tr></table></figure><h3 id="2-泛型方法"><a href="#2-泛型方法" class="headerlink" title="2.泛型方法"></a>2.泛型方法</h3><p>不多说，直接介绍使用方法，下面是一个泛型方法的使用方式：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getData = &lt;T&gt;(url: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;T&gt; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> fetch(url).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!response.ok) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(response.statusText);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.json();</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ApiRes &#123;</span><br><span class="line">  errorMes: <span class="built_in">string</span>;</span><br><span class="line">  content: object;</span><br><span class="line">  status: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">getData&lt;ApiRes&gt;(<span class="string">"/api/mockMe"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res.content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-泛型类"><a href="#3-泛型类" class="headerlink" title="3.泛型类"></a>3.泛型类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> data: T[] = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> getList(): T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> add(item: T) &#123;</span><br><span class="line">        <span class="keyword">this</span>.data.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> peopleList = <span class="keyword">new</span> List&lt;Person&gt;();</span><br><span class="line">peopleList.add(&#123; name: <span class="string">'hahahai'</span>, age: <span class="number">23</span> &#125;);</span><br><span class="line">peopleList.add(&#123; name: <span class="string">'hahahai'</span>, nickName: <span class="string">'xh'</span> &#125;);  <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="4-如果想在react中使用redux的话，那么只需要安装redux即可，无需安装type声明文件，因为redux-package里面已经包含了type声明文件。"><a href="#4-如果想在react中使用redux的话，那么只需要安装redux即可，无需安装type声明文件，因为redux-package里面已经包含了type声明文件。" class="headerlink" title="4.如果想在react中使用redux的话，那么只需要安装redux即可，无需安装type声明文件，因为redux package里面已经包含了type声明文件。"></a>4.如果想在react中使用redux的话，那么只需要安装redux即可，无需安装type声明文件，因为redux package里面已经包含了type声明文件。</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在componentWillReceiveProps里面setState之后是不会接着触发componentWillReceiveProps的，否则那就是死循环了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-union-types&quot;&gt;
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typescript-react学习笔记3</title>
    <link href="http://yoursite.com/2019/05/26/typescript-react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>http://yoursite.com/2019/05/26/typescript-react学习笔记3/</id>
    <published>2019-05-26T01:52:01.000Z</published>
    <updated>2019-05-27T13:14:17.158Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-介绍react-router"><a href="#1-介绍react-router" class="headerlink" title="1.介绍react-router"></a>1.介绍react-router</h3><p>自从新版本（好像是4）发布后，如果我们想要在浏览器中使用react-router的话，那么所需要安装的依赖包是react-router-dom，同时为了增加对typescript的支持，我们还需要yarn add @types/react-router-dom –dev。</p><p>react-router-dom里面的两个关键性组件BrowserRouter和Route组件，其中BrowserRouter是<strong>top-level component</strong>，它会根据path来决定哪个子Route组件将会被渲染。下面是一个示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">"./page/1"</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">"./page/2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routes: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/1"</span> component=&#123;Page1&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/2"</span> component=&#123;Page2&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Router&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// top-level component</span></span><br><span class="line">ReactDOM.render(&lt;Routes /&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>) <span class="keyword">as</span> HTMLElement);</span><br></pre></td></tr></table></figure><h3 id="2-使用Link进行导航"><a href="#2-使用Link进行导航" class="headerlink" title="2.使用Link进行导航"></a>2.使用Link进行导航</h3><p>不多说，来自react-router-dom，见例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Link &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="keyword">import</span> Page1 <span class="keyword">from</span> <span class="string">"./page/1"</span>;</span><br><span class="line"><span class="keyword">import</span> Page2 <span class="keyword">from</span> <span class="string">"./page/2"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routes: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;Router&gt;</span><br><span class="line">    &lt;div className=<span class="string">"header"</span>&gt;</span><br><span class="line">      &lt;Link to=<span class="string">"/1"</span>&gt;page1&lt;<span class="regexp">/Link&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Link to="/</span><span class="number">2</span><span class="string">"&gt;page2&lt;/Link&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div className="</span>content<span class="string">"&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/<span class="number">1</span><span class="string">" component=&#123;Page1&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;Route path="</span>/<span class="number">2</span><span class="string">" component=&#123;Page2&#125; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/Router&gt;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure><h3 id="3-介绍一下NavLink"><a href="#3-介绍一下NavLink" class="headerlink" title="3.介绍一下NavLink"></a>3.介绍一下NavLink</h3><p>相比Link，它可以接受一个activeClassName作为props，能够更加方便的定制当前路由tab处于焦点状态时的样式效果。</p><h3 id="4-路由通配符之RouteComponentProps"><a href="#4-路由通配符之RouteComponentProps" class="headerlink" title="4.路由通配符之RouteComponentProps"></a>4.路由通配符之RouteComponentProps</h3><p>关键词：路由通配符；RouteComponentProps；props.match.params，下面是一个示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">"react-router"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Props = RouterComponentProps&lt;&#123;id: <span class="built_in">string</span>&#125;&gt;;  <span class="comment">// 只能是string或者是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Page21 = React.SFC&lt;Props&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (&lt;h1&gt;&#123;props.match.params.id&#125;&lt;<span class="regexp">/h1&gt;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Page21;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ routes.ts</span></span><br><span class="line"><span class="regexp">&lt;Route exact=&#123;true&#125; path="/</span><span class="number">2</span><span class="string">" component=&#123;Page2&#125; /&gt;</span></span><br><span class="line"><span class="string">&lt;Route path="</span>/<span class="number">2</span>/:id<span class="string">" component=&#123;Page21&#125; /&gt;</span></span><br></pre></td></tr></table></figure><p>注意对于上面的这个例子，对于path是/2的这个Route，增加了一个exact={true},如果不加的话，那么对于路由/2/3 将会既渲染Page2组件同时也会渲染Page21组件。以及，路由通配符所对应的变量的数据类型要么是字符串类型或者是undefined，所以必要的话，使用的时候需要做一个类型转换。另外，如果你定义组件的state类型的话，但是在构造函数里面又没有初始化的话，将会报错，为了避免这种在构造函数可能无法获取到值的情况下，建议将这个state作为可选state。</p><h3 id="5-Switch-component"><a href="#5-Switch-component" class="headerlink" title="5.Switch component"></a>5.Switch component</h3><p>Switch component的作用，对于Switch component的子Route component来说，谁最先被匹配到，那么谁显示谁，并且最多匹配一个。我们可以使用Switch来做些什么呢？可以用来实现404页面效果，把404组件作为Switch组件的最后一个子Route即可。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Switch &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line">&lt;Router&gt;</span><br><span class="line">  &lt;Switch&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/2"</span> component=&#123;page2&#125; /&gt;</span><br><span class="line">    &lt;Route path=<span class="string">"/2/:id"</span> component=&#123;page21&#125; /&gt;</span><br><span class="line">    &lt;Route component=&#123;notFound&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>Router&gt;</span><br></pre></td></tr></table></figure><h3 id="6-Redirect之权限验证："><a href="#6-Redirect之权限验证：" class="headerlink" title="6.Redirect之权限验证："></a>6.Redirect之权限验证：</h3><p>如果某个路由是必须要登录之后才能够访问到的话，那么很显然此时必须做一个登录状态的验证，如果没有登录的话，那么就跳转到登录页面，下面是一个示意例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserRouter <span class="keyword">as</span> Router, Route, Redirect, Switch &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"><span class="comment">// 省略page import</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routes: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [ isLogin, setLogin ] = React.useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">      &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/1"</span>&gt;</span><br><span class="line">          &#123;</span><br><span class="line">            isLogin ? &lt;Page1 /&gt; : &lt;Redirect to=<span class="string">"/login"</span> /&gt;</span><br><span class="line">          &#125;</span><br><span class="line">        &lt;<span class="regexp">/Route&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Route path="/</span><span class="number">2</span><span class="string">" exact=&#123;true&#125; component=&#123;Page2&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/<span class="number">2</span>/:id<span class="string">" component=&#123;Page21&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route path="</span>/login<span class="string">" component=&#123;Login&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;Route component=&#123;NotFound&#125; /&gt;</span></span><br><span class="line"><span class="string">      &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    &lt;/Router&gt;</span></span><br><span class="line"><span class="string">  );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="7-react-router-dom获取查询字符串"><a href="#7-react-router-dom获取查询字符串" class="headerlink" title="7.react-router-dom获取查询字符串"></a>7.react-router-dom获取查询字符串</h3><p>关键词：RouteComponentProps，props.location.search；而对于路由匹配来说，关键词则是RouteComponentProps，props.match.params</p><p>直接举例如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouteComponentProps &#125; <span class="keyword">from</span> <span class="string">"react-router-dom"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Search: React.SFC&lt;RouterComponentProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="keyword">new</span> URLSearchParams(props.location.search);</span><br><span class="line">  <span class="keyword">const</span> what = obj.get(<span class="string">"what"</span>) || <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">return</span> (&lt;h1&gt;&#123;what&#125;&lt;<span class="regexp">/h1&gt;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default React.memo(Search);</span></span><br></pre></td></tr></table></figure><h3 id="8-lazy-load-component"><a href="#8-lazy-load-component" class="headerlink" title="8.lazy load component"></a>8.lazy load component</h3><p>react16内置了对lazy component的支持，只有当在必要的时候才会加载对于的路由组件。关键词：<strong>Suspense，React.lazy，fallback</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">const</span> Suspense = React.Suspense;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Page1 = React.lazy(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">"./page/1"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Routes: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> (</span><br><span class="line">  &lt;BrowserRouter&gt;</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">      &lt;Route path=<span class="string">"/1"</span>&gt;</span><br><span class="line">        &#123;</span><br><span class="line">          variable ?</span><br><span class="line">          &lt;Suspense fallback=&#123;&lt;h1&gt;Loading&lt;<span class="regexp">/h1&gt;&#125;&gt;&lt;Page1 /</span>&gt;&lt;<span class="regexp">/Suspense&gt;</span></span><br><span class="line"><span class="regexp">          :</span></span><br><span class="line"><span class="regexp">          &lt;Redirect to="/</span>login<span class="string">" /&gt;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/Route&gt;</span></span><br><span class="line"><span class="string">    &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">  &lt;/BrowserRouter&gt;</span></span><br><span class="line"><span class="string">);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-介绍react-router&quot;&gt;&lt;a href=&quot;#1-介绍react-router&quot; class=&quot;headerlink&quot; title=&quot;1.介绍react-router&quot;&gt;&lt;/a&gt;1.介绍react-router&lt;/h3&gt;&lt;p&gt;自从新版本（好像是4）发布后
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typescript+react学习笔记2</title>
    <link href="http://yoursite.com/2019/05/23/typescript-react%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>http://yoursite.com/2019/05/23/typescript-react学习笔记2/</id>
    <published>2019-05-23T05:57:57.000Z</published>
    <updated>2019-05-25T13:47:13.789Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原生js如何获取子元素：element.childNodes；原生js如何获取父元素：element.parentNode;</p></blockquote><h3 id="题外话，背个书："><a href="#题外话，背个书：" class="headerlink" title="题外话，背个书："></a>题外话，背个书：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line">[a, b] = [b, a];</span><br></pre></td></tr></table></figure><h3 id="1-render方法所返回的是什么类型数据？"><a href="#1-render方法所返回的是什么类型数据？" class="headerlink" title="1.render方法所返回的是什么类型数据？"></a>1.render方法所返回的是什么类型数据？</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component &#123;</span><br><span class="line">  <span class="keyword">public</span> render(): React.ReactNode &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;learn&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-jsx大致的解析过程？"><a href="#2-jsx大致的解析过程？" class="headerlink" title="2.jsx大致的解析过程？"></a>2.jsx大致的解析过程？</h3><p>先看在jsx中一个简单的元素是怎么被转化的(https:/​/​babeljs.​io/​repl可在线尝试)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;hello world&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p>它将被转化成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">"h1"</span>,</span><br><span class="line">  <span class="literal">null</span>,</span><br><span class="line">  <span class="string">"hello babel"</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>解释一下React.createElement方法的三个参数，参数一：表示元素类型，可以是以下几种 HTML tag name，React Component Type，React Fragment Type。参数二：应用在元素上面的props object。参数三：元素的children。</p><p>因此，对于像下面这样的jsx代码的话将会转化成这样的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=<span class="string">"c1"</span>&gt;</span><br><span class="line">  &lt;h1&gt;aha&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>translate:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">React.createElement(</span><br><span class="line">  <span class="string">"div"</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">"c1"</span> &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">"h1"</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="string">"aha"</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>从上面的转换我们也可以看出为什么在react中class是叫做className，因为class是关键字，jsx最终还是要走js的。</p><p>再来看看当jsx里面引用js会发生什么情况：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = &#123; <span class="attr">title</span>: <span class="string">'babel'</span> &#125;;</span><br><span class="line">&lt;div className=<span class="string">"c1"</span>&gt;</span><br><span class="line">  &lt;span&gt;&#123;props.title ? props.title : <span class="string">'react and typescript'</span>&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>jsx解析结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> props = &#123; <span class="attr">title</span>: <span class="string">"babel"</span> &#125;;</span><br><span class="line">React.createElement(</span><br><span class="line">  <span class="string">"div"</span>,</span><br><span class="line">  &#123; <span class="attr">className</span>: <span class="string">"c1"</span> &#125;,</span><br><span class="line">  React.createElement(</span><br><span class="line">    <span class="string">"span"</span>,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    props.title ? props.title : <span class="string">"react and typescript"</span></span><br><span class="line">  )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="3-Component-props"><a href="#3-Component-props" class="headerlink" title="3.Component props"></a>3.Component props</h3><p>React.Component是一个泛型类，它能接受一个表示props的类型，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps = &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  content: <span class="built_in">string</span>;</span><br><span class="line">  classPrefix?: <span class="built_in">string</span>;         <span class="comment">// 表示这个props是可选的</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;IProps&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h1&gt;&#123;this.props.content&#125;&lt;/</span>h1&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-Default-Prop-Values"><a href="#4-Default-Prop-Values" class="headerlink" title="4.Default Prop Values"></a>4.Default Prop Values</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IProps = &#123;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  classPrefix?: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;IProps&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    classPrefix: <span class="string">"confirm_"</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">public</span> render(): React.ReactNode &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-component-state"><a href="#5-component-state" class="headerlink" title="5.component state"></a>5.component state</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IState &#123;</span><br><span class="line">  showModal: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, IState&gt;&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">props: &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      showModal: <span class="literal">true</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> modalOkHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123; showModal: <span class="literal">false</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时也不知{}是什么类型。可以确定的是，如果显示说明了一个component的props类型是{}的话，那么在使用这个component的时候就不能手动传入props，传来的话就会报错。</p><h3 id="6-React正确实践，不该作为state的切勿作为state处理："><a href="#6-React正确实践，不该作为state的切勿作为state处理：" class="headerlink" title="6.React正确实践，不该作为state的切勿作为state处理："></a>6.React正确实践，不该作为state的切勿作为state处理：</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IState &#123;</span><br><span class="line">  countDown: <span class="built_in">number</span>;</span><br><span class="line">  showModal: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> App <span class="keyword">extends</span> React.Component</span><br><span class="line">  <span class="keyword">private</span> _timer: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">props: &#123;&#125;</span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      countDown: <span class="number">10</span>,</span><br><span class="line">      showModal: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// setTimeout, setInterval里面setState是同步更新</span></span><br><span class="line">  <span class="keyword">public</span> componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>._timer = <span class="built_in">window</span>.setInterval(<span class="keyword">this</span>.timerHandler, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> componentWillUnmount() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>._timer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> timerHandler() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      countDown: <span class="keyword">this</span>.state.countDown - <span class="number">1</span></span><br><span class="line">    &#125;, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.state.countDown &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>._timer);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123; showModal: <span class="literal">true</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> render(): React.ReactNode &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;ComponentA show=&#123;<span class="keyword">this</span>.state.showModal&#125; /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-React的生命周期"><a href="#7-React的生命周期" class="headerlink" title="7.React的生命周期"></a>7.React的生命周期</h3><p>react16版本对生命周期方法做了较大的更新处理，最新的生命周期流程图如下所示：</p><p><img src="https://img.vim-cn.com/23/5c5f457c891b83e4307b9da32d2449d8bbe825.png" alt="react16生命周期流程图"></p><p>接下来进行逐一介绍：</p><p><strong>componentDidMount</strong>：当component已经insert进DOM的时候被触发，一般的，在componentDidMount会完成以下逻辑处理：</p><ul><li>1.网络请求；</li><li>2.事件监听</li><li>3.初始化计时器</li><li>4.初始化第三方库</li></ul><p><strong>componentWillUnmount</strong>：当component已经从DOM中remove的时候触发。一般的，会在里面完成以下逻辑：</p><ul><li>1.移除event listener</li><li>2.取消active network；</li><li>3.移除计时器</li></ul><p><strong>getDerivedStateFromProps</strong>：这个生命周期方法会在挂载和更新这两个生命周期得到调用机会。它是一个静态方法。通过上面的表述我们可以发现，如果你setState的话，那么是会触发getDerivedStateFromProps方法的，同时他也接受state作为第二个参数，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> getDerivedStateFromProps(props: &#123;&#125;, state: IState) &#123;</span><br><span class="line">  <span class="comment">// setState会触发它，然后在它参数中获取到state对象就是最新的state</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>getSnapshotBeforeUpdate</strong>：这个生命周期方法在更新的时候会得到调用机会，它接受两个参数，分别是prevProps, prevState，同时他需要返回一个值，这个值将会作为componentDidUpdate方法的第三个参数。也就是说componentDidUpdate会在getSnapshotBeforeUpdate方法，示例用法如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> getSnapshotBeforeUpdate(prevProps: &#123;&#125;, prevState: IState) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'prevState'</span>, prevState);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'fromSnapshot'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> componentDidUpdate(prevProps: &#123;&#125;, prevState: IState, snapshot: <span class="built_in">string</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'snapshot'</span>, snapshot);  <span class="comment">// fromSnapshot</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>shouldComponentUpdate</strong>：shouldComponent is invoked just before rendering happens，它返回一个布尔值来表明是否需要进行接下的更新流程。不用多说，这是关于性能优化的关键之处。</p><p>还是针对上面那个定时器的例子，如果我们使得shouldComponent返回false的话，那么getSnapshotBeforeUpdate以及componentDidUpdate都是不会得到触发机会的。由于不断setState的原因，此时只会触发getDerivedStateFromProps方法，接着再触发shouldComponentUpdate方法。</p><h3 id="8-函数组件（无状态函数组件）："><a href="#8-函数组件（无状态函数组件）：" class="headerlink" title="8.函数组件（无状态函数组件）："></a>8.函数组件（无状态函数组件）：</h3><p>首先，无状态函数组件就不能拥有state吗？不是的，也可以有。</p><p>对于react的typescript版本来说，无状态函数组件的类是React.SFC。对于无状态函数组件来说，需要注意的地方有：它是不允许有render方法的，它所需要渲染的内容直接通过return jsx来实现；访问props无需this；同时由于对于无状态函数组件来说它是一个函数而不是类了，所以不能直接设置defaultProps静态属性；而是要如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">interface</span> IProps = &#123;</span><br><span class="line">  classPrefix: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> Modal: React.SFC&lt;IProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> eventHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;props.classPrefix&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">Modal.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  classPrefix: 'modal'</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure><h3 id="9-函数组件就不能够拥有state-NO！"><a href="#9-函数组件就不能够拥有state-NO！" class="headerlink" title="9.函数组件就不能够拥有state?? NO！"></a>9.函数组件就不能够拥有state?? NO！</h3><p>React16版本使得函数组件也能够出现state，并且能够修改state，这主要多亏了React.useState方法。React.useState返回给我们一个数组，数组的第一项是state，第二项是设置state的方法，将新的state作为这个方法的参数即可。React.useState接受的第一个参数是state的初始值。下面是一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  classPrefix: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Confirm: React.SFC&lt;IProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [ count, setCount ] = React.setState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> countTemp = count + <span class="number">1</span>;</span><br><span class="line">    setCount(countTemp);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div onClick=&#123;<span class="keyword">this</span>.clickHandler&#125;&gt;</span><br><span class="line">      &lt;button&gt;&#123;count&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-函数组件就不能拥有生命周期方法吗？no"><a href="#10-函数组件就不能拥有生命周期方法吗？no" class="headerlink" title="10.函数组件就不能拥有生命周期方法吗？no!"></a>10.函数组件就不能拥有生命周期方法吗？no!</h3><p>使用React.useEffect()方法来进行生命周期函数的hook，它接受两个参数，第一个参数是箭头函数，在被rendered后调用；正常情况下，这个箭头函数一定会被调用一次（成功挂载后的那次render）。第二个参数是一个数组，用来决定第一个参数箭头函数是否应该被调用。每当第二个数组的值发生变化的时候，那么箭头函数便会得到调用机会。问题：里面是否可以放普通变量？好像是不行的，只能放state,props。放普通变量的话，即使变量发生变化箭头函数也不会被调用。</p><p>问题2：第二个参数，能否state和props都放?答案是可以的，只要其中某一个发生变化都会引起箭头函数执行。如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  topCount: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Count: React.SFC&lt;IProps&gt; = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [ count, setCount ] = React.setState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rended!'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unmount!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [ count, topCount ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> temp = count + <span class="number">1</span>;</span><br><span class="line">    setCount(temp);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1 onClick=&#123;clickHandler&#125;&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>关于使用React.useEffect进行hook还有一点忘记说了，如果第一个箭头函数返回一个函数的话，那么返回的这个函数将会在卸载之后被调用。(更新是会触发卸载过程的)。</p><p>一个问题，组件的更新过程是否触发hook？不会的，只要当第二个参数发生变化的时候，hook函数才会被执行。</p><h3 id="11-最优化函数组件的渲染过程"><a href="#11-最优化函数组件的渲染过程" class="headerlink" title="11.最优化函数组件的渲染过程"></a>11.最优化函数组件的渲染过程</h3><p>我们知道，对于react来说，为了避免在比较两棵虚拟DOM树异同时所造成的性能问题，react会采用各种优化算法进行比较，其中之一就是如果父节点变化了的话，那么子节点也得卸载在更新。大部分时候这都会造成性能浪费，那么如何优化呢？react16大手一挥，提出了React.memo()方法，它接受一个组件，返回一个组件，返回的组件能够做到在自身状态没有发生变化的话，便不进行更新。那么这是不是银弹呢？答案是不是的，它只适用于那些本身就不会经常变化的场景之中，如果一个组件很多时候的渲染都是有必要的话，那么效果会适得其反，因为比对props是否变化本身就耗费性能。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> IProps &#123;</span><br><span class="line">  classPrefix: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Text: React.SFC&lt;IProps&gt; = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'I am running'</span>);</span><br><span class="line">  <span class="keyword">const</span> [ count, setCount ] = React.useState(<span class="number">0</span>);</span><br><span class="line">  React.useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'rendered'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'unmounted'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [ count ]);</span><br><span class="line">  <span class="keyword">const</span> clickHandler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> temp = count + <span class="number">1</span>;</span><br><span class="line">    setCount(temp);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;h1 onClick=&#123;clickHandler&#125;&gt;&#123;count&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Text.defaultProps = &#123;</span></span><br><span class="line"><span class="regexp">  classPrefix: 'aha'</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const TextMemo = React.memo(Text);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default TextMemo;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 父组件</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">interface IState &#123;</span></span><br><span class="line"><span class="regexp">  top: number;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component&lt;&#123;&#125;, IState&gt; &#123;</span></span><br><span class="line"><span class="regexp">  constructor(props: &#123;&#125;) &#123;</span></span><br><span class="line"><span class="regexp">    super(props);</span></span><br><span class="line"><span class="regexp">    this.state = &#123;</span></span><br><span class="line"><span class="regexp">      top: 0</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  private clickHandler = () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123; top: this.state.top + 1 &#125;);</span></span><br><span class="line"><span class="regexp">  &#125;;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  public render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;this.clickHandler&#125;&gt;&#123;this.state.top&#125;&lt;/</span>button&gt;</span><br><span class="line">        &lt;TextMemo classPrefix=<span class="string">"test"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>对于上面这个例子而言，当父组件setState的时候，可以发现I am running并不是多次被触发，所以利用React.memo方法包装组件能够达到避免多次无效渲染的目的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原生js如何获取子元素：element.childNodes；原生js如何获取父元素：element.parentNode;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;题外话，背个书：&quot;&gt;&lt;a href=&quot;#题外话，背个书：&quot; class
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typescript搭配react使用笔记1</title>
    <link href="http://yoursite.com/2019/05/22/typescript%E6%90%AD%E9%85%8Dreact%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B01/"/>
    <id>http://yoursite.com/2019/05/22/typescript搭配react使用笔记1/</id>
    <published>2019-05-22T00:21:17.000Z</published>
    <updated>2019-05-25T13:26:08.581Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-create-react-app作为脚手架"><a href="#1-create-react-app作为脚手架" class="headerlink" title="1.create-react-app作为脚手架"></a>1.create-react-app作为脚手架</h3><p>如果利用create-react-app进行开发的话，那么使用create-react-app appName –typescript那么便可以初始化一个typescript+react的开发环境。</p><p>一般的，推荐在搭配tslint来规范代码格式，可以使用如下命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add tslint tslint-react tslint-config-prettier --dev</span><br></pre></td></tr></table></figure><p>在安装好依赖之后，接下来进行配置tslint，在项目的根目录下面新建tslint.json文件。如果是vscode的话，那么安装下tslint扩展。tslint.json文件如下所示（视项目实际情况进行配置即可）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [</span><br><span class="line">    <span class="string">"tslint:recommended"</span>,</span><br><span class="line">    <span class="string">"tslint-react"</span>,</span><br><span class="line">    <span class="string">"tslint-config-prettier"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"no-console"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [</span><br><span class="line">      <span class="string">"node_modules/**/*.js"</span>,</span><br><span class="line">      <span class="string">"config/**/*.js"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完后，可以测试一下tslint配置是否生效，在某个非exclude的js文件中console下，如果有报错标注则说明tslint配置生效了。</p><h3 id="2-手动配置"><a href="#2-手动配置" class="headerlink" title="2.手动配置"></a>2.手动配置</h3><p>接下来手动配置一个项目使其支持typescript以及react：</p><p>1.新建一个项目文件夹，使用npm init进行初始化，在项目根目录中新建一个src文件夹和dist文件夹。</p><p>2.添加基础依赖，yarn add typescript –dev，在项目根目录中增加tsconfig.json配置文件：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">   <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">   <span class="attr">"module"</span>: <span class="string">"es6"</span>,</span><br><span class="line">   <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">   <span class="attr">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>],</span><br><span class="line">   <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">   <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"noImplicitReturns"</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">"rootDir"</span>: <span class="string">"src"</span>,</span><br><span class="line">   <span class="attr">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"include"</span>: [<span class="string">"**/*.ts"</span>, <span class="string">"**/*.tsx"</span>],</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.添加tslint作为代码格式检查工具: yarn add tslint –dev，在项目根目录中添加一个tslint.json配置文件，示例如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslint-config-prettier"</span>],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">"ordered-imports"</span>: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"linterOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"exclude"</span>: [<span class="string">"node_modules/**/*.ts"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的tslint配置文件还用上了第三方依赖，所以安装它：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add tslint-react tslint-config-prettier --dev</span><br></pre></td></tr></table></figure><p>4.添加react依赖以及对应的types依赖文件:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add react react-dom;</span><br><span class="line">yarn add @types/react @types/react-dom --dev;</span><br></pre></td></tr></table></figure><p>5.在项目根目录中的dist文件夹中添加index.html文件，内容如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>手把手配置基础脚手架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目根目录中的src文件夹创建一个index.tsx文件，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App: React.SFC = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &lt;h1&gt;learn&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">"root"</span>) <span class="keyword">as</span> HTMLElement);</span><br></pre></td></tr></table></figure><p>6.使用webpack作为代码打包工具：首先安装依赖文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add webpack webpack-cli --dev</span><br><span class="line">yarn add webpack-dev-server --dev <span class="comment"># 在开发阶段可以作为server使用</span></span><br><span class="line">yarn add ts-loader --dev <span class="comment"># 针对typescript的webpack plugin</span></span><br></pre></td></tr></table></figure><p>在项目根目录中配置webpack.config.js文件，实例如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    entry: &quot;./src/index.tsx&quot;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.tsx?$/,</span><br><span class="line">                use: &quot;ts-loader&quot;,</span><br><span class="line">                exclude: /node_modules/</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [&quot;.tsx&quot;, &quot;.ts&quot;, &quot;.js&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, &quot;dist&quot;),</span><br><span class="line">        filename: &quot;bundle.js&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, &quot;dist&quot;),</span><br><span class="line">        compress: true,</span><br><span class="line">        port: 9000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>7.添加npm脚本，如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "start": "webpack-dev-server --env development",</span><br><span class="line">  "build": "webpack --env production"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.接下来使用npm run start即可以看到运行效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-create-react-app作为脚手架&quot;&gt;&lt;a href=&quot;#1-create-react-app作为脚手架&quot; class=&quot;headerlink&quot; title=&quot;1.create-react-app作为脚手架&quot;&gt;&lt;/a&gt;1.create-react-ap
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>typescript学习二</title>
    <link href="http://yoursite.com/2019/05/16/typescript%E5%AD%A6%E4%B9%A0%E4%BA%8C/"/>
    <id>http://yoursite.com/2019/05/16/typescript学习二/</id>
    <published>2019-05-16T14:55:32.000Z</published>
    <updated>2019-05-21T13:59:43.935Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>window.pageYOffset || document.documentElement.scrollTop获取滑动距离。</p></blockquote><p><strong>1.问题一：typescript既有type annotations也有type inference，那么问题来了，如果定义一个变量，但是既不显示说明类型，又不进行赋值的话，那么他在typescript里面是什么类型呢？</strong></p><p>答案：是any类型。但是呢，最佳实践是尽量少用any类型。</p><p><strong>2.void类型，应用场景举例：加入一个函数只是打印日志的话，那么显然它是不具备什么返回值的，那么我们可以显示声明他的返回值是void，也可以借助typescript的type inference来推断出返回类型是void类型。如下所示：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以不type annotations，借助type inference</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">text: <span class="built_in">string</span></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'primitive type: void'</span>, text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.never，这里粗略带过，与void所不同的是，void表示函数会把执行权力给移交出去，但是不具有返回值；而never表示的是函数永远执行，不返回。同时，typescript对于never的实现还不完善。比如下面这个例子如果把type annotations给去掉，借助typescript的type inference的话，那么会被推断为void。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">taskName: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'run'</span>, taskName);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.enum类型，话不多说，直接看例子：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">  Paid,</span><br><span class="line">  Sending,</span><br><span class="line">  Cancel,</span><br><span class="line">  Completed</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> status: Status = Status.Paid; <span class="comment">// status == 0</span></span><br></pre></td></tr></table></figure><p>枚举默认从0开始，但是也可进行修改：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">  Paid = <span class="number">1</span>,</span><br><span class="line">  Sending,</span><br><span class="line">  Cancel,</span><br><span class="line">  Completed</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> status = Status.Sending;  <span class="comment">// status == 2</span></span><br></pre></td></tr></table></figure><p>也可以我都要插一手:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Status &#123;</span><br><span class="line">  Paid = <span class="number">1</span>,</span><br><span class="line">  Sending = <span class="number">2</span>,</span><br><span class="line">  Cancel,</span><br><span class="line">  Completed = <span class="number">5</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s1: Status = Status.Cancel; <span class="comment">// s1 == 3</span></span><br></pre></td></tr></table></figure><p><strong>5.interface是啥子：An interface is a contract that defines a type with a collection of property and method definitions without any implementation。注意对于方法而言，interface无需实现。</strong></p><p>使用interface所定义的类型去声明变量的时候，如果约定的东西和实际赋值的东西不同的话那么则会报错。</p><p><strong>interface之optional properties:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> OrderDetail &#123;</span><br><span class="line">  price: <span class="built_in">number</span>;</span><br><span class="line">  amount: <span class="built_in">number</span>;</span><br><span class="line">  buyDate?: <span class="built_in">Date</span>;       <span class="comment">// 这是一个可选参数</span></span><br><span class="line">  getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>function之optional param:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">s1?: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> s = s1 || <span class="string">'afk'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>interface之readonly properties:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Product &#123;</span><br><span class="line">  readonly name: <span class="built_in">string</span>;</span><br><span class="line">  price?: <span class="built_in">number</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p1: Product = &#123;</span><br><span class="line">  name: <span class="string">'loyalty'</span>,</span><br><span class="line">  price: <span class="number">0.1</span></span><br><span class="line">&#125;;</span><br><span class="line">p1.name = <span class="string">'someOther'</span>;  <span class="comment">// error</span></span><br></pre></td></tr></table></figure><p><strong>interface之extending interfaces:Interfaces can extend other interfaces so that they inherit all the properties and methods from its parent. 看个例子：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Product &#123;</span><br><span class="line">  price: <span class="built_in">number</span>;</span><br><span class="line">  amount: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A <span class="keyword">extends</span> Product &#123;</span><br><span class="line">  discount: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a: A = &#123;</span><br><span class="line">  price: <span class="number">10</span>,</span><br><span class="line">  amount: <span class="number">3</span>,</span><br><span class="line">  discount: <span class="number">0.1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>6.type关键字定义一个类型，啥我都当，如下所示：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> getTotal = <span class="function">(<span class="params">discount: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;   <span class="comment">// type关键字指代函数类型</span></span><br></pre></td></tr></table></figure><p>type aliases can also define the shape of an object.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Product = &#123;</span><br><span class="line">  name: <span class="built_in">string</span>,</span><br><span class="line">  unitPrice: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.typescript中的class，有点像interface和type，如下所示:</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Product &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  price: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Product();</span><br><span class="line">p.name = <span class="string">'aha'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(p.name, p.price); <span class="comment">// aha undefined</span></span><br></pre></td></tr></table></figure><p>从上面也有一个疑问，引入了类型，但是price类型是number，输出却是undefined？其实，在typescript里面像下面这样定义也是行的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> a: <span class="literal">null</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">type</span> O = &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> o: O = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(o.name);</span><br></pre></td></tr></table></figure><p>这一点，很让人失望。</p><p><strong>class之implementing interfaces，有什么好处暂时也不知道：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IOrderDetail &#123;</span><br><span class="line">  product: Product;</span><br><span class="line">  quantity: <span class="built_in">number</span>;</span><br><span class="line">  getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> OrderDetail <span class="keyword">implements</span> IOrderDetail &#123;</span><br><span class="line">  product: Product;</span><br><span class="line">  quantity: <span class="built_in">number</span>;</span><br><span class="line">  getTotal(discount: <span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.quantity;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>class之extend class，举例如下所示：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">  job: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IChild &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">  meta: IChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Child();</span><br><span class="line"><span class="built_in">console</span>.log(c.job, c.meta); <span class="comment">// undefined undefined</span></span><br></pre></td></tr></table></figure><p>如果父类中含有构造函数的话，那么子类也会将constructor给继承过来：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> job: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IChild &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">  c: IChild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c: Child = <span class="keyword">new</span> Child(<span class="string">'oooo'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.job);</span><br></pre></td></tr></table></figure><p>由于将父类的constructor也给继承过来了，所以在new的时候如果不传入参数的话将会报错。</p><p>如果子类也实现了constructor的话，那么必须调用super方法。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Parent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> job: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> IChild &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> Parent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> c: IChild, <span class="keyword">public</span> job: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p: IChild = &#123;</span><br><span class="line">  name: <span class="string">'3h'</span>,</span><br><span class="line">  age: <span class="number">23</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Child(p, <span class="string">'orange'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(c.job, c.c);  <span class="comment">// 输出 orange &#123; name: '3h', age: 23 &#125;</span></span><br></pre></td></tr></table></figure><p><strong>class之abstract classes:</strong></p><p>关于定义：Abstract classes are a special type of class that can only be inherited from and not instantiated，可以看一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> AClass &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">abstract</span> fun(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> AClass &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    fun(): <span class="built_in">void</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> Child(<span class="string">'3h'</span>, <span class="number">23</span>);</span><br></pre></td></tr></table></figure><p><strong>class之Access modifiers:</strong></p><p>对于一个类中所定义的方法和属性来说，访问权限都是默认为public的。这意味着这些属性以及方法在实例中以及子类下都是可访问的。同时，我们也可以显式的使用Access modifiers，只需要在属性名或者方法名之前加上Access modifiers谓词即可。</p><p>Access modifiers之private：这意味属性成员或者方法成员只能在class里面访问到，在class instance和child class中是无法访问到的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> OrderDetail &#123;</span><br><span class="line">    <span class="keyword">public</span> price: <span class="built_in">number</span>;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> deleted: <span class="built_in">boolean</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">delete</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.deleted = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = <span class="keyword">new</span> OrderDetail();</span><br><span class="line">o.delete();</span><br><span class="line"><span class="comment">// o.deleted; // 像这样访问会报错</span></span><br></pre></td></tr></table></figure><p><strong>class之Property setters and getters:</strong></p><p>我们可以对property应用一个getter方法和setter方法，对于class的private属性来说这将会变得特别有用，下面是一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span>='3h', <span class="keyword">private</span> _age:<span class="built_in">number</span>=0</span>) &#123;&#125;</span><br><span class="line">  <span class="keyword">get</span> age(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> age(value: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._age = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(c.name, c.age); <span class="comment">// 3h 0</span></span><br><span class="line">c.age++;</span><br><span class="line"><span class="built_in">console</span>.log(c.age); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><strong>class之static：</strong></p><p>我们可以对property和methods使用static，这表明这些被声明为static的property以及methods都是属于class自身的，因此在static方法内部是访问不到类实例的，下面介绍一个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> MyClass &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>='3h'</span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> getName(): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.myName);     <span class="comment">// 提示报错，在MyClass对象上找不到该属性</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> myName: <span class="built_in">string</span>=<span class="string">'haha'</span>;     <span class="comment">// 加上这行的话，则上面就不会报错了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="built_in">console</span>.log(c.name);</span><br><span class="line">MyClass.getName();</span><br></pre></td></tr></table></figure><p><strong>8.typescript工程中的模块机制：默认情况下，你在A文件顶部作用域中所定义的变量都会被挂载到全局作用域中，除非你使用export关键字导出。因此这就造成了一个情况：如果你在A文件中定义了一个interface A的话，并且没有export的话，那么你在B文件中直接使用interface A也不会报错，因为他被挂载到了全局作用域之下。而这就造成了一个问题，那就是容易造成命名冲突问题。</strong></p><p><strong>9.turple之open-ended turples</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"><span class="keyword">let</span> s1: Scores = [<span class="string">'blue'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> s2: Scores = [<span class="string">'mj'</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br></pre></td></tr></table></figure><p><strong>10.turple function parameters之作为函数的参数处理，避免js自身利用rest参数作为函数参数的不足。</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">string</span>, ...number[]];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">...param: Scores</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;</span><br><span class="line">fun()</span><br></pre></td></tr></table></figure><p><strong>11.对于spread运算符来说，可以先看看js和ts的不同之处：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">fun(...scores);</span><br></pre></td></tr></table></figure><p>对于上面这个例子，在js中是能够正常运行的。但是在typescript中，同样的代码，则会报错。那么在typescript中，如何在函数中使用spread操作符呢？稍作修改，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> scores: [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">fun(...scores);</span><br></pre></td></tr></table></figure><p><strong>12.empty tuple，如果一个tuple被声明为空的话，那么便不可以具备值，如下所示：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> EmptyTuple = [];</span><br><span class="line"><span class="keyword">let</span> empty: EmptyTuple = []; <span class="comment">// ok</span></span><br><span class="line"><span class="keyword">let</span> notEmpty: EmptyTuple = [<span class="string">'str'</span>]; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple的这项特性可以用在union type上面，如下所示</span></span><br><span class="line"><span class="keyword">type</span> Less3 = [] | [<span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>] | [<span class="built_in">number</span>, <span class="built_in">number</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">const</span> one: Less3 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> zero: Less3 = [];</span><br><span class="line"><span class="keyword">const</span> err: Less3 = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p><strong>13.tuple之optional tuple elements:</strong></p><p>需要注意的是，可选参数需要放在最后面。可选参数后面要是有非可选参数的话，那么将会发生错误。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">number</span>, <span class="built_in">number</span>?, <span class="built_in">number</span>?];</span><br><span class="line"><span class="keyword">let</span> one: Scores = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> two: Scores = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> four: Scores = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数的后面不能够出现非可选参数</span></span><br><span class="line"><span class="keyword">type</span> Scores = [<span class="built_in">number</span>?, <span class="built_in">number</span>?, <span class="built_in">number</span>]; <span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选参数的tuple在函数中的作用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logScores</span>(<span class="params">...scores: Scores</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(scores);</span><br><span class="line">&#125;</span><br><span class="line">logScores(<span class="number">1</span>); <span class="comment">// 输出 [1]</span></span><br></pre></td></tr></table></figure><p><strong>14.unknown type</strong>：在typescript3出来之前，对于不确定的属性一般都是使用any来定义变量的，但是如果使用了any的话，那么将用不上typescript的类型检查了。所以使用any是不到万不得已尽量是不要使用的，但是typescript3的unknown类型，在带来了不确定类型的场景使用下，还带来了类型检查，因此建议使用unknown类型替代any。</p><p>一个应用场景，利用unknown type来实现type guard。（测试下来好像和unknown没什么用，都是type guard的功劳）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> typeCheck = (obj: <span class="built_in">any</span>): obj is &#123; firstName: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125; =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'firstName'</span> <span class="keyword">in</span> obj &amp;&amp; <span class="string">'age'</span> <span class="keyword">in</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">param: unknown</span>): <span class="title">void</span> </span>&#123;      <span class="comment">// 换成any好像也有用，所以type guard才是大功臣</span></span><br><span class="line">  <span class="keyword">if</span>(typeCheck(param)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param.name, param.age);   <span class="comment">// 在param.name那里会有报错提示</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于上面的typeCheck函数，也可以重写成下面这样方便理解</span></span><br><span class="line"><span class="keyword">type</span> TypeA = &#123; firstName: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> typeCheck = (obj: <span class="built_in">any</span>): obj is TypeA =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'firstName'</span> <span class="keyword">in</span> obj &amp;&amp; <span class="string">'age'</span> <span class="keyword">in</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>15.Type narrowing with a type assertion：好像也和unknown没什么关系，还是多亏了类型断言。如下所示：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Big = &#123; name: <span class="built_in">string</span>; age: <span class="built_in">number</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">obj: unknown</span>): <span class="title">void</span> </span>&#123;        <span class="comment">// 换成any也行</span></span><br><span class="line">  <span class="built_in">console</span>.log((obj <span class="keyword">as</span> Big).firstName);    <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;window.pageYOffset || document.documentElement.scrollTop获取滑动距离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;1.问题一：typescript既有type annotati
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://yoursite.com/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>利用原生JS实现的v-model</title>
    <link href="http://yoursite.com/2019/05/16/%E5%88%A9%E7%94%A8%E5%8E%9F%E7%94%9FJS%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E7%9A%84v-model/"/>
    <id>http://yoursite.com/2019/05/16/利用原生JS实现简易的v-model/</id>
    <published>2019-05-16T00:06:10.000Z</published>
    <updated>2019-05-19T13:02:59.487Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如何获取页面滑动高度？使用window.pageYOffset或者document.documentElement.scrollTop</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: a1 &#125;  = obj;</span><br><span class="line">a1 === <span class="number">1</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>重点：实现事件发布订阅模式+实现数据代理</p><h3 id="1-先介绍怎么利用Proxy实现数据代理功能"><a href="#1-先介绍怎么利用Proxy实现数据代理功能" class="headerlink" title="1.先介绍怎么利用Proxy实现数据代理功能"></a>1.先介绍怎么利用Proxy实现数据代理功能</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span> <span class="attr">id</span>=<span class="string">"count"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"inc"</span>&gt;</span>加一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"dec"</span>&gt;</span>减一<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">window.addEventListener('DOMContentLoaded', () =&gt; &#123;</span><br><span class="line">  let count = document.getElementById('count');</span><br><span class="line">  let inc = document.getElementById('inc');</span><br><span class="line">  let dec = document.getElementById('dec');</span><br><span class="line"></span><br><span class="line">  let source = &#123; count: 1 &#125;;</span><br><span class="line"></span><br><span class="line">  let render = value =&gt; &#123;</span><br><span class="line">    count.innerHTML = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let options = &#123;</span><br><span class="line">    set: function (target, property, value) &#123;</span><br><span class="line">      target[property] = value;</span><br><span class="line">      render(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  let proxy = new Proxy(source, options);</span><br><span class="line"></span><br><span class="line">  inc.addEventListener('click', () =&gt; &#123;</span><br><span class="line">    proxy.count++;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  dec.addEventListener('click', () =&gt; &#123;</span><br><span class="line">    proxy.count--;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如上所示，我们使用了Proxy来代理source对象，所有作用于Proxy实例上的变化都会同步转发到被代理的source的对象上面。</p><h3 id="2-JS实现发布订阅者模式"><a href="#2-JS实现发布订阅者模式" class="headerlink" title="2.JS实现发布订阅者模式"></a>2.JS实现发布订阅者模式</h3><p>事件发布订阅者模式三大角色：事件调度中心，发布者，订阅者。解决了高度耦合的问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">  handlers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 订阅事件 */</span></span><br><span class="line">  addEventListener(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(type <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.handlers[type] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type].push(handler);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 发布事件 */</span></span><br><span class="line">  dispatchEvent(type, ...params) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(type <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'还没有注册该事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.handlers[type].forEach(<span class="function"><span class="params">handler</span> =&gt;</span> &#123;</span><br><span class="line">      handler(...params);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 移除事件监听器 */</span></span><br><span class="line">  removeEvent(type, handler) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(type <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'还没有注册该事件'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!handler) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.handlers[type];</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="keyword">this</span>.handlers[type].findIndex(ele == handler);</span><br><span class="line">    <span class="keyword">this</span>.handlers[type].splice(idx, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handlers[type].length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.handlers[type];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> event = <span class="keyword">new</span> Event();</span><br><span class="line"><span class="keyword">let</span> load = <span class="function"><span class="params">params</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'load'</span>, params); &#125;</span><br><span class="line"><span class="keyword">let</span> load2 = <span class="function"><span class="params">params</span> =&gt;</span> &#123; <span class="built_in">console</span>.log(<span class="string">'load2'</span>, params); &#125;</span><br><span class="line">event.addEventListener(<span class="string">'load'</span>, load);</span><br><span class="line">event.addEventListener(<span class="string">'load'</span>, load2);</span><br><span class="line">event.dispatchEvent(<span class="string">'load'</span>, <span class="string">'params is this'</span>);  <span class="comment">// load params is this 换行 load2 params is this</span></span><br></pre></td></tr></table></figure><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3.代码实现"></a>3.代码实现</h3><p>正题介绍，如何实现一个简易的vue，实现类似v-model的功能。</p><p>分析：获取需要进行监听的属性，对这几个属性进行代理。一旦发生变化，那么通知变化处理方法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">v-model</span>=<span class="string">"input"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</span></span><br><span class="line"><span class="undefined">      handlers = [];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      addEventListener = <span class="function">(<span class="params">type, handler</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(!(type <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.handlers[type] = [];</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.handlers[type].push(handler);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      dispatchEvent = <span class="function"><span class="params">type</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (!(type <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'未注册该类型的事件'</span>);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.handlers[type].map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">              item.updateUI();</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">UIHandler</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">constructor</span>(dom, property, attr, proxyObj) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.dom = dom;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.property = property;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.attr = attr;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.proxyObj = proxyObj;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      updateUI = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.dom[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.proxyObj[<span class="keyword">this</span>.property]+<span class="string">'??'</span>;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="class"><span class="keyword">class</span> <span class="title">MyVue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">constructor</span>(elementId, data) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.event = <span class="keyword">new</span> Event();</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$data = <span class="keyword">new</span> <span class="built_in">Proxy</span>(data, <span class="keyword">this</span>.proxyOption);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.init(elementId);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">      proxyOption = &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">get</span>: (target, property) =&gt; &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> target[property];</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="javascript">          <span class="keyword">set</span>: (target, property, value) =&gt; &#123;</span></span><br><span class="line"><span class="undefined">              target[property] = value;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.event.dispatchEvent(property);</span></span><br><span class="line"><span class="javascript">              <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      init = <span class="function"><span class="keyword">function</span>(<span class="params">elementId</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> root = <span class="built_in">document</span>.getElementById(elementId);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> childs = <span class="built_in">Array</span>.from(root.children);</span></span><br><span class="line"><span class="javascript">          childs.map(<span class="function"><span class="params">dom</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span>(dom.hasAttribute(<span class="string">'v-model'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.vModelHandler(dom);</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">          &#125;)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="comment">/** 对于v-model来说，要实现的是输入实时改变UI，同时同步更新代理数据 */</span></span></span><br><span class="line"><span class="javascript">      vModelHandler = <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> property = dom.getAttribute(<span class="string">'v-model'</span>);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> watcher = <span class="keyword">new</span> UIHandler(dom, property, <span class="string">'value'</span>, <span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.event.addEventListener(property, watcher);</span></span><br><span class="line"><span class="javascript">          dom.addEventListener(<span class="string">'input'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>.$data[property] = dom.value;</span></span><br><span class="line"><span class="javascript">          &#125;);                                     <span class="comment">// 同步数据处理</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> MyVue(</span></span><br><span class="line"><span class="javascript">          <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">          &#123;</span></span><br><span class="line"><span class="javascript">              input: <span class="string">'aha'</span></span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      );</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如何获取页面滑动高度？使用window.pageYOffset或者document.documentElement.scrollTop&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>图片懒加载</title>
    <link href="http://yoursite.com/2019/05/14/%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>http://yoursite.com/2019/05/14/图片懒加载/</id>
    <published>2019-05-14T00:21:14.000Z</published>
    <updated>2019-05-17T13:57:42.773Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原生JS操作class，element.classList.add(className):添加类名；element.classList.remove(className):删除类名</p></blockquote><h3 id="1-结构示例代码："><a href="#1-结构示例代码：" class="headerlink" title="1.结构示例代码："></a>1.结构示例代码：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片懒加载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"图片懒加载测试"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"多种方法结合进行测试"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">            *, html, body &#123;</span></span><br><span class="line"><span class="undefined">                margin: 0;</span></span><br><span class="line"><span class="undefined">                padding: 0;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            html, body &#123;</span></span><br><span class="line"><span class="undefined">                width: 100vw;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            img &#123;</span></span><br><span class="line"><span class="undefined">                width: 100%;</span></span><br><span class="line"><span class="undefined">                min-height: 300px;  // 注意最好指定一个min-height，否则在图片加载进来之前高度值就是0</span></span><br><span class="line"><span class="undefined">                height: auto;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./1.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./3.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./4.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./5.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./6.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./7.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./8.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./9.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./10.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>假设上面的每一张图片的大小都大概2MB左右，对于上面这样的head中写inline style加上body中写inline script的写法并不会阻塞parse html阶段，DOMContentLoaded事件&gt;onload&gt;FirstPaint事件。</p><p>最严重的问题是FirstPaint被触发的时机太晚了，这将造成非常不好的用户体验，因此有必要进行图片懒加载。下面介绍一下实现懒加载的几种方法：</p><h3 id="2-API-getBoundingClientRect"><a href="#2-API-getBoundingClientRect" class="headerlink" title="2.API getBoundingClientRect"></a>2.API getBoundingClientRect</h3><p>这个API返回一个DOMRect对象，该对象包含了一组用于描述边框的只读属性-left，top，right，bottom，单位为像素，除了width和height外的属性之外都是相对于视口的左上角位置而言的。</p><p><img src="https://mdn.mozillademos.org/files/15087/rect.png" alt="getBoundingClientRect返回值的示例图"></p><h3 id="2-1-getBoundingClientRect会返回元素盒子的width和height，那么它是什么盒子？"><a href="#2-1-getBoundingClientRect会返回元素盒子的width和height，那么它是什么盒子？" class="headerlink" title="2-1. getBoundingClientRect会返回元素盒子的width和height，那么它是什么盒子？"></a>2-1. getBoundingClientRect会返回元素盒子的width和height，那么它是什么盒子？</h3><p>是border-box.举例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  padding: 20px;</span></span><br><span class="line"><span class="undefined">  border: 10px solid transparent;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> t = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'.test'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">'t.getBoundingClientRect().width'</span>, t.getBoundingClientRect().width);  <span class="comment">// 输出360</span></span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样的对于上面这样的代码，但是对test的样式新增加一行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么此时利用element.getBoundingClientRect()所获取到的width就是300了。</p><h3 id="3-正题，使用getBoundingClientRect这个API来完成懒加载功能："><a href="#3-正题，使用getBoundingClientRect这个API来完成懒加载功能：" class="headerlink" title="3.正题，使用getBoundingClientRect这个API来完成懒加载功能："></a>3.正题，使用getBoundingClientRect这个API来完成懒加载功能：</h3><p>使用前面的HTML结构，script脚本如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/script"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> globalVariable = &#123;&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 检查某个DOM元素是否在可视区域内 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkDomInView</span> (<span class="params">dom</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> result = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!dom) <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> obj = dom.getBoundingClientRect();</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 这里只判断了纵轴方向，并且出于想尽快加载图片的考虑，因此还加了500</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (obj.top &gt;= <span class="number">0</span> &amp;&amp; obj.bottom &lt;= globalVariable.screenHeight+<span class="number">500</span>) &#123;</span></span><br><span class="line"><span class="javascript">        result = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> result;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 给未加载的图片进行src赋值 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setSrc</span> (<span class="params">dom</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> src = dom.getAttribute(<span class="string">'data-src'</span>) || <span class="string">'#'</span>;</span></span><br><span class="line"><span class="javascript">    dom.setAttribute(<span class="string">'src'</span>, src);</span></span><br><span class="line"><span class="javascript">    dom.classList.remove(<span class="string">'lazyloadImg'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 检查图片是否需要进行懒加载，如果需要的话，进行懒加载 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">lazyload</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgs = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">'.lazyloadImg'</span>));</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (!imgs || imgs.length == <span class="number">0</span>) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> img = imgs[i];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (checkDomInView(img)) &#123;                  <span class="comment">// 图片已经进入视区里面了</span></span></span><br><span class="line"><span class="undefined">            setSrc(img);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 节流包装方法 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span> (<span class="params">fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        canRun = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            fn &amp;&amp; fn();</span></span><br><span class="line"><span class="javascript">            canRun = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">        &#125;, 500)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  globalVariable.screenWidth = <span class="built_in">window</span>.screen.width;</span></span><br><span class="line"><span class="javascript">  globalVariable.screenHeight = <span class="built_in">window</span>.screen.height;</span></span><br><span class="line"><span class="undefined">  lazyload();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.addEventListener(<span class="string">'scroll'</span>, throttle(lazyload));</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  globalVariable.screenWidth = <span class="built_in">window</span>.screen.width;</span></span><br><span class="line"><span class="javascript">  globalVariable.screenHeight = <span class="built_in">window</span>.screen.height;</span></span><br><span class="line"><span class="undefined">  lazyload();</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的地方：最好给img的样式表现设置一个最小高度。上面这个例子只是考虑了纵轴方向上的懒加载，如果需要实现横轴上的话，那么就用left和right去进行比较。</p><h3 id="4-使用API：IntersectionObserver"><a href="#4-使用API：IntersectionObserver" class="headerlink" title="4.使用API：IntersectionObserver"></a>4.使用API：IntersectionObserver</h3><p>同样是使用上面的HTML结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 检查元素是否出现在可视区域里面 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkDomInView</span> (<span class="params">eleArr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!eleArr) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">  eleArr.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (item.isIntersecting) &#123;        <span class="comment">// isIntersecting为true或者intersectionRatio&gt;0都能够表示可见</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> dom = item.target;</span></span><br><span class="line"><span class="undefined">      dom.src = dom.dataset.src;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.oio.unobserve(dom);      <span class="comment">// 已经达到了监听的目标后那就无需在继续监听了</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> imgs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.lazyloadImg'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!imgs) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.oio = <span class="keyword">new</span> IntersectionObserver(checkDomInView, &#123; <span class="attr">rootMargin</span>: <span class="string">'300px 0px'</span> &#125;); <span class="comment">// 增大root的观察区域，以便提前加载图片</span></span></span><br><span class="line"><span class="javascript">  imgs.forEach(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.oio.observe(img);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>稍微提一下关于IntersectionObserver API，上面使用到的intersectionRatio 表示的意思是指被观察元素和root元素重叠的区域的一个比例值；而isIntersecting就是表示被观察元素相对root元素是否可见。兼容性问题特别不好，因此需要引入polyfill。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原生JS操作class，element.classList.add(className):添加类名；element.classList.remove(className):删除类名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-结构示例代
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FirstPaint</title>
    <link href="http://yoursite.com/2019/05/07/FirstPaint/"/>
    <id>http://yoursite.com/2019/05/07/FirstPaint/</id>
    <published>2019-05-07T09:26:16.000Z</published>
    <updated>2019-05-13T12:42:40.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>JS阻止冒泡：event.stopPropagation()，一个事实，Parse HTML和evaluate script不会互相阻塞。</p></blockquote><h3 id="1-问题一：页面基本渲染流程是什么样的？"><a href="#1-问题一：页面基本渲染流程是什么样的？" class="headerlink" title="1.问题一：页面基本渲染流程是什么样的？"></a>1.问题一：页面基本渲染流程是什么样的？</h3><p>当我们在浏览器输入一个域名后接下来执行哪些流程？可以看一下下面这张图来加强理解：</p><p><img src="https://img.vim-cn.com/5e/bd88a806c3f5f5cc4392f68081357ae1371fe4.png" alt="根据域名获取资源的流程"></p><p>挑几个重点的（看得懂英文单词）进行解释，1.DNS查询，获取表示该资源的域名所在机器的IP地址；2.SSL阶段，如果走的是HTTPS协议的话，那么就需要验证HTTPS证书的有效性，这时会处于SSL阶段；3.Request Send阶段，此时浏览器会发起Request Send事件；4.TTFB阶段，TTFB的全称叫做Time To First Byte，是指当浏览器发起请求后开始收到第一个字节的等待时间，TTFB反映出了服务端对请求的响应能力，对于TTFB可以这样打个比方加强理解：A向B问了一个问题，B思考了3S之后，开始回答给A听，这里的3S就相当于TTFB时间。5.Content Download阶段，很显然就是字面意思上面所说的那样，就是响应数据的下载时间。</p><p>当浏览器接收到请求数据后，会触发receive response，然后在触发receive data事件，接着触发finish loading事件。当触发finish loading之后，如果是HTML文档的话，那么接着执行Parse HTML事件，对于HTML文档来说，通常还会有一些外部资源比如css文档和js脚本文件，那么此时又重复之前的步骤，send request , receive response , receive data , 如果是接收到的文件<strong>是css文件的话，那么是在触发receive data事件之后便开始执行Parse Stylesheet阶段，在Parse Stylesheet阶段完成后，才会触发finish loading事件。</strong></p><p>如果接收到的文件是js文件的话，那么接下来和HTML一样，receive response -&gt; receive data -&gt; finish loading -&gt; evaluate script。</p><h3 id="2-问题三：DOMContentLoaded和onLoad事件分别在什么时机被触发？"><a href="#2-问题三：DOMContentLoaded和onLoad事件分别在什么时机被触发？" class="headerlink" title="2.问题三：DOMContentLoaded和onLoad事件分别在什么时机被触发？"></a>2.问题三：DOMContentLoaded和onLoad事件分别在什么时机被触发？</h3><p>DOMContentLoaded事件一般在parse HTML过程完成后被触发（解析到了HTML文档的末尾）。onLoad一般需要等到外部资源也已经加载完成了的时候触发。</p><h3 id="3：-DOMContentLoaded和onload事件一般是谁写被触发？"><a href="#3：-DOMContentLoaded和onload事件一般是谁写被触发？" class="headerlink" title="3： DOMContentLoaded和onload事件一般是谁写被触发？"></a>3： DOMContentLoaded和onload事件一般是谁写被触发？</h3><p>正常生产情况大部分都是DOMContentLoaded事件先被触发。但是也不一定，当浏览器finish loading HTML文档后，接着会开始parse HTML，但是呢，parse HTML并不是直接就到HTML文档结尾的，而是分阶段的：先parse HTML到<script>if ('serviceWorker' in navigator) {  navigator.serviceWorker.register('/sw.js?t=1559746661551')    .then(function () {console.log('ServiceWorker Register Successfully.')})    .catch(function (e) {console.error(e)});}</script>然后停止，然后在继续从终止的地方继续parse HTML到末尾。前面也提到了DOMContentLoaded事件是parse html到了末尾才会可能被触发，如果解析到body都还没有发现外部引用资源的话，那么自然就是先触发onload事件，接着触发DOMContentLoaded事件。</p><h3 id="3-1：DOMContentLoaded和onload事件，谁先被触发，谁的callback就先被执行吗？"><a href="#3-1：DOMContentLoaded和onload事件，谁先被触发，谁的callback就先被执行吗？" class="headerlink" title="3-1：DOMContentLoaded和onload事件，谁先被触发，谁的callback就先被执行吗？"></a>3-1：DOMContentLoaded和onload事件，谁先被触发，谁的callback就先被执行吗？</h3><p>Chrome下测试结果，哪怕先触发onload事件，DOMContentLoaded的回调方法也一定会先比onload事件的回调方法更早执行。</p><h3 id="4-问题四：内嵌css和外部css的流程有什么区别？"><a href="#4-问题四：内嵌css和外部css的流程有什么区别？" class="headerlink" title="4.问题四：内嵌css和外部css的流程有什么区别？"></a>4.问题四：内嵌css和外部css的流程有什么区别？</h3><p>对于内嵌CSS（写在页面HTML文件中的style标签内）来说，浏览器自然不会发起send request，receive response，receive data，finish loading这几个事件的，那么问题来了，会触发parse stylesheet事件吗？答案是不会的，而这就是内嵌CSS和外部CSS资源的区别之一。对于内嵌css来说，相关的事件有可能就只是recalculate style了。</p><h3 id="7-问题七：对于浏览器来说，哪些关键过程是单线程，哪些是多线程的？"><a href="#7-问题七：对于浏览器来说，哪些关键过程是单线程，哪些是多线程的？" class="headerlink" title="7.问题七：对于浏览器来说，哪些关键过程是单线程，哪些是多线程的？"></a>7.问题七：对于浏览器来说，哪些关键过程是单线程，哪些是多线程的？</h3><p>浏览器中的js解释器引擎是单线程的，浏览器内核本身是多线程的，每个页面通常都是由下面几个线程组成的：</p><ul><li>1.GUI渲染线程</li><li>2.js引擎线程</li><li>3.事件触发线程</li><li>4.异步HTTP线程</li><li>5.EventLoop轮询的处理线程</li></ul><h3 id="8：写在head里面的css-link是否会阻塞Parse-html过程？"><a href="#8：写在head里面的css-link是否会阻塞Parse-html过程？" class="headerlink" title="8：写在head里面的css link是否会阻塞Parse html过程？"></a>8：写在head里面的css link是否会阻塞Parse html过程？</h3><p><strong>本质：如果script阻塞页面的parse HTML的话，并且head里面有link标签的话，那么evaluate script就会在parse stylesheet之后</strong>。那么那些行为下的script会阻塞页面的parse HTML过程呢？head中的script，body中的script。但是需要注意的是，尽管在没有css的情况下，body中的inline script不会阻塞parse HTML过程，但是呢只要存在样式设置的话(inline style或者link)，那么此时会阻塞parse HTML过程，evaluate script会在parse stylesheet之后。同时，如果head中的inline script所出现的位置在link的后面的话，那么此时也会阻塞parse HTML过程，并且evaluate script会在parse stylesheet之后。</p><h3 id="8-1：在没有script的情况下，写在body里面css-link会阻塞parse-HTML吗？"><a href="#8-1：在没有script的情况下，写在body里面css-link会阻塞parse-HTML吗？" class="headerlink" title="8-1：在没有script的情况下，写在body里面css link会阻塞parse HTML吗？"></a>8-1：在没有script的情况下，写在body里面css link会阻塞parse HTML吗？</h3><p><strong>**会的，在没有script的情况下，写在body里面的css link会阻塞parse HTML过程</strong>，在说清楚一些，只是资源的网络加载过程阻塞了parse HTML的过程，当这些样式link的finish loading被触发之后的parse stylesheet是不会阻塞parse HTML的，两个工作流程之间并不会相互阻塞。同时parse HTML和recalculate style之间也是不会相互阻塞的。值得一提的是，如果有多个外部样式link的话，那么并不是每触发某个link的finish loading之后便会立马触发parse stylesheet过程。</p><h3 id="8-2：总结，对于下面的代码，考虑阻塞parse-HTML的情况："><a href="#8-2：总结，对于下面的代码，考虑阻塞parse-HTML的情况：" class="headerlink" title="8-2：总结，对于下面的代码，考虑阻塞parse HTML的情况："></a>8-2：总结，对于下面的代码，考虑阻塞parse HTML的情况：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;, 0);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="undefined">                resolve(1);</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(n);</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'1'</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'window onload'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'DOMContentLoaded'</span>);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 300px;</span></span><br><span class="line"><span class="undefined">                height: 300px;</span></span><br><span class="line"><span class="undefined">                margin: 10%;</span></span><br><span class="line"><span class="undefined">                border: 1px solid green;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="css">            <span class="selector-class">.out</span> &#123;</span></span><br><span class="line"><span class="undefined">                width: 1000px;</span></span><br><span class="line"><span class="undefined">                height: 1000px;</span></span><br><span class="line"><span class="undefined">                background: orange;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/findAndReplaceDOMText/0.4.6/findAndReplaceDOMText.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui-calendar/0.0.8/calendar.min.css" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/picnic/6.5.0/picnic.min.css" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/wingcss/0.1.9/wing.min.css" /&gt;</span></span><br><span class="line"><span class="comment">        &lt;link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/react-instantsearch-theme-algolia/4.5.2/style.min.css" /&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;style type="text/css"&gt;</span></span><br><span class="line"><span class="comment">            .container &#123;</span></span><br><span class="line"><span class="comment">                width: 300px;</span></span><br><span class="line"><span class="comment">                height: 300px;</span></span><br><span class="line"><span class="comment">                margin: 10%;</span></span><br><span class="line"><span class="comment">                border: 1px solid green;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            .out &#123;</span></span><br><span class="line"><span class="comment">                width: 1000px;</span></span><br><span class="line"><span class="comment">                height: 1000px;</span></span><br><span class="line"><span class="comment">                background: orange;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &lt;/style&gt; --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;link href="https://cdn.bootcss.com/twitter-bootstrap/4.3.1/css/bootstrap-grid.css" rel="stylesheet"&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"out"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;video src="https://gk-news.oss-cn-beijing.aliyuncs.com/20187220/%E9%BD%90%E8%80%81%E5%B8%88%20720p%E4%BF%AE%E6%94%B9.mp4"&gt;&lt;/video&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            a</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello script<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Chrome下情况大致如下：</p><table><thead><tr><th>测试场景</th><th>是否阻塞parse HTML</th><th>onload，DOMContentLoaded，First Paint谁先被触发</th><th>首先被触发的事件的触发时间</th><th>FirstPaint被触发时间</th></tr></thead><tbody><tr><td>没有js，head中写style标签</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~94ms</td><td>~105ms</td></tr><tr><td>没有js，head中写link</td><td>不阻塞</td><td>DOMContentLoaded &gt; onload &gt; FirstPaint</td><td>~86ms</td><td>~764ms</td></tr><tr><td>没有js，body中写style</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~59ms</td><td>~81ms</td></tr><tr><td>没有js，body中写link</td><td>阻塞</td><td>DOMContentLoaded &gt; FirstPaint &gt; onload</td><td>~524ms</td><td>~616ms</td></tr><tr><td>没有css，head中写inline script</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~59ms</td><td>~85ms</td></tr><tr><td>没有css，head中写script</td><td>阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~356ms</td><td>~366ms</td></tr><tr><td>没有css，body里面写inline script</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~85ms</td><td>~91ms</td></tr><tr><td>没有css，body里面写script</td><td>阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~361ms</td><td>~365ms</td></tr><tr><td>head中写style标签和inline script</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~81ms</td><td>~109ms</td></tr><tr><td>head中写style标签和script</td><td>阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~921ms</td><td>~927ms</td></tr><tr><td>head中写link标签和inline script</td><td>不阻塞</td><td>DOMContentLoaded &gt; onload &gt; FirstPaint</td><td>~88ms</td><td>~394ms</td></tr><tr><td>head中写link标签和script</td><td>阻塞</td><td>evaluate script 一定是会在 所link的css资源的parse stylesheet之后</td><td>~393ms</td><td>~399ms</td></tr><tr><td>body中写style标签和inline script</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>~73ms</td><td>~111ms</td></tr><tr><td>body中写style标签和script标签</td><td>阻塞</td><td>DOMContentLoaded &gt; onload &gt; FirstPaint</td><td>~357ms</td><td>~353ms</td></tr><tr><td>body中写link标签和inline script</td><td>阻塞</td><td>DOMContentLoaded &gt; onload &gt; FirstPaint</td><td>~395ms</td><td>~400ms</td></tr><tr><td>body中写link标签和script标签</td><td>阻塞</td><td>DOMContentLoaded &gt; onload &gt; FirstPaint</td><td>~425ms</td><td>~431ms</td></tr><tr><td>head中写link，body中script</td><td>阻塞</td><td>evaluate script 一定是会在 所link的css资源的parse stylesheet之后</td><td>未记录</td><td>未记录</td></tr><tr><td>head中写style，body中script</td><td>阻塞</td><td>recaluate style 通常会在 evaluate script之前</td><td>未记录</td><td>未记录</td></tr><tr><td>head中写link，body中inline script</td><td>evaluate script 会被link的css资源给阻塞</td><td>未记录</td><td>未记录</td></tr><tr><td>head中写style，body中inline script</td><td>不阻塞</td><td>onload &gt; DOMContentLoaded &gt; FirstPaint</td><td>未记录</td><td>未记录</td></tr></tbody></table><h3 id="问：为什么外部资源script不推荐写在head标签里面？"><a href="#问：为什么外部资源script不推荐写在head标签里面？" class="headerlink" title="问：为什么外部资源script不推荐写在head标签里面？"></a>问：为什么外部资源script不推荐写在head标签里面？</h3><p>默认的（不加async或者defer），那么不仅网络加载过程会阻塞parse HTML过程，而且当script资源的finish loading事件被触发后，其evaluate script过程也会阻塞parse HTML过程。</p><h3 id="10-问题10：parse-html和parse-stylesheet在浏览器中可以并发执行吗？"><a href="#10-问题10：parse-html和parse-stylesheet在浏览器中可以并发执行吗？" class="headerlink" title="10.问题10：parse html和parse stylesheet在浏览器中可以并发执行吗？"></a>10.问题10：parse html和parse stylesheet在浏览器中可以并发执行吗？</h3><p>可以的，他们之间不会互相阻塞。evaluate script也可以不阻塞parse stylesheet。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;JS阻止冒泡：event.stopPropagation()，一个事实，Parse HTML和evaluate script不会互相阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-问题一：页面基本渲染流程是什么样的？&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>深入理解margin</title>
    <link href="http://yoursite.com/2019/04/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3margin/"/>
    <id>http://yoursite.com/2019/04/27/深入理解margin/</id>
    <published>2019-04-27T03:44:16.000Z</published>
    <updated>2019-05-06T00:58:28.628Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>原生js，使用offsetWidth，offsetHeight来获取元素的border-box尺寸；使用clientWidth，clientHeight来获取元素的content-box尺寸。</p></blockquote><h3 id="问题一：margin能够改变元素尺寸？"><a href="#问题一：margin能够改变元素尺寸？" class="headerlink" title="问题一：margin能够改变元素尺寸？"></a>问题一：margin能够改变元素尺寸？</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"f"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.f</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  margin: -20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  margin: -20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面这样的代码来说，box f的content-box尺寸为300px-300px，但是对于box c的content-box的尺寸则为340px-300px。可以看出，margin是可以改变元素尺寸的，那么有着一个怎样的机制呢？<strong>只要元素的尺寸表现符合充分利用可用空间，无论是垂直方向还是水平方向，都可以利用margin来改变尺寸。</strong></p><h3 id="问题二：margin的百分比值"><a href="#问题二：margin的百分比值" class="headerlink" title="问题二：margin的百分比值"></a>问题二：margin的百分比值</h3><p>无论是设置水平方向还是垂直方向的margin，如果使用百分比单位的话，那么都是相对于父元素的宽度来进行计算的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;原生js，使用offsetWidth，offsetHeight来获取元素的border-box尺寸；使用clientWidth，clientHeight来获取元素的content-box尺寸。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;问
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>轮播图实现</title>
    <link href="http://yoursite.com/2019/04/26/%E8%BD%AE%E6%92%AD%E5%9B%BE%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/04/26/轮播图实现/</id>
    <published>2019-04-26T00:53:39.000Z</published>
    <updated>2019-04-27T03:23:27.491Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在全局作用域下使用关键字var所定义的变量会挂载到全局作用域下面；但是如果关键字let和const去定义一个变量的话那么就不会将其挂载到全局作用域下面。</p></blockquote><h3 id="1-通过css方式实现轮播"><a href="#1-通过css方式实现轮播" class="headerlink" title="1.通过css方式实现轮播"></a>1.通过css方式实现轮播</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250897209&amp;di=9f3f0f90962ec7a266df379146ba6d53&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F7%2F57ac3605353a8.jpg"</span> <span class="attr">alt</span>=<span class="string">"desc"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942222&amp;di=d5c2ff641738e31641f2d14014296363&amp;imgtype=0&amp;src=http%3A%2F%2Fpic50.nipic.com%2Ffile%2F20141017%2F13035204_161153741600_2.jpg"</span> <span class="attr">alt</span>=<span class="string">"desc"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942222&amp;di=b33e7d00c5cc92adde58a9a237c69506&amp;imgtype=0&amp;src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F202efff4f7e95e73eddf03bc1ac5432cf257c10e.jpg"</span> <span class="attr">alt</span>=<span class="string">"desc"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942221&amp;di=ca3bc55015797db7f08d8e053e83ab2c&amp;imgtype=0&amp;src=http%3A%2F%2Fnews.mydrivers.com%2FImg%2F20120217%2F2012021709492293.jpg"</span> <span class="attr">alt</span>=<span class="string">"desc"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942220&amp;di=b511fbeb99eab9e7882a11eab6f9d78e&amp;imgtype=0&amp;src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201408%2F27%2F103420lzrq3jcimigfjmuw.jpg"</span> <span class="attr">alt</span>=<span class="string">"desc"</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">  margin: 0;</span></span><br><span class="line"><span class="undefined">  padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 320px;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="undefined">  overflow: hidden;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">  margin: 10px auto;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">  list-style-type: none;</span></span><br><span class="line"><span class="undefined">  width: 1600px;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">  animation: banner 10s linear infinite;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li &#123;</span></span><br><span class="line"><span class="undefined">  float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">img &#123;</span></span><br><span class="line"><span class="undefined">  display: block;</span></span><br><span class="line"><span class="undefined">  width: 320px;</span></span><br><span class="line"><span class="undefined">  height: 240px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">@<span class="keyword">keyframes</span> banner &#123;</span></span><br><span class="line"><span class="undefined">  0% &#123;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  100% &#123;</span></span><br><span class="line"><span class="undefined">    left: -1280px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用纯css制作轮播的缺点在于无法和用户实现交互效果。适用于纯展示的场景里面。</p><h3 id="2-使用js进行交互"><a href="#2-使用js进行交互" class="headerlink" title="2.使用js进行交互"></a>2.使用js进行交互</h3><p>先看页面结构，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是页面结构 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imgList"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 指示点容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dotContainer"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  &lt;span class="arrow prev"&gt;&lt;&lt;/span&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"arrow next"</span>&gt;</span>&gt;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 这是页面的css --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">* &#123;</span></span><br><span class="line"><span class="undefined">    margin: 0;</span></span><br><span class="line"><span class="undefined">    padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.carousel</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 320px;</span></span><br><span class="line"><span class="undefined">    height: 240px;</span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    margin: 20px auto;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.carouselImg</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: block;</span></span><br><span class="line"><span class="undefined">    width: 320px;</span></span><br><span class="line"><span class="undefined">    height: 240px;</span></span><br><span class="line"><span class="undefined">    float: left;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.imgList</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    width: 2240px;</span></span><br><span class="line"><span class="undefined">    height: 240px;</span></span><br><span class="line"><span class="undefined">    top: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.arrow</span> &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">    font-weight: bold;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    top: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translateY(-50%);</span></span><br><span class="line"><span class="undefined">    z-index: 1;</span></span><br><span class="line"><span class="undefined">    cursor: pointer;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.prev</span> &#123;</span></span><br><span class="line"><span class="undefined">    left: 5px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.next</span> &#123;</span></span><br><span class="line"><span class="undefined">    right: 5px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.dotContainer</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    bottom: 10px;</span></span><br><span class="line"><span class="css">    <span class="comment">/* border: 2px solid red; */</span></span></span><br><span class="line"><span class="undefined">    left: 50%;</span></span><br><span class="line"><span class="undefined">    transform: translateX(-50%);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.dotClass</span> &#123;</span></span><br><span class="line"><span class="undefined">    display: inline-block;</span></span><br><span class="line"><span class="undefined">    font-size: 24px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    background-clip: content-box;</span></span><br><span class="line"><span class="undefined">    border-radius: 50%;</span></span><br><span class="line"><span class="undefined">    width: 5px;</span></span><br><span class="line"><span class="undefined">    height: 5px;</span></span><br><span class="line"><span class="undefined">    padding: 1px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    cursor: pointer;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.dotClassActive</span> &#123;</span></span><br><span class="line"><span class="undefined">    background: orange;</span></span><br><span class="line"><span class="undefined">    background-clip: content-box;</span></span><br><span class="line"><span class="undefined">    border-color: orange;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.dotClass</span>+<span class="selector-class">.dotClass</span> &#123;</span></span><br><span class="line"><span class="undefined">    margin-left: 3px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> animationDone = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> activeIndex = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> imgs = [</span></span><br><span class="line"><span class="javascript">    <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250897209&amp;di=9f3f0f90962ec7a266df379146ba6d53&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2F7%2F57ac3605353a8.jpg'</span>, <span class="comment">// -320</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942222&amp;di=d5c2ff641738e31641f2d14014296363&amp;imgtype=0&amp;src=http%3A%2F%2Fpic50.nipic.com%2Ffile%2F20141017%2F13035204_161153741600_2.jpg'</span>, <span class="comment">// -640</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942222&amp;di=b33e7d00c5cc92adde58a9a237c69506&amp;imgtype=0&amp;src=http%3A%2F%2Fi0.hdslb.com%2Fbfs%2Farticle%2F202efff4f7e95e73eddf03bc1ac5432cf257c10e.jpg'</span>, <span class="comment">// -960</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942221&amp;di=ca3bc55015797db7f08d8e053e83ab2c&amp;imgtype=0&amp;src=http%3A%2F%2Fnews.mydrivers.com%2FImg%2F20120217%2F2012021709492293.jpg'</span>, <span class="comment">// -1280</span></span></span><br><span class="line"><span class="javascript">    <span class="string">'https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556250942220&amp;di=b511fbeb99eab9e7882a11eab6f9d78e&amp;imgtype=0&amp;src=http%3A%2F%2Fattach.bbs.miui.com%2Fforum%2F201408%2F27%2F103420lzrq3jcimigfjmuw.jpg'</span>, <span class="comment">// -1600</span></span></span><br><span class="line"><span class="undefined">];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 设置imgList的初始left */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">initLeft</span> (<span class="params">dom</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgEle = <span class="built_in">document</span>.querySelector(<span class="string">'.carouselImg'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.imgWidth = imgEle.clientWidth;</span></span><br><span class="line"><span class="javascript">    dom.style.left = -<span class="built_in">window</span>.imgWidth + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 图片运动的动画方法 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params">interval, speed, dom, newLeft</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.animationDone = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> ((speed &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(dom.style.left) &lt; newLeft) || (speed &lt; <span class="number">0</span> &amp;&amp; <span class="built_in">parseInt</span>(dom.style.left) &gt; newLeft)) &#123;       <span class="comment">// 判断是否有运动的必要</span></span></span><br><span class="line"><span class="javascript">        dom.style.left = <span class="built_in">parseInt</span>(dom.style.left) + speed + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.animateId = setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            animate(interval, speed, dom, newLeft);</span></span><br><span class="line"><span class="undefined">        &#125;, interval);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;                                <span class="comment">// 说明已经运动到了指定的newLeft位置了</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.animationDone = <span class="literal">true</span>;        <span class="comment">// 已经完成轮播动画</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> doneLeft = <span class="built_in">parseInt</span>(dom.style.left);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (doneLeft &lt; -(imgs.length<span class="number">-2</span>) * <span class="built_in">window</span>.imgWidth) dom.style.left = -<span class="built_in">window</span>.imgWidth + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (doneLeft &gt; -<span class="built_in">window</span>.imgWidth) dom.style.left = -(imgs.length<span class="number">-2</span>) * <span class="built_in">window</span>.imgWidth + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 轮播运动事件调用方法，向左运动和向右运动需要区别对待处理 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">carouselRun</span> (<span class="params">dom, offset</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> currentLeft = <span class="built_in">parseInt</span>(<span class="built_in">document</span>.querySelector(<span class="string">'.imgList'</span>).style.left);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> speed = offset / <span class="number">10</span> / <span class="number">16</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> newLeft = currentLeft + offset;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    animate(10, speed, dom, newLeft);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 实现图片自动轮播，自动轮播是从左到右的 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">autoRun</span> (<span class="params">next</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.autoRunTid = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        next.click();</span></span><br><span class="line"><span class="undefined">    &#125;, 2000);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">stop</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  clearInterval(<span class="built_in">window</span>.autoRunTid);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> imgList = <span class="built_in">document</span>.querySelector(<span class="string">'.imgList'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> container = <span class="built_in">document</span>.querySelector(<span class="string">'.carousel'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> prev = <span class="built_in">document</span>.querySelector(<span class="string">'.prev'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> next = <span class="built_in">document</span>.querySelector(<span class="string">'.next'</span>);</span></span><br><span class="line"><span class="undefined">    imgs.push(imgs[0]); imgs.unshift(imgs[imgs.length-1]);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = imgs.length; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span></span><br><span class="line"><span class="javascript">        img.setAttribute(<span class="string">'src'</span>, imgs[i]);</span></span><br><span class="line"><span class="javascript">        img.setAttribute(<span class="string">'alt'</span>, <span class="string">`desc<span class="subst">$&#123;i&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">        img.setAttribute(<span class="string">'class'</span>, <span class="string">'carouselImg'</span>);</span></span><br><span class="line"><span class="undefined">        imgList.appendChild(img);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    initLeft(imgList);</span></span><br><span class="line"><span class="undefined">    initDot();</span></span><br><span class="line"><span class="undefined">    setActiveDot();</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    prev.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">window</span>.animationDone) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.activeIndex &lt; <span class="number">1</span>) &#123; <span class="built_in">window</span>.activeIndex = imgs.length<span class="number">-2</span>; &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> &#123; <span class="built_in">window</span>.activeIndex--; &#125;</span></span><br><span class="line"><span class="undefined">        setActiveDot();</span></span><br><span class="line"><span class="javascript">        carouselRun(imgList, <span class="built_in">window</span>.imgWidth);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    next.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="built_in">window</span>.animationDone) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.activeIndex &gt;= imgs.length<span class="number">-2</span>) &#123; <span class="built_in">window</span>.activeIndex = <span class="number">1</span>; &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span> &#123; <span class="built_in">window</span>.activeIndex++; &#125;</span></span><br><span class="line"><span class="undefined">        setActiveDot();</span></span><br><span class="line"><span class="javascript">        carouselRun(imgList, -<span class="built_in">window</span>.imgWidth);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    container.onmouseover = stop;</span></span><br><span class="line"><span class="javascript">    container.ommouseout = <span class="function"><span class="params">()</span> =&gt;</span> &#123;autoRun(next)&#125;;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 初始化指示点的状态 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">initDot</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> dotWrapper = <span class="built_in">document</span>.querySelector(<span class="string">'.dotContainer'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="comment">/** 1.生成指定个点 */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = imgs.length - <span class="number">2</span>; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> span = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span></span><br><span class="line"><span class="javascript">        span.setAttribute(<span class="string">'index'</span>, i+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">        span.setAttribute(<span class="string">'class'</span>, <span class="string">'dotClass'</span>);</span></span><br><span class="line"><span class="undefined">        dotWrapper.appendChild(span);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">/** 设置处于焦点状态的指示点 */</span></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">setActiveDot</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> dotAll = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'dotClass'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = dotAll.length; i &lt; len; i++) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> classList = dotAll[i].classList;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (classList.contains(<span class="string">'dotClassActive'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            classList.remove(<span class="string">'dotClassActive'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">break</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    dotAll[<span class="built_in">window</span>.activeIndex<span class="number">-1</span>].classList.add(<span class="string">'dotClassActive'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在全局作用域下使用关键字var所定义的变量会挂载到全局作用域下面；但是如果关键字let和const去定义一个变量的话那么就不会将其挂载到全局作用域下面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-通过css方式实现轮播&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="效果" scheme="http://yoursite.com/tags/%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>好吧,EventLoop</title>
    <link href="http://yoursite.com/2019/04/25/%E5%A5%BD%E5%90%A7-EventLoop/"/>
    <id>http://yoursite.com/2019/04/25/好吧-EventLoop/</id>
    <published>2019-04-25T00:56:20.000Z</published>
    <updated>2019-04-27T03:42:32.520Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yanceyleo.com/p/5cbc0ad8ec9b0f4eac13467e" target="_blank" rel="noopener">详情请参考该篇博文</a></p><h3 id="几个问题："><a href="#几个问题：" class="headerlink" title="几个问题："></a>几个问题：</h3><p>下面这两种代码有什么不同？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, <span class="string">'step1'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n, <span class="string">'step2'</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'step4'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, <span class="string">'step3'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这种代码输出：1 step1换行2 step2换行undefined step3换行step4</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, <span class="string">'step1'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="number">2</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(n, <span class="string">'step2'</span>);</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'step4'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">n</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, <span class="string">'step3'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这种代码输出：1 step1 换行 2 step2 换行 step4 换行 undefined step3</p><p>接下来看一个async和promise组合使用的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>);</span><br><span class="line">    <span class="keyword">await</span> async2();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">async1();</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><p>对于遇到了async的情况，我们可以把它转化成下面这样在进行分析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// before</span></span><br><span class="line"><span class="keyword">await</span> async2();</span><br><span class="line"></span><br><span class="line"><span class="comment">// after</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(async2()).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>对于上面这道题目的分析，详情参见<a href="https://yanceyleo.com/p/5cbc0ad8ec9b0f4eac13467e" target="_blank" rel="noopener">Yancey’Blog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://yanceyleo.com/p/5cbc0ad8ec9b0f4eac13467e&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详情请参考该篇博文&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;几个问题：&quot;&gt;&lt;a href=&quot;#几个问题
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css题目</title>
    <link href="http://yoursite.com/2019/04/24/css%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/04/24/css题目/</id>
    <published>2019-04-24T03:07:50.000Z</published>
    <updated>2019-04-24T03:43:01.313Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-对于下面的代码设置图片宽度为300px"><a href="#1-对于下面的代码设置图片宽度为300px" class="headerlink" title="1.对于下面的代码设置图片宽度为300px:"></a>1.对于下面的代码设置图片宽度为300px:</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"sthPath.png"</span> <span class="attr">style</span>=<span class="string">"width: 500px !important;"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>解法一：样式覆盖，注意，如果是样式覆盖的话，那么是写内联样式，而不是卸载css文件中。内联权重会高于css里面的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"sthPath.png"</span> <span class="attr">style</span>=<span class="string">"width: 500px !important; width: 50px !important"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>解法二：如果max-width所设置的值 &lt; width设置的值的话，那么哪怕width的权重为!important，盒子的width也是max-width所设置的值；如果大于的话，那么就还是width所设置的值了。300 &lt; 500，所以这里可以使用max-width进行解决：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法三：使用变换scale，如下所示：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(0.6);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法四：转换为border-box，接着设置padding瓜分宽度</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解法五：使用zoom，不过zoom属性兼容性很差，在Firefox所以版本中几乎全乎阵亡。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img</span> &#123;</span><br><span class="line">  <span class="attribute">zoom</span>: <span class="number">0.6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-对于下面的代码设置图片宽度为300px&quot;&gt;&lt;a href=&quot;#1-对于下面的代码设置图片宽度为300px&quot; class=&quot;headerlink&quot; title=&quot;1.对于下面的代码设置图片宽度为300px:&quot;&gt;&lt;/a&gt;1.对于下面的代码设置图片宽度为300px:
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js题目</title>
    <link href="http://yoursite.com/2019/04/24/js%E9%A2%98%E7%9B%AE/"/>
    <id>http://yoursite.com/2019/04/24/js题目/</id>
    <published>2019-04-24T01:16:53.000Z</published>
    <updated>2019-05-29T01:51:39.867Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Array.prototype.slice(beignIndex, beginIndex+amount)是一个纯函数; Array.prototype.splice(beginIndex, amount)不是一个纯函数；Array.prototype.filter()是一个纯函数。Array.prototype.sort不是一个纯函数</p></blockquote><h3 id="1-如何遍历一个DOM树"><a href="#1-如何遍历一个DOM树" class="headerlink" title="1.如何遍历一个DOM树"></a>1.如何遍历一个DOM树</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">traversalDom</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!node || node.nodeType != <span class="number">1</span>) <span class="keyword">return</span>;            <span class="comment">// 非节点以及非元素节点直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (node &amp;&amp; node.nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'node tag is'</span>, node.tagName);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = node.childNodes.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> ele = node.childNodes[i];</span><br><span class="line">    <span class="comment">// 只遍历元素节点</span></span><br><span class="line">    <span class="keyword">if</span> (ele.nodeType == <span class="number">1</span>) &#123;</span><br><span class="line">      traversalDom(ele);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-求两个数组的交集，比如给定nums1-1-2-2-1-，nums2-2-2-，返回-2-2"><a href="#2-求两个数组的交集，比如给定nums1-1-2-2-1-，nums2-2-2-，返回-2-2" class="headerlink" title="2.求两个数组的交集，比如给定nums1 = [1, 2, 2, 1]，nums2 = [2, 2]，返回 [2, 2]"></a>2.求两个数组的交集，比如给定nums1 = [1, 2, 2, 1]，nums2 = [2, 2]，返回 [2, 2]</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 随机生成数组的方法 */</span></span><br><span class="line"><span class="keyword">let</span> randomArr = <span class="function">(<span class="params">length, min, max</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = <span class="built_in">Math</span>.random() * (max-min+<span class="number">1</span>) + min;</span><br><span class="line">    arr.push(<span class="built_in">parseInt</span>(item));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 计算交集 */</span></span><br><span class="line"><span class="keyword">let</span> computeSame = <span class="function">(<span class="params">arr1, arr2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!arr1 || !arr2 || !arr1.length || !arr2.length) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> compare = arr1.length &gt; arr2.length;</span><br><span class="line">  <span class="keyword">let</span> shortArr = compare ? arr2 : arr1;</span><br><span class="line">  <span class="keyword">let</span> longArr = compare ? arr1 : arr2;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = shortArr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> n = shortArr[i];</span><br><span class="line">    <span class="keyword">if</span> (map.has(n)) &#123;</span><br><span class="line">      result.push(n);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (longArr.includes(n)) &#123;</span><br><span class="line">      result.push(n);</span><br><span class="line">      map.set(n, <span class="string">'faster'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = randomArr(<span class="number">1000000</span>, <span class="number">1</span>, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">let</span> arr2 = randomArr(<span class="number">100000</span>, <span class="number">1</span>, <span class="number">300</span>);</span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'computeSame'</span>);</span><br><span class="line"><span class="keyword">let</span> result = computeSame(arr1, arr2);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'computeSame'</span>);</span><br></pre></td></tr></table></figure><p>优化手段：遍历小数组；使用Map避免过多的查询数组是否包含某个元素；使用for循环代替map，在数据量很多的时候，使用for循环会比map更加的快。利用上诉代码在Mac上面运行基本耗时在8ms左右。</p><h3 id="3-节流和防抖有什么区别？以及如何实现？"><a href="#3-节流和防抖有什么区别？以及如何实现？" class="headerlink" title="3.节流和防抖有什么区别？以及如何实现？"></a>3.节流和防抖有什么区别？以及如何实现？</h3><p>首先，这两种措施都是用来解决某些行为被高频触发的问题，这两种方式的不同点在于节流是规定每隔多少时间运行一次（不在取决于用户的某些高频行为），而对于防抖来说则是在高频被触发的场合下，只有最后一次触发会产生有效动作。按理说，防抖和节流都是使用在被频繁触发的行为之间间隔时间会小于你所设置的监听时间。如下代码所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 函数防抖包装方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    clearTimeout(timeout);              <span class="comment">// timeout被闭包给使用了，也就是说每个cb所使用的都是同一个timeout句柄。</span></span><br><span class="line">    timeout = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      fn &amp;&amp; fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'是否防抖节流成功'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 函数节流包装方法 */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canRun = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>;              <span class="comment">// 同样canRun也是通过闭包的形式被循环使用</span></span><br><span class="line">    canRun = <span class="literal">false</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn &amp;&amp; fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">      canRun = <span class="literal">true</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ele = <span class="built_in">document</span>.querySelector(<span class="string">'.input'</span>);</span><br><span class="line">ele.addEventListener(<span class="string">'input'</span>, debounce(sayHi));</span><br></pre></td></tr></table></figure><p>从上面的代码我们可以看出，对于防抖来说核心就是清除定时器，让你连执行的机会都没有；而对于节流来说，则是设置一个执行开关，条件满足了，执行开关打开，执行回调，否则关闭。</p><h3 id="4-如何获取页面域名信息等数据？"><a href="#4-如何获取页面域名信息等数据？" class="headerlink" title="4.如何获取页面域名信息等数据？"></a>4.如何获取页面域名信息等数据？</h3><p>window.location.href可用用来获取页面链接；window.location.pathname用来获取当前页面的路由名；window.location.search用于获取query数据。</p><h3 id="5-DOMContentLoaded和load有什么区别？"><a href="#5-DOMContentLoaded和load有什么区别？" class="headerlink" title="5.DOMContentLoaded和load有什么区别？"></a>5.DOMContentLoaded和load有什么区别？</h3><p>DOMContentLoaded在完成HTML Parser阶段被触发；onLoad事件则是在所有资源被成功加载完的时候触发。一般的，DOMContentLoaded都会先与onLoad事件被触发，但是也有很多情况下，DOMContentLoaded会比onLoad更加的慢一点。但是有趣的是，哪怕在火焰图中先看到onLoad事件被触发，之后在触发DOMContentLoaded事件，DOMContentLoaded的回调方法也会比onLoad的回调方法更早调用。一个问题，我们在之前关于关键渲染路径的文章里面看到过js的执行会阻塞页面渲染流程，然后只有当整棵DOM树被解析出来后才有可能进入接下来的paint阶段，那么将script标签放在最后面又有什么好处呢？因为浏览器有一个first paint流程，这个first paint流程并不一定要求需要完整的dom和CSSOM，也就是说构建出来的DOM越多的话，那么体验将会越好，而将script放在head中的话显然会减少所构建出来的DOM。</p><h3 id="6-为什么for会比forEach，map更快？"><a href="#6-为什么for会比forEach，map更快？" class="headerlink" title="6.为什么for会比forEach，map更快？"></a>6.为什么for会比forEach，map更快？</h3><p>for循环具有更少的函数调用栈，上下文切换时间花费更少；forEach和map引入了额外操作拖慢性能。</p><h3 id="7-数组去重"><a href="#7-数组去重" class="headerlink" title="7.数组去重"></a>7.数组去重</h3><p>1.使用filter</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;</span>): <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = arr.filter(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> array.indexOf(item) === index);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用includes或者indexOf</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arr: <span class="built_in">number</span>[]</span>): <span class="title">number</span>[] </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result: <span class="built_in">number</span>[] = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = arr[i];</span><br><span class="line">    <span class="keyword">if</span> (!result.includes(item)) &#123;   <span class="comment">// 也可以换成indexOf</span></span><br><span class="line">      result.push(item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用set</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;</span>): <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">set</span>: Set&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> Set(arr);</span><br><span class="line">  <span class="keyword">let</span> result: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = <span class="built_in">Array</span>.from(<span class="keyword">set</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">set</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.排序后对比前后项</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">arr: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;</span>): <span class="title">Array</span>&lt;<span class="title">number</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [];</span><br><span class="line">  <span class="keyword">let</span> prev: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a-b);        <span class="comment">// 从小到大进行排序</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span> || arr[i] !== prev) &#123;</span><br><span class="line">        result.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    prev = arr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-类型判断"><a href="#8-类型判断" class="headerlink" title="8.类型判断"></a>8.类型判断</h3><p>不用多说，Object.prototype.toString.call()很强大。在背个书，typeof null === “object”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Array.prototype.slice(beignIndex, beginIndex+amount)是一个纯函数; Array.prototype.splice(beginIndex, amount)不是一个纯函数；Array.prototyp
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>深入理解padding</title>
    <link href="http://yoursite.com/2019/04/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3padding/"/>
    <id>http://yoursite.com/2019/04/23/深入理解padding/</id>
    <published>2019-04-23T07:21:23.000Z</published>
    <updated>2019-04-27T02:13:04.664Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-带着问题出发"><a href="#1-带着问题出发" class="headerlink" title="1.带着问题出发"></a>1.带着问题出发</h3><p>如果设置盒模型的box-sizing为border-box的话，那么元素的宽度就一定是设置的width吗？不是的，比如当padding设置的过大的时候，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 300px;</span></span><br><span class="line"><span class="undefined">  height: 300px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">  padding: 500px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于上面这种情况，box的宽度便是1000px。</p><p>判断下面这段代码的输出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- box样式设置同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sp"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> sp = <span class="built_in">document</span>.querySelector(<span class="string">'.sp'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'box'</span>, box.clientWidth, box.clientHeight);</span></span><br><span class="line"><span class="javascript">  <span class="built_in">console</span>.log(<span class="string">'sp'</span>, sp.clientWidth, sp.clientHeight);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为box,1000,1000；和sp,0,0。对于内联元素来说，它的可视宽度和可视高度永远是0。</p><p><strong>padding是否会影响内联元素垂直方向的行为</strong>？就表现上来说，你会发现设置padding并没有改变上下两行之间的间距，这给我们造成的错觉就是padding不会改变上下两行内容之间的间距。对于内联元素来说，垂直方向的行为完全受line-height和vertical-align的影响。对应到这里就是说内联元素的padding的确不对位置产生影响效果。<strong>尽管设置padding对内联元素垂直方向的定位不会产生什么影响，但是对元素的尺寸影响还是在的。</strong></p><p>可以利用内联元素的padding效果来做些什么？</p><p>1).增大点击面积，既然他不会影响布局，但是又会影响尺寸的话，那么把padding设置的足够大可以很好地增大点击面积。</p><p>2).实现垂直分隔符的效果，代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">a</span>+<span class="selector-tag">a</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="undefined">  content: '';</span></span><br><span class="line"><span class="undefined">  font-size: 0;</span></span><br><span class="line"><span class="undefined">  padding: 9px 1px 2px;</span></span><br><span class="line"><span class="undefined">  margin: 0 6px;</span></span><br><span class="line"><span class="undefined">  border-left: 1px solid grey;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">```html</span><br><span class="line"></span><br><span class="line">### 2.padding非百分比值</span><br><span class="line"></span><br><span class="line">**padding属性的值也能够使用百分比来进行计算，但是百分比值无论是设置水平方向的padding还是设置垂直方向的padding都是相对于元素自己的宽度进行计算。**</span><br><span class="line"></span><br><span class="line">可以使用块元素的padding相对单位为自身宽度来实现一些什么效果呢？答案是可以用来实现适配良好的头图效果，如下所示：</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"sthPath"</span> <span class="attr">alt</span>=<span class="string">"头图"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">  padding: 10% 50%;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &gt; <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: absolute;</span></span><br><span class="line"><span class="undefined">  width: 100%;</span></span><br><span class="line"><span class="undefined">  height: 100%;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的关键点是.box设置了相对定位，然后根据padding: 10% 50%设置了1:5长宽比（是的position: relative，默认宽度上的表现类似于box-sizing: border-box;width: 100%，默认高度则是默认为0)。</p><p>消除幽灵空白节点，设置font-size为0。</p><h3 id="3-利用padding效果实现一个菜单按钮"><a href="#3-利用padding效果实现一个菜单按钮" class="headerlink" title="3.利用padding效果实现一个菜单按钮"></a>3.利用padding效果实现一个菜单按钮</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="undefined">  display: inline-block;</span></span><br><span class="line"><span class="undefined">  width: 60px;</span></span><br><span class="line"><span class="undefined">  height: 10px;</span></span><br><span class="line"><span class="undefined">  padding: 15px 0;</span></span><br><span class="line"><span class="undefined">  border-top: 10px solid grey;</span></span><br><span class="line"><span class="undefined">  border-bottom: 10px solid grey;</span></span><br><span class="line"><span class="undefined">  background: grey;</span></span><br><span class="line"><span class="undefined">  background-clip: content-box;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中background-clip: content-box的意思是指背景只是应用在content-box上面。</p><h3 id="4-利用padding制作一个镂空圆点"><a href="#4-利用padding制作一个镂空圆点" class="headerlink" title="4.利用padding制作一个镂空圆点"></a>4.利用padding制作一个镂空圆点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dot"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.dot</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 80px;</span></span><br><span class="line"><span class="undefined">  height: 80px;</span></span><br><span class="line"><span class="undefined">  padding: 10px;</span></span><br><span class="line"><span class="undefined">  border: 10px solid grey;</span></span><br><span class="line"><span class="undefined">  border-radius: 50%;</span></span><br><span class="line"><span class="undefined">  background: grey;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-clip</span>: <span class="selector-tag">content-box</span>;   <span class="comment">/** 注意background-clip要放在background后面，否则会被background给覆盖 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-带着问题出发&quot;&gt;&lt;a href=&quot;#1-带着问题出发&quot; class=&quot;headerlink&quot; title=&quot;1.带着问题出发&quot;&gt;&lt;/a&gt;1.带着问题出发&lt;/h3&gt;&lt;p&gt;如果设置盒模型的box-sizing为border-box的话，那么元素的宽度就一定是设置的
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>浏览器页面渲染机制</title>
    <link href="http://yoursite.com/2019/04/22/%E6%B5%8F%E8%A7%88%E5%99%A8%E9%A1%B5%E9%9D%A2%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/04/22/浏览器页面渲染机制/</id>
    <published>2019-04-22T09:45:19.000Z</published>
    <updated>2019-04-26T06:19:25.014Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>他们夫妻，丈夫是高个子，妻子要矮上近四十公分。女儿的个子当然不高，成年以后常怨毒地责问“你凭什么娶个侏儒来连累后代”。当年，他在兵团的广播站里第一次听到她的声音，就开始疯狂地想念她，不知羞耻地逢人便诉说。当得知她的个子只到自己胸前时，不是失望，而是鼓起了追求的勇气。</p></blockquote><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>浏览器内核两个核心程序：渲染引擎，JS引擎。当然，DOM是属于渲染引擎里面的东西，所以使用JS去操作DOM的时候，本质上是JS引擎和DOM引擎进行了跨界交流，而这个跨界交流的开销并不小，所以需要尽量减少操作DOM。需要注意的地方，这里所说的DOM操作不仅包括了修改，而且也包括了读取。</p><p>页面经过下面这些步骤呈现在用户眼中：1).输入域名，浏览器进行DNS解析获取服务器IP地址；2).浏览器向这个IP地址的机器发送请求；3).服务器处理请求，发送响应；4).浏览收到响应数据，接着根据关键渲染路径进行渲染页面。</p><h3 id="2-关键渲染路径"><a href="#2-关键渲染路径" class="headerlink" title="2.关键渲染路径"></a>2.关键渲染路径</h3><p>浏览器在收到了文件的字节码之后，会根据charset解码出对应的字符串。在没有JS干扰的情况下，关键渲染路径分为了下面几个步骤：构建DOM(document object model)；构建CSSOM(css object model)；利用构建出来的DOM和CSSOM创建出渲染树。接下来浏览器会分析渲染树中的每一个节点在网页中所对应的位置，这步也叫做布局。布局完接下来便开始在屏幕上绘制像素。正常情况下，DOM构建和CSSOM构建是并行构建的。</p><p>那么在有JS干扰的情况下呢？JS会阻塞DOM构建，同时JS也会阻塞CSSOM的构建，如果某个时刻下，浏览器还没有完成CSSOM的下载和构建的话，但是此时同时还在运行脚本，<strong>那么浏览器将会延迟脚本执行和DOM构建</strong>，直至完成CSSOM的下载和构建。划重点，不仅会阻塞js执行而且还会阻塞DOM构建。遇到脚本时，优先级为先构建CSSOM，接着执行JS，然后构建DOM。</p><p>CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA5NzkwNDk3MQ==&amp;mid=2650588806&amp;idx=1&amp;sn=408a54e7c8102fd6944c9a40b119015a&amp;chksm=8891d6a2bfe65fb42f493fe9a4dab672dd7e440f31e753196cee0cfbc6696e4f8dd3a669e040&amp;mpshare=1&amp;scene=21&amp;srcid=1228ZrXsmbZKcgCSu7zTVDwy#wechat_redirect" target="_blank" rel="noopener">关于关键渲染路径的详细解释博文链接</a></p><p>构建出来的DOM树和渲染树还是存在区别的，对于那些因为样式导致元素不存在（比如display:none;)的节点在DOM树中会存在；但是在渲染树中就不会存在了。</p><h3 id="3-布局和绘制"><a href="#3-布局和绘制" class="headerlink" title="3.布局和绘制"></a>3.布局和绘制</h3><p>当浏览器生成渲染树后，就会根据渲染树来进行布局。布局也叫做回流，浏览器在回流过程中做的主要工作就是计算渲染树中各个节点在屏幕上确切位置和大小。</p><h3 id="4-回流reflow和重绘repaint"><a href="#4-回流reflow和重绘repaint" class="headerlink" title="4.回流reflow和重绘repaint"></a>4.回流reflow和重绘repaint</h3><p>重绘repaint：当我们对DOM节点样式的修改并没有影响到位置属性的时候（比如说设置背景色），此时只需要进行重绘repaint步骤。</p><p>回流reflow：对DOM节点样式的修改影响了位置属性（比如设置box的宽高，隐藏显示元素等），此时将会引起回流reflow过程。</p><p>回流必定重绘，重绘并不引起回流。回流的成本会比重绘要高。需要注意的是下面这些行为也会引发回流reflow：内容变化，比如input输入文字；计算offseWidth和offsetHeight；浏览器窗口尺寸发生变化。</p><h3 id="5-script的async属性，defer属性区别。"><a href="#5-script的async属性，defer属性区别。" class="headerlink" title="5.script的async属性，defer属性区别。"></a>5.script的async属性，defer属性区别。</h3><p>默认行为下的script行为是会阻塞页面，这里的阻塞页面既包括了执行js期间的阻塞；也包括从其它存储空间里面加载js文件期间的阻塞（如从网络中获取）；</p><p>async行为：从其它存储空间加载js文件这个过程是不会阻塞页面文档解析的，此时文档解析和网络加载js在浏览器中是并行执行；但是一旦加载完js文件，执行js期间将会阻塞页面解析；js运行完毕后，在从中断位置处继续进行页面解析步骤；</p><p>defer行为：加载js和不阻塞页面文档解析，加载js和页面解析在浏览器中是并行执行；但是js的运行并不是js一加载完成便开始运行的，而是等到页面文档解析完成的时候，js才开始执行。也就是说，defer下script被延迟了运行，但是加载过程是和页面解析过程并行的。</p><h3 id="6-如何进行性能优化？"><a href="#6-如何进行性能优化？" class="headerlink" title="6.如何进行性能优化？"></a>6.如何进行性能优化？</h3><p>1.可以给某些引用的js文件加上async或者defer标签，避免阻塞页面解析；</p><p>2.css的link可以加上preload标签，因为CSSOM + DOM 才能构建出渲染树，而且CSSOM还会阻塞JS。</p><h3 id="7-参考文章："><a href="#7-参考文章：" class="headerlink" title="7.参考文章："></a>7.参考文章：</h3><p><a href="https://github.com/berwin/Blog/issues/29" target="_blank" rel="noopener">berwin’s blog</a></p><p><a href="https://github.com/berwin/Blog/issues/32" target="_blank" rel="noopener">优化关键路径渲染</a></p><p><a href="https://github.com/berwin/Blog/issues/35" target="_blank" rel="noopener">性能优化相关</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;他们夫妻，丈夫是高个子，妻子要矮上近四十公分。女儿的个子当然不高，成年以后常怨毒地责问“你凭什么娶个侏儒来连累后代”。当年，他在兵团的广播站里第一次听到她的声音，就开始疯狂地想念她，不知羞耻地逢人便诉说。当得知她的个子只到自己胸前时，不是失望，而是
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>关于滚动吸顶</title>
    <link href="http://yoursite.com/2019/04/18/%E5%85%B3%E4%BA%8E%E6%BB%9A%E5%8A%A8%E5%90%B8%E9%A1%B6/"/>
    <id>http://yoursite.com/2019/04/18/关于滚动吸顶/</id>
    <published>2019-04-18T07:03:22.000Z</published>
    <updated>2019-04-21T09:11:17.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 所有人其实就是一个整体，别人的不幸就是你的不幸。不要以为丧钟为谁而鸣，它就是为你而鸣。</p></blockquote><h3 id="1-题外话"><a href="#1-题外话" class="headerlink" title="1.题外话"></a>1.题外话</h3><p>说句题外话，请问对于下面的代码是输出什么信息呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    *, html, body &#123;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.p1</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: relative;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 300px;</span></span><br><span class="line"><span class="undefined">        padding: 60px;</span></span><br><span class="line"><span class="undefined">        border: 1px solid green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.p2</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        border: 1px solid red;</span></span><br><span class="line"><span class="undefined">        padding: 20px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.c</span> &#123;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        height: 50px;</span></span><br><span class="line"><span class="undefined">        background: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"p2"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"c"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> c = <span class="built_in">document</span>.querySelector(<span class="string">'.c'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'c.offsetTop'</span>, c.offsetTop);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>求元素c的offsetTop？是20吗还是21？答案是都不是，为什么呢？因为对于offsetTop的定义是用来获取其相对于自己的定位父级顶部的距离，那么问题来了，这个定位父级是怎么定义的呢？答案就是与当前元素最近的position != static的元素。因此，对于上面这种场合来说，输出的结果应该是81px。</p><p>下面言归正传，首先介绍使用position: sticky的形式实现滚动置顶。</p><h3 id="2-黏性定位之position-sticky"><a href="#2-黏性定位之position-sticky" class="headerlink" title="2.黏性定位之position:sticky"></a>2.黏性定位之position:sticky</h3><p>先看黏性定位的定义：结合了 position:relative 和 position:fixed 两种定位功能于一体的特殊定位，适用于一些特殊场景。元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定位，之后为固定定位。</p><p>接下来带着问题加深理解下新朋友黏性定位(position: sticky):</p><p>问1.黏性定位position:sticky会有这么样的展示效果？</p><p>答：首先了解下使用方法，要使用黏性定位的话那么使用黏性定位的元素还需要搭配定位属性top,bottom,left,right四者之一。并且使用黏性定位的元素其任意一个父元素（包括祖先元素）都不能够将overflow设置为除了visible之外的其它值，否则的话黏性定位将会没有效果，所以如果某个时候你发现你写的黏性定位不起作用的话，先检查一下是否是因为设置黏性定位元素的父元素或者是父元素是不是设置了overflow为非visible之外的值。下面通过一个例子讨论展示效果是怎么呈现的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100vw;</span></span><br><span class="line"><span class="undefined">  height: 200vh;</span></span><br><span class="line"><span class="undefined">  margin-top: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">  box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">  width: 100vw;</span></span><br><span class="line"><span class="undefined">  height: 50px;</span></span><br><span class="line"><span class="undefined">  background: yellow;</span></span><br><span class="line"><span class="undefined">  position: sticky;</span></span><br><span class="line"><span class="undefined">  top: 60px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们设置了header的阈值是60px，这就表明着当header距离视窗的高度小于等于60px的时候，此时header将会固定在离视窗60px处的位置。这也就意味着只需要container滚动40px就能看到这种滚动置顶的效果。</p><p>问2.黏性定位position:sticky的元素的定位上下文是谁？</p><p>答：就视觉表现来看，我将其理解为两种行为：分别是距离自己最近的父级块元素和视窗本身。那么这两种行为在什么时候触发呢？触发了黏性定位所设置的那个阈值的时候，如果当黏性定位的元素距离视窗的距离大于阈值的话，那么他的定位上下文就是父元素本身；如果当黏性定位的元素距离视窗的距离小于阈值的话，那么他的定位上下文就是视窗自身了。</p><p>黏性定位就使用方法来说还是很方便的，但是兼容性问题不是特别好。</p><h3 id="3-根据offsetTop来实现滚动吸顶"><a href="#3-根据offsetTop来实现滚动吸顶" class="headerlink" title="3.根据offsetTop来实现滚动吸顶"></a>3.根据offsetTop来实现滚动吸顶</h3><p>在前面我们也提到过了，那就是一个元素的offsetTop值是相对于其定位父级的距离值，这个定位父级的position值为非static的父级元素或者body。那么问题来了，如果我们需要滚动置顶的元素的父级或者祖先级别元素有某个使用了定位属性的话，那么就会出现滚动吸顶不准确的情况了，如何解决？思路大致如下所示：不断调用offsetTop，没调用一次向上延伸到定位父级元素上面。直到到了body为止，下面介绍一个例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">html, body &#123;</span></span><br><span class="line"><span class="undefined">  margin: 0;</span></span><br><span class="line"><span class="undefined">  padding: 0;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.wrapper</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: relative;</span></span><br><span class="line"><span class="undefined">  margin-top: 60px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100vw;</span></span><br><span class="line"><span class="undefined">  height: 150px;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">background</span>: <span class="selector-id">#f0f0f0</span>;</span></span><br><span class="line"><span class="undefined">  margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="undefined">  width: 100vw;</span></span><br><span class="line"><span class="undefined">  height: 50px;</span></span><br><span class="line"><span class="undefined">  background: orange;</span></span><br><span class="line"><span class="undefined">  margin-bottom: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.fixedHeader</span> &#123;</span></span><br><span class="line"><span class="undefined">  position: fixed;</span></span><br><span class="line"><span class="undefined">  top: 0;</span></span><br><span class="line"><span class="undefined">  left: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">computeOffset</span> (<span class="params">ele, direction</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> offsetY = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> offsetX = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">while</span> (ele != <span class="built_in">window</span>.document.body &amp;&amp; ele != <span class="literal">null</span>) &#123;</span></span><br><span class="line"><span class="undefined">    offsetY += ele.offsetTop;</span></span><br><span class="line"><span class="undefined">    offsetX += ele.offsetLeft;</span></span><br><span class="line"><span class="undefined">    ele = ele.offsetParent;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (direction == <span class="string">'left'</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> offsetX;</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> offsetY;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkClassNameExists</span> (<span class="params">ele, className</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(ele.classList);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (arr.indexOf(className) !== <span class="number">-1</span>) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">fixedHeader</span> (<span class="params">ele</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (checkClassNameExists(ele, <span class="string">'fixedHeader'</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">  ele.classList.add(<span class="string">'fixedHeader'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">normalHeader</span> (<span class="params">ele</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!checkClassNameExists(ele, <span class="string">'fixedHeader'</span>)) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">  ele.classList.remove(<span class="string">'fixedHeader'</span>);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> headerEle = <span class="built_in">document</span>.querySelector(<span class="string">'.header'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> truelyOffset = computeOffset(headerEle);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> scrollY = <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (scrollY &gt; truelyOffset) &#123;</span></span><br><span class="line"><span class="undefined">      fixedHeader(headerEle);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="undefined">      normalHeader(headerEle);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要避免这里是相对于定位父级的offset，所以这里一直在取其相对的定位父级，直到到了body或者到了null的时候。</p><p>拓展：使用document.documentElement.style可以获取到浏览器所支持的css属性列表数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 所有人其实就是一个整体，别人的不幸就是你的不幸。不要以为丧钟为谁而鸣，它就是为你而鸣。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-题外话&quot;&gt;&lt;a href=&quot;#1-题外话&quot; class=&quot;headerlink&quot; title=&quot;1.题
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>从一道题目谈谈跨域</title>
    <link href="http://yoursite.com/2019/04/09/%E4%BB%8E%E4%B8%80%E9%81%93%E9%A2%98%E7%9B%AE%E8%B0%88%E8%B0%88%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2019/04/09/从一道题目谈谈跨域/</id>
    <published>2019-04-08T16:25:28.000Z</published>
    <updated>2019-04-16T15:17:04.494Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>那个时代的摇滚让人热泪盈眶。</p></blockquote><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p>跨域是浏览器限制的，在xhr请求中，跨域问题尤为常见。浏览器针对跨域请求的策略：一个域名的JS，在未经允许的情况下，是不得读取另外一个域名的内容的。跨域问题不能够单单通过前端进行解决。</p><p>关于跨域常见的误区：</p><p>误区一：是服务端阻止的你跨域。NO! 上面也提到的，跨域是浏览器应用同源策略所限制的。</p><h3 id="2-例子1：没有同源策略限制的接口请求"><a href="#2-例子1：没有同源策略限制的接口请求" class="headerlink" title="2.例子1：没有同源策略限制的接口请求"></a>2.例子1：没有同源策略限制的接口请求</h3><p>这里考虑使用cookie作为登录态的处理方法。假如你登录了a.com的话，然后接着登录b.com的话。并且这个b.com背地里偷偷摸摸做了一些暗操作：执行a.com网站的某个操作；我们知道对于cookie来说，浏览器会将它自动放到请求头里面的，所以假设没有同源策略的限制的话，那么b网站在背后偷偷对网站a发起请求那么就是可能的。但这样的操作所带来的问题不言而喻，因此基于同源策略的跨域解决是很有必要的。</p><h3 id="3-解决跨域的方案之使用JSONP技术"><a href="#3-解决跨域的方案之使用JSONP技术" class="headerlink" title="3.解决跨域的方案之使用JSONP技术"></a>3.解决跨域的方案之使用JSONP技术</h3><p>何谓JSONP技术？大意就是指使用script标签向被跨域的服务器发起请求。当服务器收到这个请求后，便返回一串js代码，前端页面在收到服务端所返回的数据之后便能够执行这个请求。为什么JSONP技术能够用来进行跨域呢？因为script标签就是不受浏览器的跨域限制哇。接下来举一个例子来使用JSONP技术来解决：在将会跨域的情况下，服务端根据客户端传过来的type返回对应的列表数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 这是前端页面代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> cb = <span class="function"><span class="keyword">function</span> (<span class="params">arr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span> (!arr || <span class="built_in">Object</span>.prototype.toString.call(arr) != <span class="string">"[object Array]"</span>) &#123; <span class="keyword">return</span>; &#125;</span></span><br><span class="line"><span class="javascript">  arr.map(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);</span></span><br><span class="line"><span class="undefined">    p.innerText = str;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(p);</span></span><br><span class="line"><span class="undefined">  &#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https:abcdwillcors.com/jsonp?type=article&amp;cb=cb"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意query参数，这在JSONP中告诉了后端自己改怎么处理，处理完了该怎么返回。接下来看看后端相关代码（使用express）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mockDbQuery = <span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'article'</span>:</span><br><span class="line">      result = [<span class="string">'article1'</span>, <span class="string">'article2'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'video'</span>:</span><br><span class="line">      result = [<span class="string">'video1'</span>, <span class="string">'video2'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      result = [<span class="string">'article1'</span>, <span class="string">'video1'</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> query = req.query;</span><br><span class="line">  res.cookie(<span class="string">'sessionid'</span>, <span class="string">'mock one'</span>);</span><br><span class="line">  <span class="keyword">let</span> result = mockDbQuery(query.type || <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> response = <span class="string">`<span class="subst">$&#123;query.cb&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(result)&#125;</span>)`</span>;            <span class="comment">// 客户端接受到的应该是未经解释过的代码</span></span><br><span class="line">  res.send(response);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>上面的例子便是使用JSONP技术来完成跨域功能处理。运行之后，前端将能够渲染出后端所返回的列表数据。</p><h3 id="4-通过表单Form来解决POST请求跨域问题"><a href="#4-通过表单Form来解决POST请求跨域问题" class="headerlink" title="4.通过表单Form来解决POST请求跨域问题"></a>4.通过表单Form来解决POST请求跨域问题</h3><p>对于上面的jsonp请求，很明显它支持GET请求的形式。尽管也能够携带有足够的参数，但是是满足不了POST请求的。为什么Form表单也没有被浏览器现在跨域？因为该种方式下，发起跨域的页面是无法获取新页面的内容的。而xhr确是有能力读取新页面返回的内容的。下面是一个使用form进行POST请求解决跨域的场景：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 这是前端页面的代码</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> mockPost = <span class="function">(<span class="params">url, data</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> form = <span class="built_in">document</span>.createElement(<span class="string">'form'</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">let</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">  iframe.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="javascript">  form.style.display = <span class="string">'none'</span>;</span></span><br><span class="line"><span class="javascript">  iframe.name = <span class="string">'mockPost'</span>;</span></span><br><span class="line"><span class="undefined">  form.action = url;</span></span><br><span class="line"><span class="javascript">  form.method = <span class="string">'post'</span>;</span></span><br><span class="line"><span class="javascript">  form.target = iframe.name;              <span class="comment">// 避免在新页面中打开或者本页面刷新</span></span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="undefined">    input.name = key;</span></span><br><span class="line"><span class="undefined">    input.value = data[key];</span></span><br><span class="line"><span class="undefined">    form.appendChild(input.cloneNode());</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.appendChild(form);</span></span><br><span class="line"><span class="undefined">  form.submit();</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.body.removeChild(form);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">mockPost(<span class="string">'http://apiwillcors/apiPost'</span>, &#123; <span class="attr">name</span>: <span class="string">'3h'</span>, <span class="attr">sex</span>: <span class="string">'man'</span> &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来是后端部分的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接着上个jsonp中的express例子</span></span><br><span class="line">router.post(<span class="string">'/apiPost'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> body = req.body;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'body is'</span>, body);                                     <span class="comment">// 打印出 &#123; name: '3h', sex: 'man' &#125;</span></span><br><span class="line">  res.send(<span class="string">'done'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-使用CORS协议处理跨域问题"><a href="#5-使用CORS协议处理跨域问题" class="headerlink" title="5.使用CORS协议处理跨域问题"></a>5.使用CORS协议处理跨域问题</h3><p>CORS基本介绍：CORS的全程叫做cross origin resource sharing，翻译过来也就是叫做跨域资源共享。CORS协议用来避开浏览器的同源策略，是JSONP协议的现代版本，CORS能够更好的支持各种HTTP方法以及XMLHttpRequest。</p><p>CORS相比JSONP，具有下面这些特点：</p><p>1.CORS支持所有类型的HTTP方法，能够搭配XMLHttpRequest进行使用，能够更好的处理服务器的响应结果。</p><p>2.相比JSONP，CORS兼容性可能会没那么好。</p><p>CORS协议是被浏览器所使用的，所以不要奇怪为什么在postman里面是不受CORS限制的。CORS的实现思路是使用自定义的HTTP请求头来携带双方所规定好的请求头信息，这部分请求头信息被用于双方进行相互了解。如果浏览器支持CORS协议的话，但是双方的请求头信息不符合所约定的规则的话，那么也会出现跨域问题。</p><p>在CORS协议中，请求分为两种，分别是简单请求和非简单请求。满足下面这些限制条件的请求就属于简单请求：</p><p>(1).请求方法为GET，POST，HEAD中的一种；（2）.HTTP头信息只能有Accept，Accept-Language，Content-Language，Last-Event-ID，Content-Type，而且Content-Type的值只能是application/x-www-form-urlencoded，multiple/form-data，text/plain。</p><p>对于简单请求来说，后端需要设置Access-Control-Origin响应头的值为*，如下所示（使用express举例）:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接着上面的express例子</span></span><br><span class="line">router.get(<span class="string">'/cors'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.cookie(<span class="string">'tokenId'</span>, <span class="number">2</span>);</span><br><span class="line">  res.send(<span class="string">'fine'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是客户端的代码</span></span><br><span class="line">fetch(<span class="string">'localhost:port/jsonp/cors'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'res is'</span>, res);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>很显然这个请求属于一个简单请求，并且我们的服务端还设置了Access-Control-Allow-Origin的值为*，意思就是告诉浏览器所有的Origin都能够访问我。因此此时即便是跨域了，但是也还是能够获取到数据的。</p><p>思考问题一：如果把Access-Control-Allow-Origin的值设置为某个具体的域名abc.com的话，并且发起跨域请求的网站的Origin并不是abc.com的话会发生什么情况？答案是会发生跨域，但是此时浏览器是能够收到服务器的正确响应结果的，只是不能通过js获取到返回值而已。把Access-Control-Allow-Origin值给取消所带来的结果也是一样。</p><p>接下来考虑对于非简单请求的CORS处理情况：</p><p>对于非简单请求来说，后端设置的请求头里面必不可少的信息是Access-Control-Allow-Origin(只要涉及到CORS，那个这个响应头信息必不可少)，Access-Control-Request-Method，Access-Control-Allow-Headers这几个字段。是不是后端设置这个请求支持了非简单请求，那么前端就必须使用非简单请求方式发起呢？答案是不是的，你仍旧可以使用简单请求方式向这个接口发起请求，至于能否拿到正确的数据这就需要看后端的处理方式的。</p><p>下面看一个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意这里使用的是all，不支持采用这种方法，仅仅作为演示使用</span></span><br><span class="line">router.all(<span class="string">'corsm'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>);</span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Method'</span>, <span class="string">'PUT,POST,GET,DELETE,OPTIONS'</span>);</span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Headers'</span>, <span class="string">'Origin,Accept,t'</span>);</span><br><span class="line">  res.send(<span class="string">'fine'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前端代码</span></span><br><span class="line">fetch(<span class="string">'http://someCom.com/jsonp/corsm'</span>, &#123;</span><br><span class="line">  headers: &#123;</span><br><span class="line">    t: <span class="string">'test'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'res is'</span>, res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>稍微解释一下上面这个例子：为什么服务端是all？这里主要是为了省事，对于非简单请求来说，首先浏览器会先发送一个OPTIONS请求，这叫做预检请求，只有等预检请求通过了才会接着发送后面的正式请求；而这里使用all只是为了省事处理，不推荐。接着在说下前端代码，为了表示这是个非简单请求，这里显式的加上了请求头t来表示这不是一个简单请求。如果把t这个自定义请求头给去掉的话，那么就是走的简单请求了，此时仍旧能够正常拿到响应数据。</p><h3 id="6-使用代理来解决跨域问题"><a href="#6-使用代理来解决跨域问题" class="headerlink" title="6.使用代理来解决跨域问题"></a>6.使用代理来解决跨域问题</h3><p>我们知道跨域是浏览器所导致的情况，因此如果需要解决这个问题的话，那么我们可以引入中间件来进行请求转发。这就要求中间件和前端网页是在同源下面的，而后端接口api不同源没关系，我们使用中间件将请求转发到真正的后端接口上面，此时就巧妙的避免了跨域问题。这种解决方法很普遍采用，并且这个中间件大多数都是NGINX。</p><p>我们可以看看下面这个配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:5050/;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /someapi/somePath/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:20000/somePath/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照上面这个配置，当你访问这个域名，经过若干步骤后到达了服务器后，默认被转发到了服务器自身的5050端口上面，这个端口被中间件给监听着，它负责静态文件分发，当你的前端页面发起一个api请求后，此时若是路由匹配上了nginx所设置的/someapi/somePath/的话，那么会被转接给本机20000/somePath上面。在这个例子中，使用两个中间件，第一个便是nginx转发api请求，第二个便是5050端口上的中间件负责静态文件服务。可以整合为一个中间件，接口分发和静态文件分发都可以交给nginx承担。</p><h3 id="7-postMessage解决跨域问题"><a href="#7-postMessage解决跨域问题" class="headerlink" title="7.postMessage解决跨域问题"></a>7.postMessage解决跨域问题</h3><h3 id="8-canvas中的跨域问题"><a href="#8-canvas中的跨域问题" class="headerlink" title="8.canvas中的跨域问题"></a>8.canvas中的跨域问题</h3><p>我们知道对于img标签来说，当然是不存在跨域问题的，比如你可以像下面这样使用而无需担心跨域问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'done'</span>);</span><br><span class="line">&#125;</span><br><span class="line">img.src = <span class="string">'http://timgsa.baidu.com/timg?image'</span>;</span><br></pre></td></tr></table></figure><p>但是如果要是把这张图用于进行canvas绘制的话，并且调用canvasInstance.getImageData方法的话，那么便会出现跨域问题，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 部分报错原因：The canvas has been tainted by cross-origin data.</span></span><br><span class="line"><span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">&#125;;</span><br><span class="line">img.src = <span class="string">'https://avatars3.githubusercontent.com/u/496048?s=120&amp;v=4%27;'</span>;</span><br></pre></td></tr></table></figure><p>为什么把图片绘制出来就没问题，调用getImageData或者toDataURL方法就会报跨域问题呢？因为此时会泄露信息。那么要怎么解决这个问题呢？告诉浏览器我请求别的域的图片的时候不用携带那个域名的敏感性信息即可，具体就是使用img.crossOrigin值即可。它有两个值可选，分别是’anonymous’和’use-credentials’这两个，第二个就表明我会携带敏感信息。需要注意的是，利用js对crossOrigin属性进行赋值的话，那么只要不是’use-credentials’那么就是表明是’anonymous’。所以对于上面这个问题，使用下面方式便可以解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">  <span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);                  <span class="comment">// 调用canvas绘制图片</span></span><br><span class="line">  context.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);    <span class="comment">// 此时能够正常获取到图片信息，不受干扰</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">&#125;;</span><br><span class="line">img.crossOrigin = <span class="string">'anonymous'</span>;</span><br><span class="line">img.src = <span class="string">'https://avatars3.githubusercontent.com/u/496048?s=120&amp;v=4%27;'</span>;</span><br></pre></td></tr></table></figure><p>上面这招算银弹吗？已经能够满足大部分使用场景了，但是对于ie10浏览器以下还是会有兼容性问题，所以该怎么解决呢？答案是利用ajax和URL.createObjectURL()方法曲线救国。</p><p>具体做法如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> url = URL.createObjectURL(<span class="keyword">this</span>.response);</span><br><span class="line">  <span class="keyword">let</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">  img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    context.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    context.getImageData(<span class="number">0</span>, <span class="number">0</span> , <span class="keyword">this</span>.width, <span class="keyword">this</span>.height);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">  &#125;;</span><br><span class="line">  img.src = url;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">'GET'</span>, <span class="string">'https://avatars3.githubusercontent.com/u/496048?s=120&amp;v=4%27;'</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.responseType = <span class="string">'blob'</span>;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>这种方法的缺点就是会多一个请求，但是兼容性挺好。</p><h3 id="9-问题"><a href="#9-问题" class="headerlink" title="9.问题"></a>9.问题</h3><p>为什么通常在发送数据埋点请求的时候使用的是 1x1 像素的透明 gif 图片？</p><p>用来实现跨域，而且兼容性很好。如何用它来实现跨域？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;那个时代的摇滚让人热泪盈眶。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-基本概念&quot;&gt;&lt;a href=&quot;#1-基本概念&quot; class=&quot;headerlink&quot; title=&quot;1.基本概念&quot;&gt;&lt;/a&gt;1.基本概念&lt;/h3&gt;&lt;p&gt;跨域是浏览
      
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
</feed>
